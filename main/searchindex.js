Search.setIndex({"docnames": ["DATASETS", "GetStarted", "Legal", "Models", "_autosummary/tlt.datasets.dataset.BaseDataset", "_autosummary/tlt.datasets.hf_dataset.HFDataset", "_autosummary/tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset", "_autosummary/tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset", "_autosummary/tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset", "_autosummary/tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset", "_autosummary/tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset", "_autosummary/tlt.datasets.pytorch_dataset.PyTorchDataset", "_autosummary/tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset", "_autosummary/tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset", "_autosummary/tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset", "_autosummary/tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset", "_autosummary/tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset", "_autosummary/tlt.datasets.tf_dataset.TFDataset", "_autosummary/tlt.models.hf_model.HFModel", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.train", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.optimize_graph", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.optimize_graph", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.optimize_graph", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train", "_autosummary/tlt.models.model.BaseModel", "_autosummary/tlt.models.pytorch_model.PyTorchModel", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.benchmark", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.benchmark", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.train", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.benchmark", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.optimize_graph", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.benchmark", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.optimize_graph", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train", "_autosummary/tlt.models.tf_model.TFModel", "api", "cli", "distributed", "docbuild", "examples/README", "examples/cli/README", "examples/cli/image_classification", "examples/cli/text_classification", "examples/examples", "index", "methods", "notebooks/Medical_Imaging_Classification", "notebooks/README", "notebooks/Remote_Sensing_Image_Scene_Classification", "notebooks/TLT_HF_Text_Classification_Performance", "notebooks/TLT_PyTorch_Anomly_Detection", "notebooks/TLT_PyTorch_Image_Classification_Transfer_Learning", "notebooks/TLT_PyTorch_Text_Classification_Transfer_Learning", "notebooks/TLT_TF_Image_Classification_Performance", "notebooks/TLT_TF_Image_Classification_Transfer_Learning", "notebooks/TLT_TF_Text_Classification_Transfer_Learning", "notebooks/setup", "tlt/distributed/README"], "filenames": ["DATASETS.rst", "GetStarted.rst", "Legal.rst", "Models.rst", "_autosummary/tlt.datasets.dataset.BaseDataset.rst", "_autosummary/tlt.datasets.hf_dataset.HFDataset.rst", "_autosummary/tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset.rst", "_autosummary/tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset.rst", "_autosummary/tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset.rst", "_autosummary/tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset.rst", "_autosummary/tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset.rst", "_autosummary/tlt.datasets.pytorch_dataset.PyTorchDataset.rst", "_autosummary/tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset.rst", "_autosummary/tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset.rst", "_autosummary/tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset.rst", "_autosummary/tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset.rst", "_autosummary/tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset.rst", "_autosummary/tlt.datasets.tf_dataset.TFDataset.rst", "_autosummary/tlt.models.hf_model.HFModel.rst", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.optimize_graph.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.optimize_graph.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.optimize_graph.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train.rst", "_autosummary/tlt.models.model.BaseModel.rst", "_autosummary/tlt.models.pytorch_model.PyTorchModel.rst", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.rst", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.benchmark.rst", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize.rst", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train.rst", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.rst", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.benchmark.rst", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize.rst", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.train.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.benchmark.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.optimize_graph.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.benchmark.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.optimize_graph.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train.rst", "_autosummary/tlt.models.tf_model.TFModel.rst", "api.rst", "cli.rst", "distributed.rst", "docbuild.rst", "examples/README.rst", "examples/cli/README.rst", "examples/cli/image_classification.rst", "examples/cli/text_classification.rst", "examples/examples.rst", "index.rst", "methods.rst", "notebooks/Medical_Imaging_Classification.nblink", "notebooks/README.rst", "notebooks/Remote_Sensing_Image_Scene_Classification.nblink", "notebooks/TLT_HF_Text_Classification_Performance.nblink", "notebooks/TLT_PyTorch_Anomly_Detection.nblink", "notebooks/TLT_PyTorch_Image_Classification_Transfer_Learning.nblink", "notebooks/TLT_PyTorch_Text_Classification_Transfer_Learning.nblink", "notebooks/TLT_TF_Image_Classification_Performance.nblink", "notebooks/TLT_TF_Image_Classification_Transfer_Learning.nblink", "notebooks/TLT_TF_Text_Classification_Transfer_Learning.nblink", "notebooks/setup.rst", "tlt/distributed/README.rst"], "titles": ["Datasets", "Get Started", "Legal Information", "Intel\u00ae Transfer Learning Tool Supported Models", "tlt.datasets.dataset.BaseDataset", "tlt.datasets.hf_dataset.HFDataset", "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset", "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset", "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset", "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset", "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset", "tlt.datasets.pytorch_dataset.PyTorchDataset", "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset", "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset", "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset", "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset", "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset", "tlt.datasets.tf_dataset.TFDataset", "tlt.models.hf_model.HFModel", "tlt.models.image_classification.image_classification_model.ImageClassificationModel", "tlt.models.image_classification.image_classification_model.ImageClassificationModel.benchmark", "tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize", "tlt.models.image_classification.image_classification_model.ImageClassificationModel.train", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.benchmark", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.optimize_graph", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train", "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel", "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.benchmark", "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize", "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train", "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel", "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.benchmark", "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize", "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.benchmark", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.optimize_graph", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.benchmark", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.optimize_graph", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train", "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel", "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.benchmark", "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize", "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train", "tlt.models.model.BaseModel", "tlt.models.pytorch_model.PyTorchModel", "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel", "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.benchmark", "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize", "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train", "tlt.models.text_classification.text_classification_model.TextClassificationModel", "tlt.models.text_classification.text_classification_model.TextClassificationModel.benchmark", "tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize", "tlt.models.text_classification.text_classification_model.TextClassificationModel.train", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.benchmark", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.optimize_graph", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.benchmark", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.optimize_graph", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train", "tlt.models.tf_model.TFModel", "API Reference", "CLI Reference", "Distributed Training", "Building Documentation", "Examples", "Beyond Get Started CLI Example", "Image Classification Intel\u00ae Transfer Learning Tool CLI Example", "Text Classification Intel\u00ae Transfer Learning Tool CLI Example", "Examples", "Intel\u00ae Transfer Learning Tool", "Image Classification Methods", "Medical Imaging Classification (Colorectal histology) using TensorFlow and the Intel\u00ae Transfer Learning Tool API", "Intel\u00ae Transfer Learning Tool API Notebook Examples", "Remote Sensing Image Scene Classification (Resisc) using TensorFlow and the Intel\u00ae Transfer Learning Tool API", "Performance Comparison: Text Classification Transfer Learning with Hugging Face* and the Intel\u00ae Transfer Learning Tool", "Image Anomaly Detection with PyTorch using Intel\u00ae Transfer Learning Tool", "Transfer Learning for Image Classification using PyTorch and the Intel\u00ae Transfer Learning Tool API", "Text Classification fine tuning using Pytorch and the Intel\u00ae Transfer Learning Tool API", "Performance Comparison: Image Classification Transfer Learning with TensorFlow and the Intel\u00ae Transfer Learning Tool", "Transfer Learning for Image Classification using TensorFlow and the Intel\u00ae Transfer Learning Tool API", "Text Classification fine tuning using TensorFlow and the Intel\u00ae Transfer Learning Tool API", "Environment Setup and Running the Notebooks", "Distributed Training"], "terms": {"thi": [0, 1, 2, 12, 15, 27, 31, 45, 49, 55, 64, 72, 73, 74, 76, 77, 78, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "i": [0, 1, 2, 7, 8, 12, 15, 20, 21, 24, 26, 27, 29, 30, 31, 33, 34, 35, 37, 39, 40, 42, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 63, 64, 66, 68, 69, 71, 72, 73, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "comprehens": [0, 86], "list": [0, 1, 12, 15, 27, 31, 40, 45, 49, 55, 64, 71, 78, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92], "public": [0, 2, 73, 78, 80, 86, 87, 88, 90, 91, 93], "us": [0, 2, 4, 7, 8, 12, 15, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 79, 80, 83, 92, 93], "repositori": [0, 1, 78, 88, 91], "name": [0, 1, 2, 3, 7, 8, 12, 15, 31, 35, 49, 55, 71, 72, 73, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93], "link": [0, 80, 82, 83, 84, 88], "sourc": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 28, 32, 35, 36, 40, 41, 45, 46, 49, 50, 51, 52, 55, 56, 60, 64, 65, 69, 70, 71, 74, 80], "framework": [0, 1, 3, 18, 19, 50, 51, 56, 70, 71, 76, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92], "case": [0, 1, 3, 71, 72, 76, 80, 83, 85, 87, 88, 90, 91], "ag": 0, "new": [0, 73, 76, 77, 78, 80, 82, 84, 87, 88, 89, 90, 91, 93], "hug": [0, 3, 5, 13, 18, 52, 55, 60, 71, 80, 83, 88, 91], "face": [0, 3, 5, 13, 18, 52, 55, 60, 71, 80, 83, 88, 91], "pytorch": [0, 1, 3, 7, 11, 28, 31, 32, 35, 49, 51, 52, 55, 71, 72, 76, 78, 80, 83, 85, 89], "text": [0, 12, 13, 14, 15, 16, 52, 55, 56, 60, 64, 65, 69, 72, 75, 76, 79, 80, 83, 87, 89], "classif": [0, 1, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 19, 23, 27, 28, 31, 32, 35, 36, 40, 41, 45, 46, 49, 52, 55, 56, 60, 64, 65, 69, 72, 75, 76, 79, 80, 83], "tfd": [0, 91], "tensorflow": [0, 1, 3, 8, 9, 15, 16, 60, 71, 72, 76, 77, 78, 80, 83, 87], "food101": [0, 87], "torchvis": [0, 3, 10, 31, 35, 46, 49, 71, 72, 80, 86], "imag": [0, 1, 6, 7, 8, 9, 10, 19, 23, 27, 28, 31, 32, 35, 36, 40, 41, 45, 46, 49, 72, 75, 76, 79, 80, 83, 91], "sm": [0, 78, 88, 91], "spam": [0, 78, 88, 91], "collect": [0, 78, 82, 88, 89, 91], "tf": [0, 15, 17, 27, 36, 41, 45, 65, 70, 71, 82, 84, 90, 91], "flower": [0, 1, 76, 77, 87, 89, 90], "cat": 0, "v": [0, 89], "dog": 0, "country211": [0, 87], "dtd": [0, 87], "fgvcaircraft": [0, 87], "renderedsst2": [0, 87], "rock": 0, "paper": 0, "scissor": 0, "rotten_tomato": [0, 78, 88], "tweetev": 0, "cifar10": [0, 87], "imdb": [0, 78, 85, 88], "review": 0, "glue": [0, 78, 91], "sst2": [0, 78, 88, 91], "cola": [0, 78, 91], "colorect": [0, 83], "histologi": [0, 83], "resisc45": [0, 84], "cdd": 0, "cesm": 0, "squad": 0, "mvtec": [0, 86], "anomali": [0, 83], "detect": [0, 83], "guid": [1, 74, 76, 80, 92], "walk": [1, 76, 80], "you": [1, 2, 12, 71, 73, 74, 76, 78, 80, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93], "through": [1, 76, 80, 85, 89], "coupl": [1, 80], "exampl": [1, 2, 12, 15, 20, 24, 27, 29, 31, 33, 37, 42, 45, 47, 49, 53, 55, 57, 61, 64, 66, 71, 72, 74, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91], "show": [1, 71, 77, 78, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91], "approach": [1, 72, 80, 87], "flow": [1, 76, 80], "recommend": [1, 27, 40, 45, 64, 69, 72, 82, 84, 87, 89, 90, 91], "hardwar": [1, 80, 87, 88, 90], "precis": [1, 27, 40, 45, 64, 69, 76, 80, 82, 84, 86, 87, 88, 89, 90, 91], "4th": 1, "gen": 1, "xeon": [1, 27, 40, 45, 64, 69, 82, 84, 90, 91], "scalabl": 1, "perform": [1, 2, 20, 21, 24, 25, 26, 27, 29, 30, 33, 34, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 53, 54, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 72, 80, 82, 84, 86, 87, 88, 90, 91, 92], "processor": [1, 27, 40, 45, 64, 69, 82, 84, 90, 91], "bf16": 1, "1st": 1, "2nd": 1, "3rd": 1, "fp32": [1, 25, 38, 43, 62, 67, 76, 80], "resourc": [1, 80], "minimum": 1, "cpu": [1, 20, 24, 29, 33, 37, 42, 47, 53, 55, 57, 61, 66, 80, 85, 89], "core": [1, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 85, 89], "8": [1, 3, 92], "16": [1, 27, 40, 45, 64, 69, 82, 84, 85, 87, 90, 91], "ram": 1, "gb": [1, 85, 89], "24": [1, 76, 89], "32": [1, 27, 40, 45, 64, 69, 72, 82, 84, 85, 86, 87, 88, 90, 91], "disk": [1, 86, 88, 91], "space": [1, 73, 93], "10": [1, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 72, 76, 82, 84, 85, 86, 87, 88, 89, 91, 92], "can": [1, 7, 8, 12, 15, 20, 24, 27, 29, 31, 33, 37, 40, 42, 45, 47, 49, 50, 52, 53, 55, 57, 60, 61, 64, 65, 66, 69, 71, 72, 74, 76, 77, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92], "vari": [1, 77, 78], "base": [1, 3, 4, 5, 6, 11, 14, 17, 18, 19, 27, 31, 35, 45, 49, 50, 51, 55, 64, 70, 73, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93], "dataset": [1, 20, 21, 22, 24, 26, 27, 29, 30, 31, 33, 34, 35, 37, 39, 40, 42, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 59, 61, 63, 64, 66, 68, 69, 72, 76, 80, 92], "download": [1, 10, 55, 71, 72, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92], "softwar": [1, 92], "linux": [1, 92], "valid": [1, 7, 8, 20, 21, 24, 26, 27, 29, 30, 31, 33, 34, 35, 37, 39, 40, 42, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 63, 64, 66, 68, 69, 71, 72, 82, 84, 85, 86, 87, 88, 90, 91, 92], "ubuntu": [1, 92], "20": [1, 85, 86, 87, 89, 90, 92], "04": [1, 92], "22": [1, 76, 92], "lt": [1, 92], "python": [1, 74, 75, 79, 80, 85, 89], "3": [1, 71, 76, 92], "9": [1, 92], "pip": [1, 74, 92], "conda": [1, 92], "virtualenv": [1, 74, 92], "git": [1, 92], "onli": [1, 7, 8, 25, 38, 43, 62, 67, 71, 72, 73, 78, 82, 84, 85, 86, 89, 92, 93], "advanc": 1, "depend": [1, 71, 74, 78, 83, 92], "packag": [1, 78], "sudo": [1, 74], "apt": [1, 74], "build": 1, "essenti": 1, "python3": [1, 74, 92], "dev": 1, "libgl1": 1, "libglib2": 1, "0": [1, 2, 7, 10, 12, 13, 72, 74, 76, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "creat": [1, 2, 71, 72, 73, 76, 77, 78, 80, 82, 84, 87, 88, 89, 90, 91, 93], "activ": [1, 31, 35, 49, 71, 74, 92], "virtual": 1, "environ": [1, 72, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "we": [1, 76, 82, 84, 85, 86, 87, 88, 89, 90, 91], "encourag": 1, "consist": [1, 85, 89], "manag": 1, "There": [1, 86], "ar": [1, 2, 7, 8, 12, 25, 27, 31, 35, 38, 40, 43, 45, 49, 62, 64, 67, 69, 71, 72, 73, 75, 76, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "two": [1, 12, 15, 27, 31, 45, 49, 55, 64, 71, 73, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93], "wai": [1, 71, 85, 86, 89], "do": [1, 73, 85, 86, 87, 89, 90, 93], "p": [1, 73, 76, 77, 78, 85, 86, 92, 93], "tlt_dev_venv": [1, 74], "bin": [1, 74], "b": [1, 85, 86, 89], "Or": [1, 71], "basic": 1, "instruct": [1, 73, 78, 80, 83, 86, 87, 88, 90, 91, 92, 93], "unless": [1, 86], "plan": 1, "make": [1, 27, 40, 45, 64, 69, 73, 74, 76, 78, 80, 82, 84, 90, 91, 93], "chang": [1, 73, 85, 86, 87, 90, 93], "latest": [1, 27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 87, 88, 90, 91], "from": [1, 9, 10, 12, 13, 15, 16, 20, 24, 27, 29, 31, 33, 35, 37, 40, 42, 45, 47, 49, 53, 57, 60, 61, 64, 66, 69, 71, 72, 74, 76, 80, 82, 84, 85, 88, 89, 91, 92], "pleas": [1, 74, 88, 89, 91], "note": [1, 7, 8, 12, 15, 73, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93], "mix": [1, 27, 40, 45, 64, 69, 76, 80, 82, 84, 86, 90, 91], "option": [1, 7, 8, 12, 15, 20, 21, 24, 26, 27, 29, 30, 31, 33, 34, 35, 37, 39, 40, 42, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 63, 64, 66, 68, 69, 71, 72, 89, 92], "within": [1, 74, 86, 87, 88, 90], "same": [1, 76, 82, 84, 85, 86, 87, 89, 90], "support": [1, 27, 40, 45, 64, 69, 71, 72, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "clone": [1, 92], "repo": [1, 92], "http": [1, 2, 74, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "github": [1, 80, 87, 90], "com": [1, 76, 77, 84, 86, 87, 89, 90], "intelai": 1, "cd": [1, 73, 92, 93], "Then": [1, 87, 90], "either": [1, 71, 74, 78, 80, 85, 88, 91], "an": [1, 2, 6, 9, 10, 12, 27, 40, 45, 71, 72, 73, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "edit": [1, 73, 74, 93], "avoid": [1, 2], "rebuild": 1, "after": [1, 72, 76, 77, 78, 80, 85, 86, 87, 89, 90, 91], "each": [1, 7, 8, 12, 15, 27, 31, 35, 40, 45, 49, 55, 64, 69, 71, 72, 76, 77, 78, 82, 84, 85, 87, 88, 89, 90, 91], "prefer": 1, "wheel": 1, "setup": [1, 74, 83, 85, 89], "py": 1, "bdist_wheel": 1, "dist": 1, "intel_transfer_learning_tool": 1, "5": [1, 55, 71, 76, 77, 85, 89], "py3": 1, "none": [1, 4, 7, 8, 9, 12, 15, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 76, 82, 84, 85, 86, 88, 89, 90, 91], "ani": [1, 2, 73, 85, 86, 87, 88, 90, 91, 92, 93], "whl": 1, "addit": [1, 27, 31, 45, 49, 55, 64, 71, 80, 82, 84, 87, 88, 90, 91], "featur": [1, 27, 45, 80, 82, 84, 85, 87, 88, 89], "specif": [1, 2], "For": [1, 2, 7, 8, 12, 15, 72, 74, 76, 85, 86, 87, 88, 89, 90, 91], "distribut": [1, 13, 27, 31, 35, 40, 45, 49, 55, 64, 69, 72], "multinod": [1, 73, 80, 93], "train": [1, 4, 7, 8, 9, 10, 13, 16, 20, 21, 24, 25, 26, 29, 30, 33, 34, 37, 38, 39, 42, 43, 44, 47, 48, 53, 54, 57, 58, 61, 62, 63, 66, 67, 68, 71, 77, 78, 80, 82, 84, 88, 91], "follow": [1, 76, 78, 82, 84, 85, 86, 87, 88, 90, 91, 92], "verifi": [1, 73, 85, 93], "your": [1, 2, 73, 76, 80, 82, 84, 85, 86, 89, 92, 93], "wa": [1, 82, 84, 85, 86, 87, 88, 89, 90, 91], "success": 1, "command": [1, 72, 73, 74, 75, 76, 78, 79, 80, 93], "which": [1, 12, 15, 71, 76, 77, 78, 82, 84, 86, 87, 88, 89, 90, 91], "displai": [1, 87, 88, 90, 91], "help": [1, 27, 31, 45, 49, 55, 64, 76, 82, 84, 86, 87, 88, 90, 91], "inform": [1, 71, 72, 76, 80, 82, 84, 87, 88, 90, 91], "about": [1, 71, 72, 82, 84, 87, 88, 89, 90, 91], "tlt": [1, 71, 74, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "With": [1, 82, 84, 87, 88, 90, 91], "ai": [1, 2, 80], "model": [1, 7, 8, 12, 15, 77, 78, 80, 92], "bash": [1, 75, 79, 80], "prompt": [1, 73, 80, 93], "call": [1, 27, 31, 35, 40, 45, 49, 64, 69, 73, 75, 76, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93], "script": [1, 2, 80], "both": [1, 27, 40, 45, 64, 69, 82, 84, 85, 86, 89, 90, 91], "provid": [1, 2, 12, 15, 27, 31, 35, 40, 45, 49, 55, 64, 69, 71, 72, 74, 78, 80, 82, 84, 85, 87, 88, 90, 91], "opportun": 1, "evalu": [1, 4, 21, 26, 27, 30, 31, 34, 35, 39, 40, 44, 45, 48, 49, 54, 55, 58, 63, 64, 68, 69, 72, 76, 77, 78, 80, 87, 88, 90, 91], "optim": [1, 23, 25, 31, 32, 35, 36, 38, 43, 49, 52, 55, 62, 65, 67, 71, 80, 86, 87, 88, 90, 91], "benchmark": [1, 2, 78, 80, 84, 87, 88, 90, 91], "program": [1, 80], "experi": [1, 85, 89], "ll": 1, "need": [1, 71, 74, 76, 87, 88, 91], "knowledg": [1, 80, 82, 84], "choos": [1, 87], "work": [1, 71, 76, 87, 90], "best": [1, 76, 86], "let": [1, 80, 87, 88, 90, 91], "": [1, 2, 3, 12, 15, 20, 21, 24, 26, 29, 30, 33, 34, 37, 39, 42, 44, 47, 48, 53, 54, 57, 58, 61, 63, 66, 68, 71, 78, 82, 84, 85, 86, 88, 89, 90, 91], "continu": [1, 76, 82, 84, 87, 88, 90, 91], "previou": [1, 82, 84, 85, 87, 88, 89, 90, 91], "where": [1, 7, 8, 12, 15, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 71, 72, 76, 78, 85, 88, 89, 91], "prepar": [1, 85], "classifi": [1, 12, 15, 71, 78, 88, 91], "identifi": 1, "differ": [1, 40, 82, 84, 85, 86, 88, 89, 90], "type": [1, 27, 40, 45, 64, 69, 71, 73, 76, 82, 84, 85, 86, 89, 90, 91, 93], "see": [1, 71, 73, 76, 80, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93], "all": [1, 2, 12, 15, 71, 72, 73, 74, 85, 86, 87, 88, 89, 90, 91, 93], "avail": [1, 71, 72, 82, 84, 86, 87, 88, 90, 91, 92], "image_classif": [1, 71, 76, 82, 84, 87, 89, 90], "In": [1, 76, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "retrain": [1, 89], "resnet50v1": [1, 76], "catalog": [1, 9, 10, 13, 16, 71, 72, 82, 84, 85], "The": [1, 7, 8, 20, 21, 24, 26, 27, 29, 30, 31, 33, 34, 35, 37, 39, 40, 42, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 63, 64, 66, 68, 69, 71, 72, 73, 74, 76, 77, 78, 80, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93], "dir": [1, 72, 73, 76, 77, 78, 93], "output": [1, 21, 25, 26, 27, 30, 31, 34, 35, 38, 39, 40, 43, 44, 45, 48, 49, 54, 55, 58, 62, 63, 64, 67, 68, 69, 72, 74, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92], "path": [1, 20, 24, 27, 29, 31, 33, 35, 37, 40, 42, 45, 47, 49, 53, 55, 57, 61, 64, 66, 69, 71, 72, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92], "point": [1, 27, 40, 45, 64, 69, 76, 82, 84, 87, 88, 90, 91], "writabl": [1, 21, 25, 26, 30, 34, 38, 39, 43, 44, 48, 54, 58, 62, 63, 67, 68], "folder": [1, 7, 8, 12, 15, 72, 76, 77, 82, 84, 87, 89, 90, 92], "variabl": [1, 25, 38, 43, 62, 67, 72, 85, 87, 88, 89, 90, 91, 92], "set": [1, 20, 24, 27, 29, 31, 33, 35, 37, 40, 42, 45, 47, 49, 53, 55, 57, 61, 64, 66, 69, 71, 73, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93], "reduc": [1, 80, 89], "warn": [1, 89], "log": [1, 72, 85, 89], "export": [1, 72, 76, 77, 78, 80, 85, 89, 92], "tf_cpp_min_log_level": [1, 76, 85, 89], "2": [1, 2, 3, 69, 76, 77, 78], "f": [1, 72, 73, 76, 77, 78, 82, 87, 90, 93], "resnet_v1_50": [1, 3, 76, 77, 82, 84, 89, 90], "tf_flower": [1, 71, 77, 90], "tmp": [1, 71, 72, 76, 77, 78], "data": [1, 2, 7, 8, 12, 15, 21, 26, 27, 30, 34, 39, 40, 44, 45, 48, 54, 58, 63, 64, 68, 69, 71, 72, 77, 78, 82, 84, 85, 86, 87, 88, 90, 91], "user": [1, 7, 8, 71, 82, 84, 86], "epoch": [1, 22, 27, 31, 35, 40, 45, 49, 55, 59, 64, 69, 72, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "1": [1, 22, 27, 31, 35, 40, 45, 49, 55, 59, 64, 69, 72, 74, 76, 77, 78], "directori": [1, 7, 8, 12, 15, 20, 21, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "sequenti": [1, 71, 76, 89], "_________________________________________________________________": [1, 76], "layer": [1, 27, 31, 35, 45, 49, 55, 64, 71, 76, 80, 82, 84, 86, 87, 88, 89, 90, 91], "shape": [1, 71, 76], "param": [1, 76], "keras_lay": [1, 76], "keraslay": [1, 76, 89], "2048": [1, 76], "23561152": [1, 76], "dens": [1, 27, 31, 35, 45, 49, 55, 64, 71, 76, 82, 84, 87, 88, 89, 90, 91], "10245": [1, 76], "total": [1, 76, 85, 89], "23": [1, 76], "571": [1, 76], "397": [1, 76], "trainabl": [1, 76, 80, 89], "245": [1, 76], "non": [1, 55, 64, 69, 76, 86], "561": [1, 76], "152": [1, 76], "checkpoint": [1, 25, 27, 31, 35, 38, 40, 43, 45, 49, 55, 62, 64, 67, 69, 72, 76, 80, 85, 86, 87, 88, 89, 90, 91], "resnet_v1_50_checkpoint": [1, 76], "86": [1, 76], "248m": [1, 76], "loss": [1, 23, 27, 31, 32, 35, 36, 40, 45, 49, 52, 55, 64, 65, 69, 71, 72, 76, 82, 84, 85, 87, 88, 89, 90, 91], "4600": [1, 76], "acc": [1, 76, 89], "8438": [1, 76], "save": [1, 20, 21, 24, 25, 26, 29, 30, 33, 34, 37, 38, 39, 42, 43, 44, 47, 48, 53, 54, 57, 58, 61, 62, 63, 66, 67, 68, 72, 76, 80, 82, 84, 85, 86, 87, 89, 90, 92], "complet": [1, 2, 72, 76, 85, 87, 88], "accuraci": [1, 2, 27, 31, 45, 49, 55, 64, 72, 76, 82, 84, 85, 86, 87, 88, 89, 90, 91], "valu": [1, 12, 15, 72, 74, 76, 78, 85, 88, 89, 91], "print": [1, 71, 76, 82, 84, 85, 86, 87, 88, 89, 90, 91], "toward": [1, 76], "end": [1, 27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 73, 76, 82, 84, 86, 87, 88, 90, 91, 93], "consol": [1, 76], "specifi": [1, 8, 12, 15, 21, 22, 25, 26, 27, 30, 31, 34, 35, 38, 39, 40, 43, 44, 45, 48, 49, 54, 55, 58, 59, 62, 63, 64, 67, 68, 69, 72, 76, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "number": [1, 7, 12, 20, 24, 27, 29, 31, 33, 35, 37, 40, 42, 45, 47, 49, 53, 55, 57, 61, 64, 66, 69, 72, 76, 82, 84, 85, 87, 88, 89, 90, 91], "That": 1, "As": 1, "also": [1, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 72, 76, 82, 84, 85, 86, 87, 88, 89, 90, 91], "beyond": [1, 75, 79], "includ": [1, 25, 38, 43, 62, 67, 71, 76, 88], "quantiz": [1, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 80, 89], "read": [1, 73, 93], "refer": [1, 82, 84, 86, 87, 88, 90, 91], "find": 1, "more": [1, 12, 15, 69, 76, 78, 82, 84, 87, 88, 89, 90, 91], "our": [1, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "int8": [1, 76, 80], "improv": [1, 80, 89], "infer": [1, 12, 25, 38, 43, 62, 67, 76, 80, 87, 88, 89, 90, 91], "jupyt": [1, 75, 79, 80, 83, 89, 92], "notebook": [1, 75, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91], "detail": [1, 76, 84], "import": [1, 71, 73, 85, 89, 93], "o": [1, 82, 84, 85, 86, 87, 88, 89, 90, 91], "dataset_factori": [1, 71, 82, 84, 85, 86, 87, 88, 89, 90, 91], "model_factori": [1, 71, 82, 84, 85, 86, 87, 88, 89, 90, 91], "util": [1, 82, 84, 85, 86, 87, 88, 89, 90, 91], "frameworktyp": [1, 18, 19, 50, 51, 56, 70, 71, 82, 84], "usecasetyp": [1, 18, 19, 50, 51, 56, 70, 71, 82, 84], "usernam": 1, "getenv": 1, "dataset_dir": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 71, 72, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92], "format": [1, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "exist": [1, 7, 8, 21, 25, 26, 30, 34, 38, 39, 43, 44, 48, 54, 58, 62, 63, 67, 68, 71, 73, 80, 87, 88, 89, 90, 91, 93], "makedir": [1, 89], "writeabl": [1, 27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 86, 87, 88, 90, 91], "file": [1, 12, 15, 21, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 53, 54, 55, 58, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 76, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93], "output_dir": [1, 21, 22, 25, 26, 27, 30, 31, 34, 35, 38, 39, 40, 43, 44, 45, 48, 49, 54, 55, 58, 59, 62, 63, 64, 67, 68, 69, 72, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92], "get_model": [1, 71, 82, 84, 85, 86, 87, 88, 89, 90, 91], "model_nam": [1, 18, 19, 23, 28, 32, 36, 41, 46, 50, 51, 52, 56, 60, 65, 70, 71, 72, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "preprocess": [1, 55, 82, 84, 85, 86, 87, 88, 89, 90, 91], "get_dataset": [1, 71, 82, 85, 87, 88, 90, 91], "dataset_nam": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 71, 72, 77, 78, 82, 85, 87, 88, 90, 91], "use_cas": [1, 18, 19, 50, 51, 56, 70, 71, 82, 84, 85, 86, 87, 88, 89, 90, 91], "dataset_catalog": [1, 4, 5, 6, 11, 14, 17, 71, 72, 82, 85, 87, 88, 90, 91], "tf_dataset": [1, 71, 72, 82, 89, 90, 91], "image_s": [1, 19, 71, 82, 84, 86, 87, 89, 90], "batch_siz": [1, 72, 82, 84, 85, 86, 87, 88, 89, 90, 91], "shuffle_split": [1, 82, 84, 85, 86, 87, 88, 89, 90, 91], "train_pct": [1, 82, 84, 85, 86, 87, 88, 89, 90, 91], "75": [1, 86, 87, 88, 90, 91], "val_pct": [1, 82, 84, 85, 86, 87, 88, 89, 90, 91], "25": [1, 76, 85, 86, 87, 88, 89, 90, 91], "metric": [1, 82, 84, 86, 87, 88, 89, 90, 91], "metric_nam": [1, 91], "metric_valu": [1, 91], "zip": [1, 78, 88, 89, 91], "_model": [1, 89, 91], "metrics_nam": [1, 89, 91], "saved_model_dir": [1, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 82, 84, 85, 87, 88, 90, 91], "quantization_output": 1, "join": [1, 82, 84, 85, 86, 87, 88, 89, 90, 91], "quantized_model": [1, 87, 88, 90, 91], "overwrite_model": [1, 21, 25, 26, 30, 34, 38, 39, 43, 44, 48, 54, 58, 62, 63, 67, 68], "true": [1, 7, 8, 9, 10, 12, 13, 15, 16, 22, 27, 31, 35, 40, 45, 49, 55, 59, 64, 69, 71, 72, 82, 84, 85, 86, 87, 88, 89, 90, 91], "neural": [1, 20, 21, 24, 25, 26, 29, 30, 33, 34, 37, 38, 39, 42, 43, 44, 47, 48, 53, 54, 57, 58, 61, 62, 63, 66, 67, 68, 72, 76, 80, 86, 87, 88, 90, 91], "compressor": [1, 20, 21, 24, 25, 26, 29, 30, 33, 34, 37, 38, 39, 42, 43, 44, 47, 48, 53, 54, 57, 58, 61, 62, 63, 66, 67, 68, 72, 76, 80, 87, 88, 90, 91], "config": [1, 21, 26, 30, 34, 39, 44, 48, 54, 58, 63, 68, 71, 72, 87, 88, 89, 90, 91], "graph": [1, 25, 38, 43, 62, 67, 72, 89], "optimization_output": 1, "optimized_model": 1, "optimize_graph": [1, 89], "document": [1, 2, 71, 78, 80, 82, 84, 86, 87, 88, 90, 91], "develop": [1, 74], "deploy": [1, 80], "sampl": [1, 85, 90], "ve": 1, "present": [1, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 73, 93], "how": [1, 73, 77, 78, 82, 84, 86, 87, 88, 89, 90, 91, 93], "execut": [1, 82, 84], "workflow": [1, 76, 80, 82, 84, 86], "trainng": 1, "well": [1, 73, 80, 88, 91, 93], "some": [1, 75, 79, 86], "intel": [2, 20, 21, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 75, 76, 79, 92, 93], "transfer": [2, 50, 73, 74, 75, 76, 79, 92, 93], "learn": [2, 27, 31, 35, 40, 45, 49, 50, 55, 64, 69, 72, 73, 74, 75, 76, 79, 92, 93], "tool": [2, 73, 74, 75, 76, 79, 92, 93], "intend": 2, "platform": [2, 27, 40, 45, 64, 69, 78, 80, 82, 84, 90, 91], "visit": 2, "www": [2, 78, 84, 85, 87, 88, 91], "blog": 2, "commit": 2, "respect": 2, "human": [2, 78, 85, 88, 91], "right": [2, 78, 88, 91], "complic": 2, "abus": 2, "polici": [2, 76, 87, 88, 89, 90], "reflect": 2, "global": 2, "principl": 2, "accordingli": [2, 7, 8], "access": 2, "materi": 2, "agre": 2, "product": 2, "applic": [2, 23, 80, 88, 90, 91], "caus": 2, "contribut": 2, "violat": 2, "internation": 2, "recogn": 2, "code": [2, 74, 75, 79, 80, 89], "under": [2, 73, 85, 86, 93], "apach": 2, "version": [2, 25, 38, 43, 62, 67, 85, 89], "To": [2, 73, 74, 82, 84, 86, 87, 89, 90, 93], "extent": 2, "referenc": 2, "site": 2, "those": [2, 27, 40, 45, 64, 69, 71], "third": [2, 27, 40, 45, 64, 69, 71, 82, 84, 86, 90, 91], "parti": [2, 71], "indic": [2, 12, 15], "doe": [2, 7, 8, 12, 27, 40, 45, 55, 64, 69, 82, 84, 86, 88, 89, 90, 91], "warrant": 2, "qualiti": [2, 86], "By": [2, 82, 84, 89], "term": [2, 88, 91], "associ": [2, 78, 85, 88, 91], "compli": 2, "expressli": 2, "adequaci": 2, "liabl": 2, "error": [2, 73, 85, 87, 88, 89, 90, 91, 93], "omiss": 2, "defect": [2, 86], "relianc": 2, "liabil": 2, "damag": 2, "relat": [2, 80, 89], "other": [2, 27, 40, 45, 64, 69, 74, 76, 82, 84, 86, 88, 89, 90, 91], "brand": 2, "mai": [2, 73, 77, 78, 87, 88, 89, 90, 91, 93], "claim": 2, "properti": [2, 88, 91], "trademark": [2, 80], "hub": [3, 27, 28, 41, 45, 71, 80, 82, 84, 86, 87, 91], "alexnet": [3, 76], "convnext_bas": [3, 76], "convnext_larg": [3, 76], "convnext_smal": [3, 76], "convnext_tini": [3, 76], "densenet121": [3, 76], "densenet161": [3, 76], "densenet169": [3, 76], "densenet201": [3, 76], "efficientnetv2": 3, "b0": 3, "b1": 3, "b2": 3, "b3": 3, "efficientnet_b0": [3, 71, 72, 76, 87], "efficientnet_b1": [3, 76], "efficientnet_b2": [3, 76], "efficientnet_b3": [3, 76], "efficientnet_b4": [3, 76], "efficientnet_b5": 3, "efficientnet_b6": 3, "efficientnet_b7": 3, "googlenet": 3, "inception_v3": 3, "mnasnet0_5": 3, "mnasnet1_0": 3, "mobilenet_v2": 3, "mobilenet_v2_100_224": 3, "mobilenet_v3_larg": 3, "mobilenet_v3_smal": 3, "nasnet_larg": 3, "proxyless_cpu": 3, "regnet_x_16gf": 3, "regnet_x_1_6gf": 3, "regnet_x_32gf": 3, "regnet_x_3_2gf": 3, "regnet_x_400mf": 3, "regnet_x_800mf": 3, "regnet_x_8gf": 3, "regnet_y_16gf": 3, "regnet_y_1_6gf": 3, "regnet_y_32gf": 3, "regnet_y_3_2gf": 3, "regnet_y_400mf": 3, "regnet_y_800mf": 3, "regnet_y_8gf": 3, "resnet101": 3, "resnet152": 3, "resnet18": [3, 86], "resnet18_ssl": 3, "resnet18_swsl": 3, "resnet34": 3, "resnet50": [3, 86], "resnet50_ssl": 3, "resnet50_swsl": 3, "resnet_v2_101": 3, "resnet_v2_50": 3, "resnext101_32x16d_ssl": 3, "resnext101_32x16d_swsl": 3, "resnext101_32x16d_wsl": 3, "resnext101_32x32d_wsl": 3, "resnext101_32x48d_wsl": 3, "resnext101_32x4d_ssl": 3, "resnext101_32x4d_swsl": 3, "resnext101_32x8d": 3, "resnext101_32x8d_ssl": 3, "resnext101_32x8d_swsl": 3, "resnext101_32x8d_wsl": 3, "resnext50_32x4d": 3, "resnext50_32x4d_ssl": 3, "resnext50_32x4d_swsl": 3, "shufflenet_v2_x0_5": 3, "shufflenet_v2_x1_0": 3, "vgg11": 3, "vgg11_bn": 3, "vgg13": 3, "vgg13_bn": 3, "vgg16": 3, "vgg16_bn": 3, "vgg19": 3, "vgg19_bn": 3, "vit_b_16": 3, "vit_b_32": 3, "vit_l_16": 3, "vit_l_32": 3, "wide_resnet101_2": 3, "wide_resnet50_2": 3, "convnextbas": 3, "kera": [3, 23, 27, 40, 45, 71, 80, 89, 90], "convnextlarg": 3, "convnextsmal": 3, "convnexttini": 3, "convnextxlarg": 3, "efficientnetv2b0": 3, "efficientnetv2b1": 3, "efficientnetv2b2": 3, "efficientnetv2b3": 3, "efficientnetv2l": 3, "efficientnetv2m": 3, "inceptionresnetv2": 3, "inceptionv3": 3, "mobilenet": 3, "mobilenetv2": 3, "nasnetlarg": 3, "nasnetmobil": 3, "resnet101v2": 3, "resnet152v2": 3, "resnet50v2": 3, "xception": 3, "bert": [3, 78, 85, 88], "uncas": [3, 78], "larg": [3, 78, 80, 86, 87, 90], "clinic": 3, "distilbert": 3, "googl": [3, 78, 91], "bert_uncased_l": [3, 78, 91], "10_h": [3, 78], "128_a": [3, 91], "256_a": [3, 78], "4": [3, 71, 76, 78], "512_a": 3, "768_a": 3, "12": [3, 76], "12_h": 3, "2_h": [3, 91], "4_h": 3, "6_h": 3, "8_h": 3, "class": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 28, 31, 32, 35, 36, 40, 41, 45, 46, 49, 50, 51, 52, 56, 60, 65, 69, 70, 72, 76, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "abstract": [4, 20, 21, 22, 50, 57, 58, 59], "__init__": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 28, 32, 36, 41, 46, 50, 51, 52, 56, 60, 65, 70, 89], "constructor": [4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 23, 28, 32, 36, 41, 46, 50, 51, 52, 56, 60, 65, 70], "method": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 28, 32, 36, 41, 46, 50, 51, 52, 56, 60, 65, 70, 78, 85, 89, 91], "attribut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 28, 32, 36, 41, 46, 50, 51, 52, 56, 60, 65, 70, 71], "repres": [5, 11, 17, 18, 19, 23, 27, 28, 31, 32, 36, 41, 45, 46, 49, 51, 52, 55, 56, 60, 64, 65, 70, 82, 84, 87, 88, 90, 91], "num_work": [7, 10, 12, 13], "shuffle_fil": [7, 8, 9, 10, 12, 13, 15, 16, 27, 40, 45, 64, 69, 85, 88, 89, 91], "A": [7, 8, 12, 13, 15, 16, 55, 64, 69, 71, 72, 76, 78, 86, 89], "custom": [7, 8, 12, 15, 21, 26, 30, 34, 36, 39, 44, 48, 54, 58, 63, 68, 71, 72, 80, 82, 84, 86], "expect": [7, 8, 12, 15, 71, 77, 78, 88, 89, 91], "organ": [7, 8, 71, 77, 87, 90], "subfold": [7, 8, 71, 77, 87, 90], "should": [7, 8, 12, 15, 27, 31, 45, 49, 55, 64, 71, 72, 73, 74, 76, 77, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93], "contain": [7, 8, 12, 15, 20, 24, 29, 33, 37, 42, 47, 53, 55, 57, 61, 66, 71, 72, 77, 82, 84, 87, 90], "jpg": [7, 8, 71, 77, 86, 87, 90], "label": [7, 8, 12, 15, 71, 77, 78, 85, 86, 87, 88, 89, 90, 91], "class_a": [7, 8, 12, 15, 71, 89], "class_b": [7, 8, 12, 15, 71, 89], "class_c": [7, 8, 71, 89], "defin": [7, 8, 31, 35, 49, 55, 64, 69, 86, 87, 88, 90, 92], "split": [7, 8, 9, 10, 13, 16, 55, 71, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91], "test": [7, 8, 20, 21, 24, 26, 29, 30, 33, 34, 37, 39, 42, 44, 47, 48, 53, 54, 55, 57, 58, 61, 63, 66, 68, 71, 73, 74, 82, 84, 85, 87, 88, 89, 90, 91, 93], "subset": [7, 8, 20, 21, 24, 26, 27, 29, 30, 31, 33, 34, 35, 37, 39, 40, 42, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 63, 64, 66, 68, 69, 82, 84, 86, 87, 88, 89, 90, 91], "arrang": [7, 8, 86, 87], "accept": [7, 8, 86], "paramet": [7, 8, 12, 15, 20, 21, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 71], "str": [7, 8, 12, 15, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 82, 84, 85, 86, 87, 88, 89, 90, 91], "locat": [7, 8, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 71, 72, 73, 74, 76, 78, 84, 85, 86, 93], "It": [7, 8, 27, 40, 45, 64, 69, 76, 78, 82, 84, 86, 90, 91], "subdirectori": [7, 8, 87, 89, 90], "If": [7, 8, 12, 15, 27, 31, 35, 40, 45, 49, 55, 64, 69, 71, 72, 73, 74, 76, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "given": [7, 8, 12, 15, 55, 71, 72, 73, 86, 87, 93], "int": [7, 8, 12, 15, 19, 20, 24, 27, 29, 31, 33, 35, 37, 40, 42, 45, 47, 49, 53, 55, 57, 61, 64, 66, 69, 82, 84, 85, 86, 87, 88, 89, 90, 91], "process": [7, 31, 35, 49, 55, 72, 78, 80, 87, 89], "load": [7, 12, 15, 27, 31, 35, 40, 45, 49, 55, 64, 69, 71, 72, 78, 85, 87, 88, 89, 90, 91], "default": [7, 8, 12, 15, 20, 21, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "bool": [7, 8, 12, 15, 19, 21, 25, 26, 27, 30, 31, 34, 35, 38, 39, 40, 43, 44, 45, 48, 49, 54, 55, 58, 62, 63, 64, 67, 68, 69, 71, 72, 82, 84, 85, 86, 87, 88, 89, 90, 91], "whether": [7, 8, 12, 15, 21, 25, 26, 27, 30, 34, 38, 39, 40, 43, 44, 45, 48, 54, 58, 62, 63, 64, 67, 68, 69, 85, 86], "shuffl": [7, 8, 12, 15, 27, 40, 45, 64, 69, 85, 86, 89], "rais": [7, 8, 12, 15, 20, 21, 24, 25, 26, 27, 29, 30, 33, 34, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 71, 85, 89], "filenotfounderror": [7, 8, 12, 15, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 89], "color_mod": 8, "rgb": [8, 87], "seed": [8, 9, 15, 27, 31, 35, 40, 45, 49, 55, 64, 69, 85, 86, 89], "kwarg": [8, 9, 10, 15, 16, 23, 27, 28, 32, 36, 40, 41, 45, 46, 52, 55, 60, 64, 65, 69, 71], "color": [8, 85, 86, 87, 89, 90], "mode": [8, 76], "greyscal": 8, "rgba": 8, "random": [8, 15, 86, 89], "as_supervis": 9, "csv_file_nam": [12, 15, 88, 91], "class_nam": [12, 15, 71, 72, 82, 84, 85, 86, 87, 88, 89, 90, 91], "column_nam": [12, 85, 88], "label_map_func": [12, 15, 91], "callabl": [12, 15], "label_col": 12, "delimit": [12, 15, 72, 78, 88, 91], "header": [12, 15, 88, 91], "fals": [12, 13, 15, 21, 25, 26, 27, 30, 31, 34, 35, 38, 39, 40, 43, 44, 45, 48, 49, 54, 55, 58, 62, 63, 64, 67, 68, 69, 71, 82, 84, 85, 86, 87, 88, 89, 90, 91], "select_col": [12, 15, 88, 91], "exclude_col": [12, 15, 88, 91], "transform": [12, 15, 85], "csv": [12, 15, 71, 72, 78, 88, 91], "column": [12, 15, 71, 78, 88, 91], "first": [12, 15, 27, 31, 35, 45, 49, 55, 64, 73, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93], "second": [12, 15, 27, 31, 45, 49, 55, 64, 72, 73, 76, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93], "sentenc": [12, 15, 71, 78, 88, 91], "comma": [12, 15, 72, 78, 88, 91], "separ": [12, 15, 72, 78, 88, 89, 91], "look": [12, 15, 88, 91], "similar": [12, 15, 88, 91], "snippet": [12, 15], "below": [12, 15, 73, 77, 78, 82, 84, 86, 87, 88, 89, 92, 93], "ha": [12, 15, 21, 25, 26, 27, 30, 31, 34, 35, 38, 39, 40, 43, 44, 45, 48, 49, 54, 55, 58, 62, 63, 64, 67, 68, 69, 72, 76, 77, 78, 80, 85, 88, 89, 91], "filter": [12, 15, 71, 72, 78, 85, 86, 88, 89, 91], "out": [12, 15, 25, 38, 43, 62, 67, 80, 85, 87, 88, 89, 90, 91], "pars": [12, 15, 88, 91], "order": [12, 15], "must": [12, 86], "exactli": 12, "one": [12, 15, 76, 78, 82, 84, 86, 87, 88, 89, 90, 91], "posit": 12, "correspond": 12, "argument": [12, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 71, 74, 78, 82, 84, 85], "assign": 12, "text_1": 12, "text_2": 12, "rest": [12, 87, 90], "function": [12, 15, 71, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "map": [12, 15, 78, 85, 87, 88, 89, 90, 91], "across": [12, 15, 80], "appli": [12, 15, 27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 76, 82, 84, 86, 87, 88, 90, 91], "element": [12, 15], "string": [12, 15, 27, 40, 45, 64, 69, 72, 78, 87, 88, 91], "instead": [12, 15, 72, 87, 90], "numer": [12, 15, 78, 87, 88, 90, 91], "index": [12, 85, 88, 89, 91], "integ": [12, 27, 31, 40, 45, 49, 55, 64, 69, 82, 84, 85, 87, 88, 89, 90, 91], "everi": 12, "uniqu": 12, "start": [12, 72, 74, 75, 79, 86, 92], "charact": [12, 15, 78, 91], "row": [12, 15, 88, 91], "boolean": [12, 15, 27, 31, 35, 40, 45, 49, 55, 64, 69, 71, 72], "line": [12, 15, 80, 87, 89, 90], "skip": [12, 15, 87, 88, 89, 90, 91, 92], "sort": [12, 15, 71], "At": [12, 15], "most": [12, 15, 85, 89], "exclud": [12, 15], "worker": 12, "pass": [12, 74, 76, 78, 85, 86, 87, 88, 90, 91], "dataload": [12, 85], "found": [12, 15, 20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 71, 76, 85, 87, 89, 91], "typeerror": [12, 15, 27, 40, 45, 55, 64, 69, 85, 89], "valueerror": [12, 15, 21, 26, 30, 34, 39, 44, 48, 54, 55, 58, 63, 68, 85, 89], "empti": [12, 15, 90, 92], "mismatch": 12, "than": [12, 69, 85, 89], "field": 15, "do_fine_tun": 19, "dropout_layer_r": [19, 56], "pretrain": [19, 23, 28, 36, 41, 46, 50, 52, 56, 60, 65, 70, 71, 80, 85, 86, 87, 88, 90, 91], "warmup": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "iter": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 85, 89], "100": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 80, 85, 89], "cores_per_inst": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "num_of_inst": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "inter_num_of_thread": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "intra_num_of_thread": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "otherwis": [20, 24, 29, 33, 37, 42, 47, 53, 55, 57, 61, 64, 66, 69, 85], "full": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 76, 87, 88, 89, 90, 91], "explicitli": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "imageclassificationdataset": [20, 21, 24, 26, 27, 29, 30, 31, 33, 34, 35, 37, 39, 40, 42, 44, 45, 47, 48, 49, 53, 54, 57, 58, 61, 63, 66, 68, 82, 84, 87, 88, 90, 91], "befor": [20, 24, 27, 29, 33, 37, 40, 42, 45, 47, 53, 57, 61, 64, 66, 69, 72, 78, 80, 83], "run": [20, 24, 27, 29, 33, 37, 40, 42, 45, 47, 53, 57, 61, 64, 66, 69, 72, 73, 74, 76, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93], "per": [20, 24, 29, 31, 33, 35, 37, 42, 47, 49, 53, 55, 57, 61, 66, 72, 78, 85, 89], "instanc": [20, 24, 27, 29, 33, 37, 40, 42, 45, 47, 53, 57, 61, 66], "thread": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "inter": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "oper": [20, 24, 25, 29, 33, 37, 38, 42, 43, 47, 53, 57, 61, 62, 66, 67, 89], "intra": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "return": [20, 21, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 71, 82, 84, 85, 86, 87, 88, 89, 90, 91], "result": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 71, 73, 76, 87, 88, 89, 90, 91, 93], "notadirectoryerror": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66], "post": [21, 26, 30, 34, 39, 44, 48, 54, 58, 63, 68, 72, 76, 88, 91], "calibr": [21, 26, 30, 34, 39, 44, 48, 54, 58, 63, 68], "its": [21, 26, 30, 34, 39, 44, 48, 54, 58, 63, 68, 74, 80], "written": [21, 26, 30, 34, 39, 44, 48, 54, 58, 63, 68, 76], "posttrainingquantconfig": [21, 26, 30, 34, 39, 44, 48, 54, 58, 63, 68], "overwrit": [21, 25, 26, 30, 34, 38, 39, 43, 44, 48, 54, 58, 62, 63, 67, 68], "alreadi": [21, 25, 26, 30, 34, 38, 39, 43, 44, 48, 54, 58, 62, 63, 67, 68, 72, 76, 77, 80, 86, 87, 88, 89, 90, 91], "fileexistserror": [21, 25, 26, 27, 30, 34, 38, 39, 40, 43, 44, 45, 48, 54, 58, 62, 63, 64, 67, 68, 69], "compat": [21, 26, 30, 34, 39, 44, 48, 54, 58, 63, 68, 71], "basedataset": [22, 59], "initial_checkpoint": [22, 27, 31, 35, 40, 45, 49, 55, 59, 64, 69, 82, 84, 86, 87, 88, 90, 91], "do_ev": [22, 27, 31, 35, 40, 45, 49, 55, 59, 64, 69, 72, 82, 84, 85, 87, 88, 89, 90, 91], "saved_model": [24, 25, 26, 37, 38, 39, 42, 43, 44, 61, 62, 63, 66, 67, 68, 71, 72, 76, 82, 84, 87, 88, 89, 90, 91], "pb": [24, 25, 26, 37, 38, 39, 42, 43, 44, 61, 62, 63, 66, 67, 68, 71, 72, 76, 82, 84, 87, 88, 89, 90, 91], "inc_config_path": [24, 29, 33, 37, 42, 47, 53, 61, 66], "write": [25, 38, 43, 55, 62, 64, 67, 69, 72, 73, 93], "convert": [25, 38, 43, 62, 67, 89], "constant": [25, 38, 43, 62, 67, 89], "remov": [25, 38, 43, 62, 67, 73, 89, 93], "like": [25, 38, 43, 62, 67, 73, 86, 88, 89, 91, 93], "strip": [25, 38, 43, 62, 67, 87, 89, 90], "part": [25, 38, 43, 62, 67, 76, 87, 89, 90], "never": [25, 38, 43, 62, 67, 89], "reach": [25, 27, 31, 35, 38, 40, 43, 45, 49, 55, 62, 64, 67, 69, 72, 76, 82, 84, 87, 88, 89, 90, 91], "debug": [25, 38, 43, 62, 67, 76, 89], "checknumer": [25, 38, 43, 62, 67, 89], "fold": [25, 38, 43, 62, 67, 89], "batch": [25, 38, 43, 62, 67, 72, 76, 80, 82, 84, 85, 86, 87, 88, 90, 91], "normal": [25, 38, 43, 62, 67, 86, 87, 89], "op": [25, 38, 43, 62, 67, 76, 89], "pre": [25, 38, 43, 62, 67, 80, 85, 88, 89, 91], "calcul": [25, 38, 43, 62, 67, 82, 84, 86, 87, 88, 89, 90, 91], "weight": [25, 27, 31, 35, 38, 40, 43, 45, 49, 55, 62, 64, 67, 69, 72, 82, 84, 86, 87, 88, 89, 90, 91], "fuse": [25, 38, 43, 62, 67, 89], "common": [25, 38, 43, 62, 67, 89], "unifi": [25, 38, 43, 62, 67, 89], "early_stop": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 87, 88, 90, 91], "lr_decai": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 87, 88, 90, 91], "enable_auto_mixed_precis": [27, 40, 45, 64, 69, 82, 84, 90, 91], "extra_lay": [27, 31, 45, 49, 55, 64, 82, 84, 87, 88, 90, 91], "hostfil": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 78], "nnode": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 78], "nproc_per_nod": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 78], "callback": [27, 40, 45, 89], "time": [27, 31, 35, 45, 49, 72, 76, 80, 82, 84, 85, 87, 88, 90, 91], "get": [27, 31, 35, 45, 49, 72, 73, 74, 75, 79, 85, 89, 92, 93], "extractor": [27, 45, 86, 89], "add": [27, 31, 35, 45, 49, 72, 82, 84, 85, 87, 89, 90], "compil": [27, 40, 45, 82, 84, 87, 89, 90], "initi": [27, 40, 45, 64, 69, 71, 72], "when": [27, 31, 35, 40, 45, 49, 55, 64, 69, 71, 72, 76, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "enabl": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 87, 88, 89, 90, 91], "earli": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 87, 88, 90, 91], "stop": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 87, 88, 89, 90, 91], "converg": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 87, 88, 90, 91], "while": [27, 31, 35, 40, 45, 49, 55, 64, 69, 71, 72, 74, 82, 84, 86, 87, 88, 90, 91], "rate": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 87, 88, 90, 91], "decai": [27, 31, 35, 40, 45, 49, 55, 64, 69, 72, 82, 84, 87, 88, 90, 91], "auto": [27, 40, 45, 64, 69, 80, 82, 84, 90, 91], "bit": [27, 40, 45, 64, 69, 82, 84, 89, 90, 91], "float": [27, 40, 45, 55, 56, 64, 69, 82, 84, 85, 86, 87, 88, 89, 90, 91], "faster": [27, 40, 45, 64, 69, 80, 82, 84, 90, 91], "less": [27, 40, 45, 64, 69, 82, 84, 85, 89, 90, 91], "memori": [27, 40, 45, 64, 69, 71, 82, 84, 85, 86, 89, 90, 91], "bfloat16": [27, 40, 45, 64, 69, 82, 84, 90, 91], "fourth": [27, 40, 45, 64, 69, 82, 84, 90, 91], "gener": [27, 40, 45, 64, 69, 72, 74, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91], "detriment": [27, 40, 45, 64, 69, 82, 84, 90, 91], "automat": [27, 40, 45, 64, 69, 80, 82, 84, 87, 88, 90, 91], "disabl": [27, 40, 45, 64, 69, 82, 84, 90, 91], "reproduc": [27, 31, 35, 40, 45, 49, 55, 64, 69], "insert": [27, 31, 45, 49, 55, 64, 82, 84, 87, 88, 90, 91], "between": [27, 31, 45, 49, 55, 64, 82, 84, 85, 86, 87, 88, 89, 90, 91], "increas": [27, 31, 45, 49, 55, 64, 82, 84, 87, 88, 90, 91], "fine": [27, 31, 45, 49, 52, 55, 60, 64, 65, 72, 82, 84, 86, 87, 89, 90], "tune": [27, 31, 45, 49, 52, 55, 60, 64, 65, 72, 76, 82, 84, 86, 87, 89, 90], "tfhub": [27, 45, 64, 82, 84, 87, 88, 89, 90, 91], "input": [27, 31, 45, 49, 55, 64, 71, 82, 84, 86, 87, 88, 89, 90, 91], "size": [27, 31, 45, 49, 55, 64, 72, 76, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91], "1024": [27, 31, 45, 49, 55, 64, 82, 84, 85, 87, 88, 89, 90, 91], "512": [27, 31, 45, 49, 55, 64, 76, 82, 84, 87, 88, 89, 90, 91], "neuron": [27, 31, 45, 49, 55, 64, 82, 84, 87, 88, 90, 91], "dure": [27, 40, 45, 55, 64, 69, 72, 78, 86], "histori": [27, 40, 45, 55, 64, 69, 76, 82, 84, 85, 87, 88, 89, 90, 91], "object": [27, 31, 35, 40, 45, 49, 55, 64, 69, 71, 82, 84, 85, 86, 87, 88, 90, 91], "fit": [27, 40, 45, 55, 64, 69, 89], "pt": [29, 30, 33, 34, 47, 48, 53, 54, 71, 72], "ipex_optim": [31, 35, 49, 55, 72, 85, 88], "use_horovod": [31, 35, 49, 72], "hvd_start_timeout": [31, 35, 49, 72], "30": [31, 35, 49, 72, 86, 87, 90], "fulli": [31, 35, 49], "connect": [31, 35, 49], "linear": [31, 35, 49], "extens": [31, 35, 49, 55, 72, 80, 85, 88], "ipex": [31, 35, 49, 72], "flag": [31, 35, 49, 55, 76, 85], "node": [31, 35, 49, 55, 72, 73, 78, 93], "spawn": [31, 35, 49, 55], "runtimeerror": 40, "multi": [52, 78, 82, 84, 87, 90], "learning_r": [55, 85], "1e": 55, "05": [55, 85], "devic": 55, "use_train": [55, 85, 88], "force_download": 55, "textclassificationdataset": [55, 64, 69], "arrow_dataset": 55, "been": [55, 64, 69, 72, 76, 80, 85, 89, 91], "entir": [55, 64, 69, 73, 93], "partit": [55, 64, 69], "have": [55, 73, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "done": [55, 76, 85, 87, 88, 89, 90], "trainer": [55, 85, 88], "nativ": [55, 88, 92], "loop": [55, 88], "trainoutput": 55, "dictionari": [55, 71, 90], "yet": [55, 71, 87, 90], "binari": [60, 64, 65, 69], "notimplementederror": [69, 71], "simplest": 71, "load_dataset": [71, 84, 85, 86, 87, 88, 89, 90, 91], "themselv": 71, "tfcustomtextclassificationdataset": 71, "task": [71, 78, 88], "purpos": [71, 87, 90], "keyword": 71, "being": [71, 72, 77, 78, 86, 88, 91], "flower_photo": [71, 76, 77, 87, 89, 90], "3670": [71, 76], "belong": [71, 76, 77, 89], "daisi": [71, 77, 87, 90], "dandelion": [71, 77, 87, 90], "rose": [71, 77, 87, 90], "sunflow": [71, 77, 87, 90], "tulip": [71, 77, 87, 90], "cv": [71, 72], "huggingfac": [71, 72, 85], "nlp": 71, "request": [71, 80, 86, 87], "rare": 71, "interact": 71, "directli": [71, 89], "discov": 71, "load_model": [71, 82, 84, 86], "discoveri": 71, "inspect": [71, 88, 91], "get_supported_model": [71, 85, 89], "print_supported_model": [71, 82, 84, 87, 88, 90, 91], "model_hub": [71, 85, 89], "origin": [71, 82, 84, 86, 88, 89, 91], "configur": [71, 78, 85, 89], "adam": [71, 89], "torch": [71, 85, 86, 87], "nn": 71, "crossentropyloss": 71, "further": [71, 80, 85], "thei": [71, 73, 93], "amsgrad": 71, "want": [71, 73, 87, 90, 93], "my_model": 71, "relu": 71, "softmax": 71, "224": [71, 86, 87], "leaf": 71, "item": [71, 85, 89], "nameerror": 71, "unknown": 71, "miss": 71, "verbos": [71, 72, 82, 84, 86, 87, 88, 90, 91], "markdown": 71, "categor": 71, "tabl": [71, 89], "updat": [71, 88, 91], "Not": 71, "arg": [72, 85], "model_dir": 72, "requir": [72, 74, 80, 82, 83, 84, 89, 92], "reload": 72, "dataset_fil": [72, 78], "inc": [72, 87, 88, 89, 90, 91], "temporari": 72, "delet": 72, "previous": [72, 86], "try": [72, 74, 85, 89], "singl": [72, 86, 88, 89, 91], "extra": 72, "static": [72, 78, 87, 88, 91], "dynam": [72, 87], "criterion": [72, 76, 87, 89], "accuracy_criterion": 72, "rel": [72, 87, 89], "allow": [72, 78, 82, 84, 87, 88, 89, 90, 91], "01": [72, 76, 87, 89], "timeout": [72, 76, 87, 88, 89, 90], "finish": [72, 87, 89], "max": [72, 76, 85, 86, 87, 88, 89, 90, 91], "trial": [72, 76, 87, 88, 89, 90], "mean": [72, 85, 86, 87, 89], "phase": [72, 87, 89], "met": [72, 87, 89], "max_trial": [72, 87, 89], "maximum": [72, 85, 87, 88, 89, 91], "50": [72, 76, 82, 84, 87, 89], "workspac": [72, 89], "deep": [72, 78, 80, 85], "etc": [72, 82, 84, 87, 88, 90, 91], "init": 72, "init_checkpoint": 72, "resum": [72, 80], "aug": 72, "add_aug": [72, 82, 84, 86, 87, 90], "choic": 72, "augment": [72, 82, 84, 86, 87, 90], "hvflip": [72, 82, 84, 90], "hflip": [72, 82, 84, 86, 87, 90], "vflip": [72, 82, 84, 90], "rotat": [72, 82, 84, 86, 87, 90], "zoom": [72, 82, 84, 90], "d": [72, 78, 85, 89], "trigger": 72, "job": [72, 78], "nproc": 72, "lr": 72, "horovod": 72, "mpi": 72, "hvd": 72, "horovodrun": 72, "check": [72, 73, 78, 80, 86, 93], "altern": [72, 76], "horovod_start_timeout": 72, "current": [72, 82, 84, 86, 87, 88, 90, 91], "here": [73, 75, 76, 79, 86, 93], "particip": [73, 93], "oneapi": [73, 93], "toolkit": [73, 82, 84, 86, 89, 93], "instal": [73, 74, 80, 83, 92, 93], "opt": [73, 93], "up": [73, 78, 80, 82, 84, 86, 87, 88, 90, 91, 93], "kei": [73, 85, 89, 93], "pair": [73, 93], "sure": [73, 76, 93], "id_rsa": [73, 93], "pub": [73, 93], "don": [73, 88, 89, 93], "t": [73, 78, 82, 85, 87, 88, 89, 90, 91, 93], "passphras": [73, 93], "keygen": [73, 93], "old_passphras": [73, 93], "n": [73, 82, 85, 86, 87, 89, 90, 93], "new_passphras": [73, 93], "keyfil": [73, 93], "replac": [73, 78, 93], "blank": [73, 93], "give": [73, 85, 87, 90, 93], "permiss": [73, 93], "chmod": [73, 93], "u": [73, 85, 87, 89, 90, 93], "x": [73, 82, 84, 85, 89, 91, 93], "rsa": [73, 93], "ask": [73, 93], "what": [73, 86, 89, 93], "press": [73, 93], "enter": [73, 93], "just": [73, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93], "open": [73, 80, 82, 84, 87, 90, 93], "editor": [73, 93], "vi": [73, 93], "vim": [73, 93], "nano": [73, 93], "pico": [73, 93], "sai": [73, 93], "your_idsid": [73, 93], "hostnam": [73, 74, 93], "domain": [73, 82, 84, 93], "omit": [73, 93], "idsid": [73, 93], "authorized_kei": [73, 93], "past": [73, 92, 93], "AND": [73, 93], "yourself": [73, 93], "anyon": [73, 93], "els": [73, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93], "600": [73, 93], "file1": [73, 93], "file2": [73, 93], "file3": [73, 93], "ip_or_hostnam": [73, 93], "target": [73, 93], "system": [73, 80, 88, 92, 93], "workload": [73, 93], "local": [73, 74, 85, 86, 88, 93], "home": [73, 82, 84, 85, 86, 87, 88, 89, 90, 91, 93], "content": [73, 87, 88, 91, 93], "insid": [73, 92, 93], "describ": 74, "root": [74, 86], "project": [74, 80], "m": [74, 76, 82], "pandoc": 74, "few": 74, "doc": 74, "r": [74, 78, 82, 92], "txt": [74, 87, 90, 92], "navig": [74, 92], "doctest": 74, "ensur": [74, 78, 87, 89, 90], "produc": [74, 86], "similiar": 74, "summari": [74, 87, 88, 89], "6": [74, 89], "failur": 74, "cleanup": 74, "succeed": 74, "final": [74, 80, 89], "html": [74, 87], "clean": 74, "_build": 74, "server": [74, 92], "view": [74, 86, 92], "serv": [74, 82, 84, 87, 88, 90, 91], "127": 74, "port": [74, 92], "9999": 74, "anoth": [74, 89], "machin": [74, 78, 88, 91], "forward": 74, "appropri": [74, 82, 84], "listen_ip": 74, "listen_port": 74, "host": 74, "listen": 74, "now": [74, 86], "cli": [75, 79, 80], "low": [75, 79, 80, 87, 88, 90, 91], "api": [75, 78, 79, 80], "begin": 76, "step": [76, 80, 82, 84, 86, 87, 88, 90, 91, 92], "concept": 76, "limit": 76, "particular": 76, "extract": [76, 77, 78, 87, 88, 90, 91], "mkdir": [76, 77, 78, 92], "wget": [76, 77, 78], "storag": [76, 77, 87, 89, 90], "googleapi": [76, 77, 87, 89, 90], "org": [76, 77, 78, 82, 84, 85, 87, 88, 89, 90, 91], "example_imag": [76, 77, 87, 89, 90], "tgz": [76, 77, 87, 89, 90], "tar": [76, 77, 86], "xzf": [76, 77], "c": [76, 77, 82, 85, 87, 91], "supress": 76, "readi": [76, 82, 84, 90, 91], "own": [76, 80, 86, 89], "along": [76, 88, 91], "eval": [76, 77, 78, 85, 89], "2022": 76, "06": 76, "28": 76, "info": [76, 82, 87, 88, 90, 91], "latenc": [76, 89], "031": 76, "throughput": [76, 85, 89], "329": 76, "878": 76, "sec": [76, 89], "exit": [76, 87, 88, 89, 90], "58": 76, "statist": 76, "conv2d": 76, "53": 76, "matmul": 76, "maxpool": 76, "quantizev2": 76, "dequant": 76, "elaps": 76, "32164": 76, "27": 76, "26": 76, "13921": 76, "64": [76, 86], "9008": 76, "9022": 76, "durat": 76, "13": 76, "9226": 76, "17": 76, "3321": 76, "baselin": [76, 87, 88, 90, 91], "nc_workspac": [76, 89], "snapshot": 76, "meet": [76, 78, 85, 88, 91], "goal": [76, 86], "savedmodel": 76, "again": [76, 85, 87, 88, 90, 91], "compar": [76, 87, 88, 90, 91], "33": 76, "946": 76, "1056": 76, "940": 76, "so": [76, 85, 87, 88, 89, 90, 91], "51": 76, "21": 76, "photo": 77, "sinc": [77, 78, 87, 90], "onlin": [77, 87, 90], "tfflower": [77, 87, 90], "author": [77, 78, 82, 84, 85, 87, 88, 90, 91], "team": [77, 80, 87, 90], "titl": [77, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "month": [77, 78, 84, 85, 87, 88, 90, 91], "jan": [77, 87, 90], "year": [77, 78, 82, 84, 85, 87, 88, 90, 91], "2019": [77, 78, 85, 86, 87, 90], "url": [77, 78, 84, 85, 87, 88, 90, 91, 92], "although": 78, "flexibl": 78, "translat": [78, 88, 91], "tab": [78, 88, 91], "messag": [78, 88, 91], "ham": [78, 88, 91], "archiv": [78, 88, 91], "ic": [78, 88, 91], "uci": [78, 88, 91], "edu": [78, 87, 88, 91], "228": [78, 88, 91], "unzip": [78, 84], "copi": [78, 92], "smsspamcollection_numer": 78, "cp": 78, "smsspamcollect": [78, 88, 91], "sed": 78, "g": [78, 82], "google_bert_uncased_l": 78, "demonstr": [78, 80, 83, 86, 87, 90], "imdb_review": [78, 91], "level": [78, 91], "sentiment": [78, 85, 88, 91], "analysi": [78, 82, 85, 86, 88, 91], "tweet_ev": [78, 88], "ag_new": [78, 88], "prerequisit": 78, "successfulli": 78, "saniti": [78, 86, 89], "inproceed": [78, 85, 88, 91], "maa": [78, 85, 88, 91], "etal": [78, 85, 88, 91], "2011": [78, 85, 88, 91], "acl": [78, 85, 88, 91], "hlt2011": [78, 85, 88, 91], "andrew": [78, 85, 88, 91], "l": [78, 82, 85, 87, 88, 90, 91], "dali": [78, 85, 88, 91], "raymond": [78, 85, 88, 91], "e": [78, 85, 88, 89, 91], "pham": [78, 85, 88, 91], "peter": [78, 85, 88, 91], "huang": [78, 85, 88, 91], "dan": [78, 85, 88, 91], "ng": [78, 85, 88, 91], "y": [78, 82, 84, 85, 88, 91], "pott": [78, 85, 88, 91], "christoph": [78, 85, 88, 91], "word": [78, 85, 88, 91], "vector": [78, 82, 84, 85, 88, 89, 91], "booktitl": [78, 85, 88, 91], "proceed": [78, 84, 85, 88, 91], "49th": [78, 85, 88, 91], "annual": [78, 85, 88, 91], "comput": [78, 85, 86, 88, 91], "linguist": [78, 85, 88, 91], "languag": [78, 85, 88, 91], "technologi": [78, 85, 88, 91], "june": [78, 85, 88, 91], "address": [78, 85, 87, 88, 89, 90, 91], "portland": [78, 85, 88, 91], "oregon": [78, 85, 88, 91], "usa": [78, 85, 88, 91], "publish": [78, 82, 84, 85, 88, 91], "page": [78, 82, 84, 85, 88, 91], "142": [78, 85, 88, 91], "150": [78, 85, 88, 91], "aclweb": [78, 85, 88, 91], "anthologi": [78, 85, 88, 91], "p11": [78, 85, 88, 91], "1015": [78, 85, 88, 91], "wang2019glu": 78, "natur": [78, 82], "understand": [78, 85], "wang": 78, "alex": [78, 87], "singh": 78, "amanpreet": 78, "michael": [78, 86], "julian": 78, "hill": 78, "felix": 78, "levi": 78, "omer": 78, "bowman": 78, "samuel": 78, "iclr": 78, "misc": [78, 85, 88, 91], "misc_sms_spam_collection_228": [78, 88, 91], "almeida": [78, 88, 91], "tiago": [78, 88, 91], "2012": [78, 88, 91], "howpublish": [78, 88, 91], "socher": 78, "2013": 78, "recurs": 78, "semant": [78, 88], "composition": 78, "over": [78, 80], "treebank": 78, "richard": 78, "perelygin": 78, "wu": 78, "jean": 78, "chuang": 78, "jason": 78, "man": 78, "confer": [78, 86, 88, 91], "empir": 78, "oct": [78, 84], "seattl": 78, "washington": 78, "d13": 78, "1170": 78, "1631": 78, "1642": 78, "problem": 80, "smaller": 80, "easier": 80, "varieti": [80, 87], "Its": 80, "librari": [80, 87, 88, 90, 91], "leverag": 80, "effici": 80, "usag": 80, "select": [80, 82, 84, 86, 87, 90, 91], "quickli": 80, "built": 80, "scale": [80, 87, 90], "crop": 80, "predict": [80, 82, 84, 85], "boost": [80, 89], "speed": 80, "interfac": 80, "construct": 80, "overview": 80, "shown": [80, 86, 87, 90], "figur": [80, 86, 87, 89, 90], "track": [80, 89], "bug": 80, "enhanc": 80, "issu": [80, 87, 88, 90, 91], "submit": 80, "suggest": 80, "report": [80, 82, 84], "search": [80, 87, 88, 90, 91], "legal": 80, "disclaim": 80, "licens": [80, 88, 91], "facilit": [82, 84], "implement": [82, 84], "textur": 82, "cancer": 82, "sota": [82, 84], "resnet": [82, 84, 86], "v1": [82, 84, 86], "achiev": [82, 84], "numpi": [82, 84, 85, 86, 87, 88, 89, 90, 91], "np": [82, 84, 85, 86, 87, 88, 89, 90, 91], "pickl": [82, 84], "sklearn": [82, 84], "classification_report": [82, 84], "plot_util": [82, 84], "plot_curv": [82, 84], "factori": [82, 84, 86, 87, 88, 89, 90, 91], "ad": [82, 84, 86, 87, 88, 90, 91], "next": [82, 84, 87, 88, 89, 90, 91], "cell": [82, 84, 85, 86, 87, 88, 89, 90, 91], "later": [82, 84, 87, 88, 90, 91], "colorectal_histologi": 82, "nclass": [82, 88, 90, 91], "onc": [82, 84, 86, 87, 88, 90, 91, 92], "abov": [82, 84, 86, 87, 88, 90, 91], "resiz": [82, 84, 86, 87, 90, 91], "match": [82, 84, 86, 87, 89, 90, 91], "them": [82, 84, 86, 87, 90, 91], "randomhorizontalandverticalflip": [82, 84, 90], "randomhorizontalflip": [82, 84, 86, 87, 90], "randomverticalflip": [82, 84, 90], "randomrot": [82, 84, 86, 87, 90], "randomzoom": [82, 84, 90], "80": [82, 84], "test_pct": [82, 84, 86], "paramt": [82, 84, 90, 91], "releas": [82, 84, 86, 87, 88, 90, 91], "date": [82, 84, 86, 87, 88, 90, 91], "descript": [82, 84, 86, 87, 88, 90, 91], "val_loss": [82, 84], "val_acc": [82, 84], "_checkpoint": [82, 84], "dump": [82, 84], "hist": 82, "pkl": [82, 84], "wb": [82, 84], "pick": [82, 84, 87, 88, 90, 91], "rb": [82, 84], "use_test_set": [82, 84, 86, 89], "actual_label": [82, 84, 91], "concaten": [82, 84], "_test_subset": [82, 84], "axi": [82, 84, 85, 86, 87, 88, 90, 91], "predicted_label": [82, 84], "articl": [82, 84, 87, 90], "kather2016multi": 82, "kather": 82, "jakob": 82, "nikola": 82, "wei": [82, 85], "cleo": 82, "aron": 82, "bianconi": 82, "francesco": 82, "melcher": 82, "susann": 82, "schad": 82, "lothar": 82, "gaiser": 82, "timo": 82, "marx": 82, "alexand": 82, "z": 82, "llner": 82, "frank": 82, "gerrit": 82, "journal": [82, 84, 86, 87, 90], "scientif": 82, "volum": [82, 84], "27988": 82, "2016": [82, 87, 90], "group": [82, 85, 89], "j": 82, "z\u00f6llner": 82, "zenodo": 82, "doi": [82, 84, 86], "5281": 82, "53169": 82, "ipynb": 83, "medic": 83, "remot": 83, "sens": 83, "scene": 83, "resisc": 83, "rar": 84, "onedr": 84, "live": 84, "authkei": 84, "21ahhnahilzp": 84, "5fixj": 84, "cid": 84, "5c5e061130630a68": 84, "id": [84, 86, 87, 90], "21107": 84, "parid": 84, "21112": 84, "action": 84, "custom_dataset_path": [84, 87, 90], "256": [84, 89], "resisc45_hist": 84, "cheng_2017": 84, "state": 84, "art": 84, "105": 84, "issn": 84, "1558": 84, "2256": 84, "dx": 84, "1109": [84, 86], "jproc": 84, "2017": [84, 88], "2675998": 84, "ieee": [84, 86], "institut": 84, "electr": 84, "electron": 84, "engin": 84, "cheng": 84, "gong": 84, "han": 84, "junwei": 84, "lu": 84, "xiaoqiang": 84, "1865": 84, "1883": 84, "sequenc": [85, 89], "control": [85, 89], "hood": 85, "three": [85, 86], "combin": 85, "chart": [85, 89], "visual": [85, 87, 89, 90], "psutil": [85, 89], "tokenizers_parallel": 85, "matplotlib": [85, 86, 87, 89, 90], "pyplot": [85, 86, 87, 89, 90], "plt": [85, 86, 87, 89, 90], "ticker": [85, 89], "mtick": [85, 89], "panda": [85, 86, 87, 88, 89, 90, 91], "pd": [85, 86, 87, 88, 89, 90, 91], "datacollatorwithpad": 85, "loader": 85, "platform_util": [85, 89], "cpuinfo": [85, 89], "optimizedplatformutil": [85, 89], "platformutil": [85, 89], "dataset_directori": [85, 89], "output_directori": [85, 89], "store": 85, "hf_home": 85, "set_verbos": 85, "frame": [85, 88, 89, 91], "style": [85, 88, 89, 91], "table_styl": [85, 89], "selector": [85, 89, 91], "caption": [85, 89], "prop": [85, 89, 91], "align": [85, 89, 91], "center": [85, 89, 91], "black": [85, 86, 89], "font": [85, 89], "16px": [85, 89], "blue": [85, 89], "0071c5": [85, 89], "dark_blu": [85, 89], "003c71": [85, 89], "yellow": [85, 89], "ffcc4d": 85, "cpu_info": [85, 89], "famili": [85, 89], "cpu_famili": [85, 89], "cpu_model": [85, 89], "cpu_typ": [85, 89], "physic": [85, 89], "socket": [85, 89], "cores_per_socket": [85, 89], "cpufreq": [85, 89], "cpu_freq": [85, 89], "frequenc": [85, 89], "min": [85, 86, 87, 89, 90], "cpu_socket_count": [85, 89], "svmem": [85, 89], "virtual_memori": [85, 89], "__version__": [85, 89], "text_classif": [85, 88, 91], "supported_model": [85, 89], "relev": [85, 89], "70": [85, 89], "training_epoch": [85, 89], "eval_split": 85, "validation_split": [85, 89], "training_split": [85, 89], "batch_size_list": [85, 89], "3e": 85, "max_sequence_length": 85, "128": 85, "pad": [85, 89], "max_length": 85, "truncat": 85, "use_ipex": 85, "isinst": [85, 89], "sum": [85, 86, 89], "greater": [85, 89], "len": [85, 86, 89, 91], "section": [85, 87, 88, 89, 90, 91], "take": [85, 86, 87, 88, 89, 90, 91], "set_se": [85, 89], "determin": [85, 89], "append": [85, 88, 89, 91], "hf_dataset": 85, "cache_dir": 85, "token": 85, "hf_token": 85, "autotoken": 85, "from_pretrain": 85, "text_column_nam": 85, "col_nam": 85, "def": [85, 86, 89, 91], "tokenize_funct": 85, "tokenized_hf_dataset": 85, "set_format": 85, "percentag": [85, 86, 89], "hf_train_dataset": 85, "hf_train_subset": 85, "hf_eval_subset": 85, "dataset_length": 85, "train_siz": [85, 89], "eval_s": 85, "manual_se": 85, "dataset_indic": 85, "randperm": 85, "tolist": 85, "rang": [85, 86, 87, 89, 90], "train_indic": 85, "eval_indic": 85, "hf_train_dataset_length": 85, "hf_eval_dataset_length": 85, "compute_metr": 85, "evalpredict": 85, "pred": 85, "tupl": 85, "argmax": [85, 91], "label_id": 85, "astyp": 85, "float32": [85, 86], "hf_saved_model_path": 85, "hf_training_metr": 85, "hf_eval_result": 85, "enumer": [85, 86, 88, 89, 91], "40": [85, 89], "automodelforsequenceclassif": 85, "num_label": 85, "hf_model_b": 85, "even": 85, "thrown": 85, "eval_dataset": 85, "training_arg": 85, "trainingargu": 85, "do_train": 85, "per_device_train_batch_s": 85, "per_device_eval_batch_s": 85, "num_train_epoch": 85, "evaluation_strategi": 85, "push_to_hub": 85, "no_cuda": 85, "overwrite_output_dir": 85, "data_se": 85, "train_dataset": 85, "eval_result": 85, "save_model": 85, "without": [85, 86], "gather": 85, "evalut": 85, "tlt_trainer_saved_model_path": 85, "tlt_trainer_training_metr": 85, "tlt_trainer_eval_result": 85, "tlt_torch_saved_model_path": 85, "tlt_torch_training_metr": 85, "tlt_torch_eval_result": 85, "split_nam": 85, "doesn": [85, 89], "tlt_train_dataset_length": 85, "train_subset": [85, 89], "test_subset": [85, 89], "tlt_eval_dataset_length": 85, "validation_subset": [85, 89], "length": 85, "assert": 85, "ntrain": 85, "eval_metr": 85, "display_df": [85, 89], "df": [85, 89], "datafram": [85, 88, 89, 91], "train_loss": 85, "train_samples_per_second": 85, "train_runtim": 85, "br": [85, 89], "hf": 85, "runtim": 85, "set_table_styl": [85, 89, 91], "set_capt": [85, 89], "eval_accuraci": 85, "eval_loss": 85, "eval_samples_per_second": 85, "eval_runtim": 85, "took": [85, 89], "lower": 85, "better": [85, 86], "thoughput": 85, "higher": 85, "bar": [85, 89], "hf_train_runtim": 85, "tlt_trainer_train_runtim": 85, "tlt_torch_train_runtim": 85, "hf_train_throughput": 85, "tlt_trainer_train_throughput": 85, "tlt_torch_train_thoughput": 85, "arang": [85, 89], "width": [85, 89], "multipli": [85, 89], "fig": [85, 89], "ax1": [85, 89], "ax2": [85, 89], "subplot": [85, 86, 87, 89, 90], "set_figheight": [85, 89], "15": [85, 89], "set_figwidth": [85, 89], "rects_tf": [85, 89], "rects_tlt_train": 85, "rects_tlt_torch": 85, "bar_label": [85, 89], "legend": [85, 89], "set_ylabel": [85, 89], "set_titl": [85, 89], "set_xtick": [85, 89], "set_ymargin": [85, 89], "ncol": [85, 89], "were": [85, 89], "decim": [85, 89], "round": [85, 89], "hf_eval_acc": 85, "tlt_trainer_eval_acc": 85, "tlt_torch_eval_acc": 85, "hf_eval_runtim": 85, "tlt_trainer_eval_runtim": 85, "tlt_torch_eval_runtim": 85, "hf_eval_throughput": 85, "tlt_trainer_eval_throughput": 85, "tlt_torch_eval_thoughput": 85, "ax3": 85, "conclud": 85, "back": 85, "nuse": 85, "devlin2019bert": 85, "bidirect": 85, "jacob": 85, "devlin": 85, "ming": 85, "kenton": 85, "lee": 85, "kristina": 85, "toutanova": 85, "eprint": [85, 91], "1810": 85, "04805": 85, "archiveprefix": [85, 91], "arxiv": [85, 91], "primaryclass": [85, 91], "cl": 85, "assum": [86, 87, 88, 90, 91], "pil": [86, 87, 90], "interpolationmod": 86, "io": [86, 87], "bytesio": [86, 87], "file_util": [86, 87, 88, 89, 90, 91], "download_and_extract_tar_fil": [86, 87, 89, 90], "download_fil": [86, 87, 90], "desir": 86, "anomaly_detect": 86, "path_to_model_fil": 86, "png": 86, "hazelnut": 86, "crack": 86, "good": [86, 88], "hole": 86, "least": 86, "matter": 86, "mani": 86, "long": 86, "would": 86, "layout": [86, 87, 90], "toothbrush": 86, "encod": 86, "bad": 86, "exact": 86, "re": 86, "certain": 86, "img_dir": 86, "image_anomaly_detect": 86, "_dataset": 86, "defect_nam": 86, "_validation_typ": 86, "cutpast": 86, "cutpaste_typ": 86, "scar": 86, "3wai": 86, "union": 86, "interpol": 86, "lanczo": 86, "plot_imag": 86, "sup_titl": 86, "figsiz": [86, 87, 89, 90], "18": [86, 87, 89, 90], "14": [86, 87, 90], "subplots_adjust": [86, 87, 90], "hspace": [86, 87, 90], "inp": [86, 87], "transpos": [86, 87], "arrai": [86, 87, 90], "485": [86, 87], "456": [86, 87], "406": [86, 87], "std": [86, 87], "229": [86, 87], "225": [86, 87], "clip": [86, 87], "imshow": [86, 87, 90], "correct_predict": [86, 87, 90], "darkgreen": [86, 87, 90], "crimson": [86, 87, 90], "good_sampl": 86, "fontsiz": [86, 87, 90], "off": [86, 87, 90], "_": [86, 87, 89, 90], "suptitl": [86, 87, 90], "plot": [86, 89], "get_batch": [86, 87, 88, 89, 90, 91], "princip": 86, "compon": 86, "auroc": 86, "area": 86, "roc": 86, "curv": 86, "imageanomalydetectiondataset": 86, "generate_checkpoint": 86, "preserv": 86, "layer_nam": 86, "whose": 86, "pool": 86, "avg": 86, "kernel_s": 86, "kernel": 86, "pca_threshold": 86, "threshold": 86, "pca": 86, "99": 86, "examin": 86, "decid": 86, "list_lay": [86, 87, 88], "layer3": 86, "No": 86, "simpli": 86, "self": [86, 89], "supervis": 86, "network": [86, 91], "siames": 86, "meaning": 86, "represent": 86, "differenti": 86, "regular": 86, "context": 86, "underli": 86, "backbon": 86, "embed": 86, "dl": 86, "fbaipublicfil": 86, "100ep": 86, "256b": 86, "checkpoint_0099": 86, "pth": 86, "strategi": 86, "patch": 86, "techniqu": 86, "preview": 86, "simsiam_imag": 86, "four": 86, "cutpastenorm": 86, "cutpastescar": 86, "cutpaste3wai": 86, "cutpasteunion": 86, "cutpaste_imag": 86, "pca_compon": 86, "trained_model": 86, "feature_dim": 86, "1000": [86, 89], "pred_dim": 86, "250": 86, "path_to_checkpoints_fil": 86, "sgd": 86, "freeze_resnet": 86, "head_lay": 86, "return_typ": 86, "correct": [86, 87, 90], "green": [86, 87, 90], "incorrect": [86, 87, 90], "red": [86, 87, 90], "paul": 86, "bergmann": 86, "kilian": 86, "batzner": 86, "fauser": 86, "david": [86, 87, 90], "sattlegg": 86, "carsten": 86, "steger": 86, "real": 86, "world": 86, "unsupervis": 86, "intern": [86, 88], "vision": 86, "129": 86, "1038": 86, "1059": 86, "2021": 86, "1007": 86, "s11263": 86, "020": 86, "01400": 86, "cvf": 86, "pattern": 86, "recognit": 86, "cvpr": 86, "9584": 86, "9592": 86, "00982": 86, "classfic": [87, 90], "speci": [87, 90], "similarli": [87, 89, 90], "comment": [87, 90], "download_url": [87, 90], "subsequ": [87, 92], "reus": [87, 92], "These": [87, 89], "apppli": 87, "haven": [87, 90], "imagenet": [87, 89, 90], "labels_fil": [87, 90], "imagenetlabel": [87, 90], "labels_file_path": 87, "basenam": [87, 88, 89, 90, 91], "imagenet_label": [87, 90], "readlin": [87, 90], "imagenet_class": [87, 90], "actual": [87, 88, 90, 91], "parenthesi": [87, 90], "modul": [87, 88], "unfrozen": [87, 88], "unfreeze_lay": [87, 88], "unfreez": [87, 88], "lastli": [87, 88, 91], "earlier": [87, 90], "wasn": [87, 90], "web": [87, 90], "image_url": [87, 90], "c8": [87, 90], "staticflickr": [87, 90], "7095": [87, 90], "7210797228_c7fe51c3cb_z": [87, 90], "image_shap": [87, 90], "dimens": [87, 90], "255": [87, 89, 90], "channel": 87, "newaxi": [87, 90], "moveaxi": 87, "tensor": [87, 88], "known": [87, 88, 89, 90, 91], "sometim": [87, 88, 90, 91], "zmq": [87, 88, 89, 90, 91], "zmqerror": [87, 88, 89, 90, 91], "rerun": [87, 88, 89, 90, 91], "recip": [87, 88, 90, 91], "constrain": [87, 88, 90], "sever": [87, 88, 90, 91], "minut": [87, 88, 90, 91], "get_inc_config": [87, 89], "accuracy_criterion_rel": [87, 89], "exit_policy_timeout": [87, 89], "exit_policy_max_tri": [87, 89], "inc_util": [87, 89], "inc_output_dir": [87, 88, 90, 91], "quantized_result": [87, 88, 91], "krizhevski": 87, "cifar": 87, "2009": 87, "toronto": 87, "kriz": 87, "openimag": [87, 90], "krasin": [87, 90], "ivan": [87, 90], "duerig": [87, 90], "tom": [87, 90], "alldrin": [87, 90], "neil": [87, 90], "veit": [87, 90], "andrea": [87, 90], "abu": [87, 90], "el": [87, 90], "haija": [87, 90], "sami": [87, 90], "belongi": [87, 90], "serg": [87, 90], "cai": [87, 90], "feng": [87, 90], "zheyun": [87, 90], "ferrari": [87, 90], "vittorio": [87, 90], "gome": [87, 90], "victor": [87, 90], "gupta": [87, 90], "abhinav": [87, 90], "narayanan": [87, 90], "dhyanesh": [87, 90], "sun": [87, 90], "chen": [87, 90], "chechik": [87, 90], "gal": [87, 90], "murphi": [87, 90], "kevin": [87, 90], "download_and_extract_zip_fil": [88, 91], "mesag": [88, 91], "condit": [88, 91], "corpor": [88, 91], "modifi": 88, "csv_path": 88, "dataset_url": [88, 89], "sms_spam_collect": [88, 91], "csv_name": 88, "label_nam": 88, "renam": 88, "know": 88, "renamed_csv": 88, "emoji": 88, "emot": 88, "hate": 88, "ironi": 88, "offens": 88, "stance_abort": 88, "stance_ath": 88, "stance_clim": 88, "stance_feminist": 88, "stance_hillari": 88, "data_batch": [88, 91], "batch_predict": [88, 89, 91], "max_item": [88, 91], "score": [88, 91], "prediction_list": [88, 91], "input_id": 88, "get_text": 88, "get_str_label": [88, 91], "break": [88, 91], "result_df": [88, 91], "hide": [88, 91], "raw": [88, 91], "movi": [88, 91], "un": [88, 91], "compress": [88, 91], "du": [88, 91], "h": [88, 91], "rosenthal2017semev": 88, "semev": 88, "twitter": 88, "rosenth": 88, "sara": 88, "farra": 88, "noura": 88, "nakov": 88, "preslav": 88, "11th": 88, "workshop": 88, "502": 88, "518": 88, "math": 89, "tempfil": 89, "tensorflow_hub": 89, "ignor": 89, "filterwarn": 89, "get_logg": 89, "setlevel": 89, "cach": 89, "tfhub_cache_dir": 89, "tfhub_modul": 89, "orang": 89, "ff6f00": 89, "f3d54e": 89, "caption_styl": 89, "dict": 89, "14pt": 89, "line_styl": 89, "solid": 89, "dot": 89, "dash": 89, "dashdot": 89, "marker": 89, "marker_styl": 89, "major_vers": 89, "minor_vers": 89, "onednn_en": 89, "_pywrap_util_port": 89, "tf_enable_onednn_opt": 89, "on_onednn": 89, "ismklen": 89, "pywrap_tensorflow": 89, "onednn": 89, "nvidia": 89, "gpu": 89, "cuda_visible_devic": 89, "handl": 89, "model_info": 89, "feature_vector_handl": 89, "feature_vector": 89, "unsupport": 89, "categori": 89, "dataset_subdir": 89, "nfolder": 89, "listdir": [89, 91], "isdir": 89, "timercallback": 89, "epoch_tim": 89, "eval_tim": 89, "predict_tim": 89, "on_epoch_begin": 89, "tf_timestamp": 89, "timestamp": 89, "on_epoch_end": 89, "on_test_begin": 89, "on_test_end": 89, "on_predict_begin": 89, "on_predict_end": 89, "goe": 89, "multipl": 89, "pythonhashse": 89, "tf_time_callback_list": 89, "tf_dataset_list": 89, "tf_model_list": 89, "tf_export_dir_list": 89, "tf_history_list": 89, "val_dataset_dir": 89, "train_dataset_dir": 89, "image_dataset_from_directori": 89, "cardin": 89, "reshuffle_each_iter": 89, "sub": 89, "train_d": 89, "val_d": 89, "val_siz": 89, "normalization_lay": 89, "rescal": 89, "preprocess_imag": 89, "resize_with_pad": 89, "batched_train_d": 89, "batched_val_d": 89, "feature_extractor_lay": 89, "input_shap": 89, "accord": 89, "tf_model": 89, "sparsecategoricalcrossentropi": 89, "from_logit": 89, "tf_time_callback": 89, "tf_export_dir": 89, "tf_saved_model": 89, "mkdtemp": 89, "prefix": 89, "simplifi": 89, "optimizedplatform": 89, "optimized_platform_util": 89, "omp_num_thread": 89, "kmp_blocktim": 89, "kmp_affin": 89, "granular": 89, "compact": 89, "tf_num_intraop_thread": 89, "tf_num_interop_thread": 89, "force_reset_env_var": 89, "k": 89, "env_vars_dict": 89, "tlt_time_callback_list": 89, "tlt_dataset_list": 89, "tlt_model_list": 89, "tlt_export_dir_list": 89, "tlt_history_list": 89, "tlt_model": 89, "tlt_dataset": 89, "tlt_time_callback": 89, "tlt_export_dir": 89, "tlt_saved_model": 89, "tlt_quantization_dir_list": 89, "tlt_optimized_dir_list": 89, "inc_config_list": 89, "relative_accuracy_criterion": 89, "tlt_quantization_dir": 89, "tlt_quantized_model": 89, "tlt_optimized_dir": 89, "tlt_optimized_model": 89, "aim": 89, "maintain": 89, "close": 89, "amount": 89, "versu": 89, "had": 89, "tf_images_per_second": 89, "tlt_images_per_second": 89, "performance_delta": 89, "2f": 89, "epoch_list": 89, "tf_train_tim": 89, "tlt_train_tim": 89, "linestyl": 89, "xlabel": 89, "ylabel": 89, "tf_acc_tim": 89, "tlt_acc_tim": 89, "tf_loss_tim": 89, "tlt_loss_tim": 89, "tf_eval_callback_list": 89, "tf_eval_metrics_list": 89, "tf_eval_callback": 89, "tlt_eval_callback_list": 89, "tlt_eval_metrics_list": 89, "tlt_eval_callback": 89, "tf_eval_tim": 89, "tlt_eval_tim": 89, "rects_tlt": 89, "tf_acc_index": 89, "tlt_acc_index": 89, "tf_eval_accuraci": 89, "tlt_eval_accuraci": 89, "yaxi": 89, "set_major_formatt": 89, "percentformatt": 89, "libari": 89, "tf_predict_callback_list": 89, "tf_predict_tim": 89, "dataset_batch": 89, "tf_batch": 89, "tlt_predict_callback_list": 89, "tlt_predict_tim": 89, "tlt_batch": 89, "ax": 89, "test_dataset_dir": 89, "elif": 89, "issuen": 89, "happen": 89, "tf_latency_list": 89, "tf_throughput_list": 89, "90": 89, "tf_latenc": 89, "tf_throughput": 89, "calculate_latency_and_throughput": 89, "tlt_latency_list": 89, "tlt_throughput_list": 89, "tlt_result": 89, "tlt_latenc": 89, "tlt_throughput": 89, "quantized_latency_list": 89, "quantized_throughput_list": 89, "tlt_quantized_lat": 89, "tlt_quantized_throughput": 89, "nquantiz": 89, "fail": 89, "tlt_quantized_result": 89, "except": 89, "optimized_latency_list": 89, "optimized_throughput_list": 89, "tlt_optimized_lat": 89, "tlt_optimized_throughput": 89, "noptim": 89, "tlt_optimized_result": 89, "isnan": 89, "rects_quant": 89, "rects_opt": 89, "millisecond": 89, "affect": 89, "preprocessor": 90, "downloaded_fil": 90, "get_fil": 90, "norm_imag": 90, "vmin": 90, "vmax": 90, "likewis": 90, "zip_file_url": 91, "sms_data_directori": 91, "ag_news_subset": 91, "num_class": 91, "decod": 91, "utf": 91, "get_static_valu": 91, "th": 91, "awesom": 91, "zhang2015characterlevel": 91, "convolut": 91, "xiang": 91, "zhang": 91, "junbo": 91, "zhao": 91, "yann": 91, "lecun": 91, "2015": 91, "1509": 91, "01626": 91, "lg": 91, "tutori": 92, "e2": 92, "comparison": 92, "upgrad": 92, "8888": 92, "termin": 92, "browser": 92}, "objects": {"tlt.datasets.dataset": [[4, 0, 1, "", "BaseDataset"]], "tlt.datasets.dataset.BaseDataset": [[4, 1, 1, "", "__init__"]], "tlt.datasets": [[71, 2, 0, "-", "dataset_factory"]], "tlt.datasets.dataset_factory": [[71, 3, 1, "", "get_dataset"], [71, 3, 1, "", "load_dataset"]], "tlt.datasets.hf_dataset": [[5, 0, 1, "", "HFDataset"]], "tlt.datasets.hf_dataset.HFDataset": [[5, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.image_classification_dataset": [[6, 0, 1, "", "ImageClassificationDataset"]], "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset": [[6, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset": [[7, 0, 1, "", "PyTorchCustomImageClassificationDataset"]], "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset": [[7, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.tf_custom_image_classification_dataset": [[8, 0, 1, "", "TFCustomImageClassificationDataset"]], "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset": [[8, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.tfds_image_classification_dataset": [[9, 0, 1, "", "TFDSImageClassificationDataset"]], "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset": [[9, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.torchvision_image_classification_dataset": [[10, 0, 1, "", "TorchvisionImageClassificationDataset"]], "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset": [[10, 1, 1, "", "__init__"]], "tlt.datasets.pytorch_dataset": [[11, 0, 1, "", "PyTorchDataset"]], "tlt.datasets.pytorch_dataset.PyTorchDataset": [[11, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.hf_custom_text_classification_dataset": [[12, 0, 1, "", "HFCustomTextClassificationDataset"]], "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset": [[12, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.hf_text_classification_dataset": [[13, 0, 1, "", "HFTextClassificationDataset"]], "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset": [[13, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.text_classification_dataset": [[14, 0, 1, "", "TextClassificationDataset"]], "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset": [[14, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.tf_custom_text_classification_dataset": [[15, 0, 1, "", "TFCustomTextClassificationDataset"]], "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset": [[15, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.tfds_text_classification_dataset": [[16, 0, 1, "", "TFDSTextClassificationDataset"]], "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset": [[16, 1, 1, "", "__init__"]], "tlt.datasets.tf_dataset": [[17, 0, 1, "", "TFDataset"]], "tlt.datasets.tf_dataset.TFDataset": [[17, 1, 1, "", "__init__"]], "tlt.models.hf_model": [[18, 0, 1, "", "HFModel"]], "tlt.models.hf_model.HFModel": [[18, 1, 1, "", "__init__"]], "tlt.models.image_classification.image_classification_model": [[19, 0, 1, "", "ImageClassificationModel"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel": [[19, 1, 1, "", "__init__"], [20, 1, 1, "", "benchmark"], [21, 1, 1, "", "quantize"], [22, 1, 1, "", "train"]], "tlt.models.image_classification.keras_image_classification_model": [[23, 0, 1, "", "KerasImageClassificationModel"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel": [[23, 1, 1, "", "__init__"], [24, 1, 1, "", "benchmark"], [25, 1, 1, "", "optimize_graph"], [26, 1, 1, "", "quantize"], [27, 1, 1, "", "train"]], "tlt.models.image_classification.pytorch_hub_image_classification_model": [[28, 0, 1, "", "PyTorchHubImageClassificationModel"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel": [[28, 1, 1, "", "__init__"], [29, 1, 1, "", "benchmark"], [30, 1, 1, "", "quantize"], [31, 1, 1, "", "train"]], "tlt.models.image_classification.pytorch_image_classification_model": [[32, 0, 1, "", "PyTorchImageClassificationModel"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel": [[32, 1, 1, "", "__init__"], [33, 1, 1, "", "benchmark"], [34, 1, 1, "", "quantize"], [35, 1, 1, "", "train"]], "tlt.models.image_classification.tf_image_classification_model": [[36, 0, 1, "", "TFImageClassificationModel"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel": [[36, 1, 1, "", "__init__"], [37, 1, 1, "", "benchmark"], [38, 1, 1, "", "optimize_graph"], [39, 1, 1, "", "quantize"], [40, 1, 1, "", "train"]], "tlt.models.image_classification.tfhub_image_classification_model": [[41, 0, 1, "", "TFHubImageClassificationModel"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel": [[41, 1, 1, "", "__init__"], [42, 1, 1, "", "benchmark"], [43, 1, 1, "", "optimize_graph"], [44, 1, 1, "", "quantize"], [45, 1, 1, "", "train"]], "tlt.models.image_classification.torchvision_image_classification_model": [[46, 0, 1, "", "TorchvisionImageClassificationModel"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel": [[46, 1, 1, "", "__init__"], [47, 1, 1, "", "benchmark"], [48, 1, 1, "", "quantize"], [49, 1, 1, "", "train"]], "tlt.models.model": [[50, 0, 1, "", "BaseModel"]], "tlt.models.model.BaseModel": [[50, 1, 1, "", "__init__"]], "tlt.models": [[71, 2, 0, "-", "model_factory"]], "tlt.models.model_factory": [[71, 3, 1, "", "get_model"], [71, 3, 1, "", "get_supported_models"], [71, 3, 1, "", "load_model"], [71, 3, 1, "", "print_supported_models"]], "tlt.models.pytorch_model": [[51, 0, 1, "", "PyTorchModel"]], "tlt.models.pytorch_model.PyTorchModel": [[51, 1, 1, "", "__init__"]], "tlt.models.text_classification.pytorch_hf_text_classification_model": [[52, 0, 1, "", "PyTorchHFTextClassificationModel"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel": [[52, 1, 1, "", "__init__"], [53, 1, 1, "", "benchmark"], [54, 1, 1, "", "quantize"], [55, 1, 1, "", "train"]], "tlt.models.text_classification.text_classification_model": [[56, 0, 1, "", "TextClassificationModel"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel": [[56, 1, 1, "", "__init__"], [57, 1, 1, "", "benchmark"], [58, 1, 1, "", "quantize"], [59, 1, 1, "", "train"]], "tlt.models.text_classification.tf_hf_text_classification_model": [[60, 0, 1, "", "TFHFTextClassificationModel"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel": [[60, 1, 1, "", "__init__"], [61, 1, 1, "", "benchmark"], [62, 1, 1, "", "optimize_graph"], [63, 1, 1, "", "quantize"], [64, 1, 1, "", "train"]], "tlt.models.text_classification.tf_text_classification_model": [[65, 0, 1, "", "TFTextClassificationModel"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel": [[65, 1, 1, "", "__init__"], [66, 1, 1, "", "benchmark"], [67, 1, 1, "", "optimize_graph"], [68, 1, 1, "", "quantize"], [69, 1, 1, "", "train"]], "tlt.models.tf_model": [[70, 0, 1, "", "TFModel"]], "tlt.models.tf_model.TFModel": [[70, 1, 1, "", "__init__"]], "tlt-benchmark": [[72, 4, 1, "cmdoption-tlt-benchmark-batch-size", "--batch-size"], [72, 4, 1, "cmdoption-tlt-benchmark-batch-size", "--batch_size"], [72, 4, 1, "cmdoption-tlt-benchmark-dataset-dir", "--dataset-dir"], [72, 4, 1, "cmdoption-tlt-benchmark-dataset-file", "--dataset-file"], [72, 4, 1, "cmdoption-tlt-benchmark-dataset-dir", "--dataset_dir"], [72, 4, 1, "cmdoption-tlt-benchmark-dataset-file", "--dataset_file"], [72, 4, 1, "cmdoption-tlt-benchmark-delimiter", "--delimiter"], [72, 4, 1, "cmdoption-tlt-benchmark-model-dir", "--model-dir"], [72, 4, 1, "cmdoption-tlt-benchmark-model-dir", "--model_dir"], [72, 4, 1, "cmdoption-tlt-benchmark-output-dir", "--output-dir"], [72, 4, 1, "cmdoption-tlt-benchmark-output-dir", "--output_dir"]], "tlt-eval": [[72, 4, 1, "cmdoption-tlt-eval-class-names", "--class-names"], [72, 4, 1, "cmdoption-tlt-eval-class-names", "--class_names"], [72, 4, 1, "cmdoption-tlt-eval-dataset-catalog", "--dataset-catalog"], [72, 4, 1, "cmdoption-tlt-eval-dataset-dir", "--dataset-dir"], [72, 4, 1, "cmdoption-tlt-eval-dataset-file", "--dataset-file"], [72, 4, 1, "cmdoption-tlt-eval-dataset-name", "--dataset-name"], [72, 4, 1, "cmdoption-tlt-eval-dataset-catalog", "--dataset_catalog"], [72, 4, 1, "cmdoption-tlt-eval-dataset-dir", "--dataset_dir"], [72, 4, 1, "cmdoption-tlt-eval-dataset-file", "--dataset_file"], [72, 4, 1, "cmdoption-tlt-eval-dataset-name", "--dataset_name"], [72, 4, 1, "cmdoption-tlt-eval-delimiter", "--delimiter"], [72, 4, 1, "cmdoption-tlt-eval-model-dir", "--model-dir"], [72, 4, 1, "cmdoption-tlt-eval-model-name", "--model-name"], [72, 4, 1, "cmdoption-tlt-eval-model-dir", "--model_dir"], [72, 4, 1, "cmdoption-tlt-eval-model-name", "--model_name"]], "tlt-list-models": [[72, 4, 1, "cmdoption-tlt-list-models-f", "--framework"], [72, 4, 1, "cmdoption-tlt-list-models-use-case", "--use-case"], [72, 4, 1, "cmdoption-tlt-list-models-use-case", "--use_case"], [72, 4, 1, "cmdoption-tlt-list-models-verbose", "--verbose"], [72, 4, 1, "cmdoption-tlt-list-models-f", "-f"]], "tlt-optimize": [[72, 4, 1, "cmdoption-tlt-optimize-model-dir", "--model-dir"], [72, 4, 1, "cmdoption-tlt-optimize-model-dir", "--model_dir"], [72, 4, 1, "cmdoption-tlt-optimize-output-dir", "--output-dir"], [72, 4, 1, "cmdoption-tlt-optimize-output-dir", "--output_dir"]], "tlt-quantize": [[72, 4, 1, "cmdoption-tlt-quantize-accuracy-criterion", "--accuracy-criterion"], [72, 4, 1, "cmdoption-tlt-quantize-accuracy-criterion", "--accuracy_criterion"], [72, 4, 1, "cmdoption-tlt-quantize-approach", "--approach"], [72, 4, 1, "cmdoption-tlt-quantize-batch-size", "--batch-size"], [72, 4, 1, "cmdoption-tlt-quantize-batch-size", "--batch_size"], [72, 4, 1, "cmdoption-tlt-quantize-dataset-dir", "--dataset-dir"], [72, 4, 1, "cmdoption-tlt-quantize-dataset-file", "--dataset-file"], [72, 4, 1, "cmdoption-tlt-quantize-dataset-dir", "--dataset_dir"], [72, 4, 1, "cmdoption-tlt-quantize-dataset-file", "--dataset_file"], [72, 4, 1, "cmdoption-tlt-quantize-delimiter", "--delimiter"], [72, 4, 1, "cmdoption-tlt-quantize-max-trials", "--max-trials"], [72, 4, 1, "cmdoption-tlt-quantize-max-trials", "--max_trials"], [72, 4, 1, "cmdoption-tlt-quantize-model-dir", "--model-dir"], [72, 4, 1, "cmdoption-tlt-quantize-model-dir", "--model_dir"], [72, 4, 1, "cmdoption-tlt-quantize-output-dir", "--output-dir"], [72, 4, 1, "cmdoption-tlt-quantize-output-dir", "--output_dir"], [72, 4, 1, "cmdoption-tlt-quantize-timeout", "--timeout"]], "tlt-train": [[72, 4, 1, "cmdoption-tlt-train-add-aug", "--add-aug"], [72, 4, 1, "cmdoption-tlt-train-add-aug", "--add_aug"], [72, 4, 1, "cmdoption-tlt-train-class-names", "--class-names"], [72, 4, 1, "cmdoption-tlt-train-class-names", "--class_names"], [72, 4, 1, "cmdoption-tlt-train-dataset-catalog", "--dataset-catalog"], [72, 4, 1, "cmdoption-tlt-train-dataset-dir", "--dataset-dir"], [72, 4, 1, "cmdoption-tlt-train-dataset-file", "--dataset-file"], [72, 4, 1, "cmdoption-tlt-train-dataset-name", "--dataset-name"], [72, 4, 1, "cmdoption-tlt-train-dataset-catalog", "--dataset_catalog"], [72, 4, 1, "cmdoption-tlt-train-dataset-dir", "--dataset_dir"], [72, 4, 1, "cmdoption-tlt-train-dataset-file", "--dataset_file"], [72, 4, 1, "cmdoption-tlt-train-dataset-name", "--dataset_name"], [72, 4, 1, "cmdoption-tlt-train-delimiter", "--delimiter"], [72, 4, 1, "cmdoption-tlt-train-d", "--distributed"], [72, 4, 1, "cmdoption-tlt-train-early-stopping", "--early-stopping"], [72, 4, 1, "cmdoption-tlt-train-early-stopping", "--early_stopping"], [72, 4, 1, "cmdoption-tlt-train-epochs", "--epochs"], [72, 4, 1, "cmdoption-tlt-train-f", "--framework"], [72, 4, 1, "cmdoption-tlt-train-hostfile", "--hostfile"], [72, 4, 1, "cmdoption-tlt-train-hvd-start-timeout", "--hvd-start-timeout"], [72, 4, 1, "cmdoption-tlt-train-hvd-start-timeout", "--hvd_start_timeout"], [72, 4, 1, "cmdoption-tlt-train-init-checkpoints", "--init-checkpoints"], [72, 4, 1, "cmdoption-tlt-train-init-checkpoints", "--init_checkpoints"], [72, 4, 1, "cmdoption-tlt-train-ipex_optimize", "--ipex-optimize"], [72, 4, 1, "cmdoption-tlt-train-ipex_optimize", "--ipex_optimize"], [72, 4, 1, "cmdoption-tlt-train-lr-decay", "--lr-decay"], [72, 4, 1, "cmdoption-tlt-train-lr-decay", "--lr_decay"], [72, 4, 1, "cmdoption-tlt-train-model-name", "--model-name"], [72, 4, 1, "cmdoption-tlt-train-model-name", "--model_name"], [72, 4, 1, "cmdoption-tlt-train-nnodes", "--nnodes"], [72, 4, 1, "cmdoption-tlt-train-nproc_per_node", "--nproc-per-node"], [72, 4, 1, "cmdoption-tlt-train-nproc_per_node", "--nproc_per_node"], [72, 4, 1, "cmdoption-tlt-train-output-dir", "--output-dir"], [72, 4, 1, "cmdoption-tlt-train-output-dir", "--output_dir"], [72, 4, 1, "cmdoption-tlt-train-use-horovod", "--use-horovod"], [72, 4, 1, "cmdoption-tlt-train-use-horovod", "--use_horovod"], [72, 4, 1, "cmdoption-tlt-train-d", "-d"], [72, 4, 1, "cmdoption-tlt-train-f", "-f"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:module", "3": "py:function", "4": "std:cmdoption"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "module", "Python module"], "3": ["py", "function", "Python function"], "4": ["std", "cmdoption", "program option"]}, "titleterms": {"dataset": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 71, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "get": [1, 76, 80, 82, 84, 86, 87, 88, 90, 91], "start": [1, 76, 80], "\u2460": 1, "check": [1, 89], "system": 1, "requir": [1, 86, 87, 88, 90, 91], "\u2461": 1, "instal": 1, "\u2462": 1, "run": [1, 92], "intel": [1, 3, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "transfer": [1, 3, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "learn": [1, 3, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "tool": [1, 3, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "us": [1, 77, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91], "No": 1, "code": 1, "cli": [1, 72, 76, 77, 78], "low": 1, "api": [1, 71, 82, 83, 84, 85, 87, 88, 89, 90, 91], "summari": 1, "next": [1, 85], "step": [1, 85], "legal": 2, "inform": [2, 85, 89], "disclaim": 2, "licens": 2, "support": [3, 80], "model": [3, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 82, 84, 85, 86, 87, 88, 89, 90, 91], "imag": [3, 71, 77, 81, 82, 84, 86, 87, 89, 90], "classif": [3, 71, 77, 78, 81, 82, 84, 85, 87, 88, 89, 90, 91], "text": [3, 71, 78, 81, 85, 88, 91], "anomali": [3, 86], "detect": [3, 86], "tlt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72], "basedataset": 4, "hf_dataset": 5, "hfdataset": 5, "image_classif": [6, 7, 8, 9, 10, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "image_classification_dataset": 6, "imageclassificationdataset": 6, "pytorch_custom_image_classification_dataset": 7, "pytorchcustomimageclassificationdataset": 7, "tf_custom_image_classification_dataset": 8, "tfcustomimageclassificationdataset": 8, "tfds_image_classification_dataset": 9, "tfdsimageclassificationdataset": 9, "torchvision_image_classification_dataset": 10, "torchvisionimageclassificationdataset": 10, "pytorch_dataset": 11, "pytorchdataset": 11, "text_classif": [12, 13, 14, 15, 16, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], "hf_custom_text_classification_dataset": 12, "hfcustomtextclassificationdataset": 12, "hf_text_classification_dataset": 13, "hftextclassificationdataset": 13, "text_classification_dataset": 14, "textclassificationdataset": 14, "tf_custom_text_classification_dataset": 15, "tfcustomtextclassificationdataset": 15, "tfds_text_classification_dataset": 16, "tfdstextclassificationdataset": 16, "tf_dataset": 17, "tfdataset": 17, "hf_model": 18, "hfmodel": 18, "image_classification_model": [19, 20, 21, 22], "imageclassificationmodel": [19, 20, 21, 22], "benchmark": [20, 24, 29, 33, 37, 42, 47, 53, 57, 61, 66, 72, 76], "quantiz": [21, 26, 30, 34, 39, 44, 48, 54, 58, 63, 68, 72, 76, 87, 88, 90, 91], "train": [22, 27, 31, 35, 40, 45, 49, 55, 59, 64, 69, 72, 73, 76, 85, 86, 87, 89, 90, 93], "keras_image_classification_model": [23, 24, 25, 26, 27], "kerasimageclassificationmodel": [23, 24, 25, 26, 27], "optimize_graph": [25, 38, 43, 62, 67], "pytorch_hub_image_classification_model": [28, 29, 30, 31], "pytorchhubimageclassificationmodel": [28, 29, 30, 31], "pytorch_image_classification_model": [32, 33, 34, 35], "pytorchimageclassificationmodel": [32, 33, 34, 35], "tf_image_classification_model": [36, 37, 38, 39, 40], "tfimageclassificationmodel": [36, 37, 38, 39, 40], "tfhub_image_classification_model": [41, 42, 43, 44, 45], "tfhubimageclassificationmodel": [41, 42, 43, 44, 45], "torchvision_image_classification_model": [46, 47, 48, 49], "torchvisionimageclassificationmodel": [46, 47, 48, 49], "basemodel": 50, "pytorch_model": 51, "pytorchmodel": 51, "pytorch_hf_text_classification_model": [52, 53, 54, 55], "pytorchhftextclassificationmodel": [52, 53, 54, 55], "text_classification_model": [56, 57, 58, 59], "textclassificationmodel": [56, 57, 58, 59], "tf_hf_text_classification_model": [60, 61, 62, 63, 64], "tfhftextclassificationmodel": [60, 61, 62, 63, 64], "tf_text_classification_model": [65, 66, 67, 68, 69], "tftextclassificationmodel": [65, 66, 67, 68, 69], "tf_model": 70, "tfmodel": 70, "refer": [71, 72], "factori": 71, "method": [71, 81, 86], "class": 71, "base": 71, "eval": 72, "list": [72, 76], "framework": [72, 89], "use_cas": 72, "optim": [72, 76, 89], "distribut": [73, 78, 93], "prerequisit": [73, 83, 93], "passwordless": [73, 93], "ssh": [73, 93], "setup": [73, 82, 84, 86, 87, 88, 90, 91, 92, 93], "build": 74, "document": 74, "sphinx": 74, "exampl": [75, 76, 77, 78, 79, 83], "beyond": 76, "avail": 76, "perform": [76, 83, 85, 89], "graph": 76, "additit": 76, "your": [77, 78, 87, 88, 90, 91], "own": [77, 78, 87, 88, 90, 91], "from": [77, 78, 86, 87, 90], "tfd": [77, 78], "catalog": [77, 78, 87, 88, 90, 91], "citat": [77, 78, 82, 84, 85, 86, 87, 88, 90, 91], "fine": [78, 85, 88, 91], "tune": [78, 85, 88, 91], "hug": [78, 85], "face": [78, 85], "what": 80, "i": 80, "how": 80, "work": 80, "medic": 82, "colorect": 82, "histologi": 82, "tensorflow": [82, 84, 89, 90, 91], "1": [82, 84, 85, 86, 87, 88, 89, 90, 91], "import": [82, 84, 86, 87, 88, 90, 91], "depend": [82, 84, 86, 87, 88, 90, 91], "paramet": [82, 84, 85, 86, 87, 88, 89, 90, 91], "2": [82, 84, 85, 86, 87, 88, 89, 90, 91], "option": [82, 84, 86, 87, 88, 90, 91], "A": [82, 84, 87, 88, 90, 91], "load": [82, 84, 86], "b": [82, 84, 87, 88, 90, 91], "pretrain": [82, 84], "checkpoint": [82, 84], "3": [82, 84, 85, 86, 87, 88, 89, 90, 91], "4": [82, 84, 85, 86, 87, 88, 89, 90, 91], "prepar": [82, 84, 86, 87, 88, 90, 91], "5": [82, 84, 86, 87, 88, 90, 91], "6": [82, 84, 86, 87, 88, 90, 91], "evalu": [82, 84, 85, 86, 89], "7": [82, 84, 86, 87, 88, 90, 91], "export": [82, 84, 86, 87, 88, 90, 91], "8": [82, 84, 86, 87, 88, 90, 91], "infer": [82, 84], "notebook": [83, 92], "tutori": 83, "end": 83, "pipelin": 83, "comparison": [83, 85, 89], "remot": 84, "sens": 84, "scene": 84, "resisc": 84, "displai": [85, 89], "platform": [85, 89], "select": [85, 89], "defin": [85, 89], "dure": [85, 89], "librari": [85, 89], "compar": [85, 89], "metric": 85, "pytorch": [86, 87, 88], "categori": 86, "folder": 86, "test": 86, "subfold": 86, "visual": 86, "sampl": 86, "argument": [86, 87, 88, 90, 91], "featur": 86, "extract": 86, "The": 86, "simsiam": 86, "twocroptransform": 86, "cut": 86, "past": 86, "transform": 86, "predict": [86, 87, 88, 89, 90, 91], "": 87, "torchvis": 87, "origin": [87, 90], "custom": [87, 90], "singl": [87, 90], "9": [87, 90], "post": [87, 90], "huggingfac": 88, "save": [88, 91], "time": 89, "tf": 89, "hub": 89, "valid": 89, "data": 89, "batch": 89, "neural": 89, "compressor": 89, "environ": 92, "set": 92, "up": 92}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Datasets": [[0, "datasets"], [2, "datasets"], [71, "datasets"]], "Get Started": [[1, "get-started"], [80, "get-started"]], "\u2460 Check System Requirements": [[1, "check-system-requirements"]], "\u2461 Install": [[1, "install"]], "\u2462 Run the Intel Transfer Learning Tool": [[1, "run-the-intel-transfer-learning-tool"]], "Run Using the No-Code CLI": [[1, "run-using-the-no-code-cli"]], "Run Using the Low-Code API": [[1, "run-using-the-low-code-api"]], "Summary and Next Steps": [[1, "summary-and-next-steps"]], "Legal Information": [[2, "legal-information"]], "Disclaimer": [[2, "disclaimer"]], "License": [[2, "license"]], "Intel\u00ae Transfer Learning Tool Supported Models": [[3, "intel-transfer-learning-tool-supported-models"]], "Image Classification": [[3, "image-classification"], [71, "image-classification"], [71, "id3"]], "Text Classification": [[3, "text-classification"], [71, "text-classification"], [71, "id4"]], "Image Anomaly Detection": [[3, "image-anomaly-detection"]], "tlt.datasets.dataset.BaseDataset": [[4, "tlt-datasets-dataset-basedataset"]], "tlt.datasets.hf_dataset.HFDataset": [[5, "tlt-datasets-hf-dataset-hfdataset"]], "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset": [[6, "tlt-datasets-image-classification-image-classification-dataset-imageclassificationdataset"]], "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset": [[7, "tlt-datasets-image-classification-pytorch-custom-image-classification-dataset-pytorchcustomimageclassificationdataset"]], "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset": [[8, "tlt-datasets-image-classification-tf-custom-image-classification-dataset-tfcustomimageclassificationdataset"]], "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset": [[9, "tlt-datasets-image-classification-tfds-image-classification-dataset-tfdsimageclassificationdataset"]], "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset": [[10, "tlt-datasets-image-classification-torchvision-image-classification-dataset-torchvisionimageclassificationdataset"]], "tlt.datasets.pytorch_dataset.PyTorchDataset": [[11, "tlt-datasets-pytorch-dataset-pytorchdataset"]], "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset": [[12, "tlt-datasets-text-classification-hf-custom-text-classification-dataset-hfcustomtextclassificationdataset"]], "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset": [[13, "tlt-datasets-text-classification-hf-text-classification-dataset-hftextclassificationdataset"]], "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset": [[14, "tlt-datasets-text-classification-text-classification-dataset-textclassificationdataset"]], "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset": [[15, "tlt-datasets-text-classification-tf-custom-text-classification-dataset-tfcustomtextclassificationdataset"]], "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset": [[16, "tlt-datasets-text-classification-tfds-text-classification-dataset-tfdstextclassificationdataset"]], "tlt.datasets.tf_dataset.TFDataset": [[17, "tlt-datasets-tf-dataset-tfdataset"]], "tlt.models.hf_model.HFModel": [[18, "tlt-models-hf-model-hfmodel"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel": [[19, "tlt-models-image-classification-image-classification-model-imageclassificationmodel"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel.benchmark": [[20, "tlt-models-image-classification-image-classification-model-imageclassificationmodel-benchmark"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize": [[21, "tlt-models-image-classification-image-classification-model-imageclassificationmodel-quantize"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel.train": [[22, "tlt-models-image-classification-image-classification-model-imageclassificationmodel-train"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel": [[23, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.benchmark": [[24, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel-benchmark"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.optimize_graph": [[25, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel-optimize-graph"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize": [[26, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel-quantize"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train": [[27, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel-train"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel": [[28, "tlt-models-image-classification-pytorch-hub-image-classification-model-pytorchhubimageclassificationmodel"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.benchmark": [[29, "tlt-models-image-classification-pytorch-hub-image-classification-model-pytorchhubimageclassificationmodel-benchmark"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize": [[30, "tlt-models-image-classification-pytorch-hub-image-classification-model-pytorchhubimageclassificationmodel-quantize"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train": [[31, "tlt-models-image-classification-pytorch-hub-image-classification-model-pytorchhubimageclassificationmodel-train"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel": [[32, "tlt-models-image-classification-pytorch-image-classification-model-pytorchimageclassificationmodel"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.benchmark": [[33, "tlt-models-image-classification-pytorch-image-classification-model-pytorchimageclassificationmodel-benchmark"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize": [[34, "tlt-models-image-classification-pytorch-image-classification-model-pytorchimageclassificationmodel-quantize"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train": [[35, "tlt-models-image-classification-pytorch-image-classification-model-pytorchimageclassificationmodel-train"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel": [[36, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.benchmark": [[37, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel-benchmark"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.optimize_graph": [[38, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel-optimize-graph"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize": [[39, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel-quantize"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train": [[40, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel-train"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel": [[41, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.benchmark": [[42, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel-benchmark"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.optimize_graph": [[43, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel-optimize-graph"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize": [[44, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel-quantize"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train": [[45, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel-train"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel": [[46, "tlt-models-image-classification-torchvision-image-classification-model-torchvisionimageclassificationmodel"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.benchmark": [[47, "tlt-models-image-classification-torchvision-image-classification-model-torchvisionimageclassificationmodel-benchmark"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize": [[48, "tlt-models-image-classification-torchvision-image-classification-model-torchvisionimageclassificationmodel-quantize"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train": [[49, "tlt-models-image-classification-torchvision-image-classification-model-torchvisionimageclassificationmodel-train"]], "tlt.models.model.BaseModel": [[50, "tlt-models-model-basemodel"]], "tlt.models.pytorch_model.PyTorchModel": [[51, "tlt-models-pytorch-model-pytorchmodel"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel": [[52, "tlt-models-text-classification-pytorch-hf-text-classification-model-pytorchhftextclassificationmodel"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.benchmark": [[53, "tlt-models-text-classification-pytorch-hf-text-classification-model-pytorchhftextclassificationmodel-benchmark"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize": [[54, "tlt-models-text-classification-pytorch-hf-text-classification-model-pytorchhftextclassificationmodel-quantize"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train": [[55, "tlt-models-text-classification-pytorch-hf-text-classification-model-pytorchhftextclassificationmodel-train"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel": [[56, "tlt-models-text-classification-text-classification-model-textclassificationmodel"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel.benchmark": [[57, "tlt-models-text-classification-text-classification-model-textclassificationmodel-benchmark"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize": [[58, "tlt-models-text-classification-text-classification-model-textclassificationmodel-quantize"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel.train": [[59, "tlt-models-text-classification-text-classification-model-textclassificationmodel-train"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel": [[60, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.benchmark": [[61, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel-benchmark"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.optimize_graph": [[62, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel-optimize-graph"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize": [[63, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel-quantize"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train": [[64, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel-train"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel": [[65, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.benchmark": [[66, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel-benchmark"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.optimize_graph": [[67, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel-optimize-graph"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize": [[68, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel-quantize"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train": [[69, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel-train"]], "tlt.models.tf_model.TFModel": [[70, "tlt-models-tf-model-tfmodel"]], "API Reference": [[71, "api-reference"]], "Factory Methods": [[71, "module-tlt.datasets.dataset_factory"], [71, "id1"]], "Class Reference": [[71, "class-reference"], [71, "id2"]], "Base Classes": [[71, "base-classes"], [71, "id5"]], "Models": [[71, "models"]], "CLI Reference": [[72, "cli-reference"]], "tlt": [[72, "tlt"]], "benchmark": [[72, "tlt-benchmark"]], "eval": [[72, "tlt-eval"]], "list": [[72, "tlt-list"]], "frameworks": [[72, "tlt-list-frameworks"]], "models": [[72, "tlt-list-models"]], "use_cases": [[72, "tlt-list-use-cases"]], "optimize": [[72, "tlt-optimize"]], "quantize": [[72, "tlt-quantize"]], "train": [[72, "tlt-train"]], "Distributed Training": [[73, "distributed-training"], [93, "distributed-training"]], "Prerequisites": [[73, "prerequisites"], [83, "prerequisites"], [93, "prerequisites"]], "Passwordless SSH setup": [[73, "passwordless-ssh-setup"], [93, "passwordless-ssh-setup"]], "Building Documentation": [[74, "building-documentation"]], "Sphinx Documentation": [[74, "sphinx-documentation"]], "Examples": [[75, "examples"], [79, "examples"]], "Beyond Get Started CLI Example": [[76, "beyond-get-started-cli-example"]], "List the Available Models": [[76, "list-the-available-models"]], "Train a Model": [[76, "train-a-model"]], "Benchmark the Trained Model": [[76, "benchmark-the-trained-model"]], "Quantize the Model": [[76, "quantize-the-model"]], "Benchmark the Quantized Model": [[76, "benchmark-the-quantized-model"]], "Perform Graph Optimization on the Trained Model": [[76, "perform-graph-optimization-on-the-trained-model"]], "Addititional CLI Examples": [[76, "addititional-cli-examples"]], "Image Classification Intel\u00ae Transfer Learning Tool CLI Example": [[77, "image-classification-intel-transfer-learning-tool-cli-example"]], "Transfer Learning Using your Own Dataset": [[77, "transfer-learning-using-your-own-dataset"]], "Transfer Learning Using a Dataset from the TFDS Catalog": [[77, "transfer-learning-using-a-dataset-from-the-tfds-catalog"]], "Citations": [[77, "citations"], [78, "citations"], [85, "Citations"], [88, "Citations"], [91, "Citations"]], "Text Classification Intel\u00ae Transfer Learning Tool CLI Example": [[78, "text-classification-intel-transfer-learning-tool-cli-example"]], "Fine Tuning Using Your Own Dataset": [[78, "fine-tuning-using-your-own-dataset"]], "Fine Tuning Using a Dataset from the TFDS Catalog": [[78, "fine-tuning-using-a-dataset-from-the-tfds-catalog"]], "Distributed Transfer Learning Using a Dataset from Hugging Face": [[78, "distributed-transfer-learning-using-a-dataset-from-hugging-face"]], "Intel\u00ae Transfer Learning Tool": [[80, "intel-transfer-learning-tool"]], "What is Intel\u00ae Transfer Learning Tool": [[80, "what-is-intel-transfer-learning-tool"]], "How the Intel Transfer Learning Tool Works": [[80, "how-the-intel-transfer-learning-tool-works"]], "Support": [[80, "support"]], "Image Classification Methods": [[81, "image-classification-methods"]], "Text Classification Methods": [[81, "text-classification-methods"]], "Medical Imaging Classification (Colorectal histology) using TensorFlow and the Intel\u00ae Transfer Learning Tool API": [[82, "Medical-Imaging-Classification-(Colorectal-histology)-using-TensorFlow-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "1. Import dependencies and setup parameters": [[82, "1.-Import-dependencies-and-setup-parameters"], [84, "1.-Import-dependencies-and-setup-parameters"], [86, "1.-Import-dependencies-and-setup-parameters"], [87, "1.-Import-dependencies-and-setup-parameters"], [88, "1.-Import-dependencies-and-setup-parameters"], [90, "1.-Import-dependencies-and-setup-parameters"], [91, "1.-Import-dependencies-and-setup-parameters"]], "2. Get the model": [[82, "2.-Get-the-model"], [84, "2.-Get-the-model"], [87, "2.-Get-the-model"], [88, "2.-Get-the-model"], [90, "2.-Get-the-model"], [91, "2.-Get-the-model"]], "Option A: Load a model": [[82, "Option-A:-Load-a-model"], [84, "Option-A:-Load-a-model"]], "Option B: Load a pretrained checkpoint": [[82, "Option-B:-Load-a-pretrained-checkpoint"], [84, "Option-B:-Load-a-pretrained-checkpoint"]], "3. Get the dataset": [[82, "3.-Get-the-dataset"], [84, "3.-Get-the-dataset"], [86, "3.-Get-the-dataset"], [87, "3.-Get-the-dataset"], [88, "3.-Get-the-dataset"], [90, "3.-Get-the-dataset"], [91, "3.-Get-the-dataset"]], "4. Prepare the dataset": [[82, "4.-Prepare-the-dataset"], [84, "4.-Prepare-the-dataset"], [86, "4.-Prepare-the-dataset"], [87, "4.-Prepare-the-dataset"], [88, "4.-Prepare-the-dataset"], [90, "4.-Prepare-the-dataset"], [91, "4.-Prepare-the-dataset"]], "5. Transfer Learning": [[82, "5.-Transfer-Learning"], [84, "5.-Transfer-Learning"]], "6. Evaluate": [[82, "6.-Evaluate"], [84, "6.-Evaluate"]], "7. Export": [[82, "7.-Export"], [84, "7.-Export"]], "8. Inference": [[82, "8.-Inference"], [84, "8.-Inference"]], "Dataset Citations": [[82, "Dataset-Citations"], [84, "Dataset-Citations"], [86, "Dataset-Citations"], [87, "Dataset-Citations"], [90, "Dataset-Citations"]], "Intel\u00ae Transfer Learning Tool API Notebook Examples": [[83, "intel-transfer-learning-tool-api-notebook-examples"]], "Intel Transfer Learning Tool API Tutorial Notebooks": [[83, "intel-transfer-learning-tool-api-tutorial-notebooks"]], "Intel Transfer Learning Tool API End-to-End Pipelines": [[83, "intel-transfer-learning-tool-api-end-to-end-pipelines"]], "Intel Transfer Learning Tool Performance Comparison": [[83, "intel-transfer-learning-tool-performance-comparison"]], "Remote Sensing Image Scene Classification (Resisc) using TensorFlow and the Intel\u00ae Transfer Learning Tool API": [[84, "Remote-Sensing-Image-Scene-Classification-(Resisc)-using-TensorFlow-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Performance Comparison: Text Classification Transfer Learning with Hugging Face* and the Intel\u00ae Transfer Learning Tool": [[85, "Performance-Comparison:-Text-Classification-Transfer-Learning-with-Hugging-Face*-and-the-Intel\u00ae-Transfer-Learning-Tool"]], "1. Display Platform Information": [[85, "1.-Display-Platform-Information"], [89, "1.-Display-Platform-Information"]], "2. Select a model and define parameters to use during training and evaluation": [[85, "2.-Select-a-model-and-define-parameters-to-use-during-training-and-evaluation"], [89, "2.-Select-a-model-and-define-parameters-to-use-during-training-and-evaluation"]], "Select a model": [[85, "Select-a-model"], [89, "Select-a-model"]], "Select a dataset": [[85, "Select-a-dataset"], [89, "Select-a-dataset"]], "Define parameters": [[85, "Define-parameters"], [89, "Define-parameters"]], "3. Train and evaluate the models": [[85, "3.-Train-and-evaluate-the-models"]], "Fine tuning using the Hugging Face libraries": [[85, "Fine-tuning-using-the-Hugging-Face-libraries"]], "Using the Intel Transfer Learning tool API": [[85, "Using-the-Intel-Transfer-Learning-tool-API"]], "4. Compare metrics": [[85, "4.-Compare-metrics"]], "Training metrics": [[85, "Training-metrics"]], "Evaluation Metrics": [[85, "Evaluation-Metrics"]], "Next Steps": [[85, "Next-Steps"]], "Image Anomaly Detection with PyTorch using Intel\u00ae Transfer Learning Tool": [[86, "Image-Anomaly-Detection-with-PyTorch-using-Intel\u00ae-Transfer-Learning-Tool"]], "2. Get or load the model": [[86, "2.-Get-or-load-the-model"]], "Method 1: Category Folders": [[86, "Method-1:-Category-Folders"]], "Method 2: Train & Test Folders with Category Subfolders": [[86, "Method-2:-Train-&-Test-Folders-with-Category-Subfolders"]], "5. Visualize samples from the dataset": [[86, "5.-Visualize-samples-from-the-dataset"]], "6. Training and Evaluation": [[86, "6.-Training-and-Evaluation"]], "Train Arguments": [[86, "Train-Arguments"]], "Required": [[86, "Required"], [87, "Required"], [88, "Required"], [90, "Required"], [91, "Required"]], "Optional": [[86, "Optional"], [87, "Optional"], [88, "Optional"], [90, "Optional"], [91, "Optional"]], "Feature Extraction": [[86, "Feature-Extraction"]], "Optional: The SimSiam TwoCropTransform": [[86, "Optional:-The-SimSiam-TwoCropTransform"]], "Optional: The Cut-paste Transforms": [[86, "Optional:-The-Cut-paste-Transforms"]], "7. Predict": [[86, "7.-Predict"], [87, "7.-Predict"], [90, "7.-Predict"]], "8. Export": [[86, "8.-Export"], [87, "8.-Export"], [90, "8.-Export"]], "Transfer Learning for Image Classification using PyTorch and the Intel\u00ae Transfer Learning Tool API": [[87, "Transfer-Learning-for-Image-Classification-using-PyTorch-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Option A: Use your own dataset": [[87, "Option-A:-Use-your-own-dataset"], [88, "Option-A:-Use-your-own-dataset"], [90, "Option-A:-Use-your-own-dataset"], [91, "Option-A:-Use-your-own-dataset"]], "Option B: Use a dataset from the PyTorch\u2019s Torchvision Datasets catalog": [[87, "Option-B:-Use-a-dataset-from-the-PyTorch's-Torchvision-Datasets-catalog"]], "5. Predict using the original model": [[87, "5.-Predict-using-the-original-model"], [90, "5.-Predict-using-the-original-model"]], "6. Transfer Learning": [[87, "6.-Transfer-Learning"], [90, "6.-Transfer-Learning"]], "Arguments": [[87, "Arguments"], [88, "Arguments"], [90, "Arguments"], [91, "Arguments"]], "Custom Single Image Prediction": [[87, "Custom-Single-Image-Prediction"], [90, "Custom-Single-Image-Prediction"]], "9. Post-training quantization": [[87, "9.-Post-training-quantization"], [90, "9.-Post-training-quantization"]], "Text Classification fine tuning using Pytorch and the Intel\u00ae Transfer Learning Tool API": [[88, "Text-Classification-fine-tuning-using-Pytorch-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Option B: Use the HuggingFace catalog": [[88, "Option-B:-Use-the-HuggingFace-catalog"]], "5. Fine tuning": [[88, "5.-Fine-tuning"], [91, "5.-Fine-tuning"]], "6. Predict": [[88, "6.-Predict"], [91, "6.-Predict"]], "Predict on Text": [[88, "Predict-on-Text"]], "7. Export the saved model": [[88, "7.-Export-the-saved-model"], [91, "7.-Export-the-saved-model"]], "8. Quantization": [[88, "8.-Quantization"], [91, "8.-Quantization"]], "Performance Comparison: Image Classification Transfer Learning with TensorFlow and the Intel\u00ae Transfer Learning Tool": [[89, "Performance-Comparison:-Image-Classification-Transfer-Learning-with-TensorFlow-and-the-Intel\u00ae-Transfer-Learning-Tool"]], "3. Compare the training time for transfer learning": [[89, "3.-Compare-the-training-time-for-transfer-learning"]], "Transfer learning using the TensorFlow framework and TF Hub libraries": [[89, "Transfer-learning-using-the-TensorFlow-framework-and-TF-Hub-libraries"]], "Transfer learning using the Intel Transfer Learning Tool API": [[89, "Transfer-learning-using-the-Intel-Transfer-Learning-Tool-API"]], "Optimize the model using the Intel Transfer Learning Tool API": [[89, "Optimize-the-model-using-the-Intel-Transfer-Learning-Tool-API"]], "Compare training times": [[89, "Compare-training-times"]], "4. Evaluate and predict": [[89, "4.-Evaluate-and-predict"]], "Evaluate the models using the validation data": [[89, "Evaluate-the-models-using-the-validation-data"]], "Predict using a batch of images": [[89, "Predict-using-a-batch-of-images"]], "Check performance using the Intel\u00ae Neural Compressor": [[89, "Check-performance-using-the-Intel\u00ae-Neural-Compressor"]], "Transfer Learning for Image Classification using TensorFlow and the Intel\u00ae Transfer Learning Tool API": [[90, "Transfer-Learning-for-Image-Classification-using-TensorFlow-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Option B: Use a dataset from the TensorFlow Datasets catalog": [[90, "Option-B:-Use-a-dataset-from-the-TensorFlow-Datasets-catalog"]], "Text Classification fine tuning using TensorFlow and the Intel\u00ae Transfer Learning Tool API": [[91, "Text-Classification-fine-tuning-using-TensorFlow-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Option B: Use the TensorFlow datasets catalog": [[91, "Option-B:-Use-the-TensorFlow-datasets-catalog"]], "Environment Setup and Running the Notebooks": [[92, "environment-setup-and-running-the-notebooks"]], "Set Up Notebook Environment": [[92, "set-up-notebook-environment"]]}, "indexentries": {"basedataset (class in tlt.datasets.dataset)": [[4, "tlt.datasets.dataset.BaseDataset"]], "__init__() (tlt.datasets.dataset.basedataset method)": [[4, "tlt.datasets.dataset.BaseDataset.__init__"]], "hfdataset (class in tlt.datasets.hf_dataset)": [[5, "tlt.datasets.hf_dataset.HFDataset"]], "__init__() (tlt.datasets.hf_dataset.hfdataset method)": [[5, "tlt.datasets.hf_dataset.HFDataset.__init__"]], "imageclassificationdataset (class in tlt.datasets.image_classification.image_classification_dataset)": [[6, "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.image_classification_dataset.imageclassificationdataset method)": [[6, "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset.__init__"]], "pytorchcustomimageclassificationdataset (class in tlt.datasets.image_classification.pytorch_custom_image_classification_dataset)": [[7, "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.pytorchcustomimageclassificationdataset method)": [[7, "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset.__init__"]], "tfcustomimageclassificationdataset (class in tlt.datasets.image_classification.tf_custom_image_classification_dataset)": [[8, "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.tf_custom_image_classification_dataset.tfcustomimageclassificationdataset method)": [[8, "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset.__init__"]], "tfdsimageclassificationdataset (class in tlt.datasets.image_classification.tfds_image_classification_dataset)": [[9, "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.tfds_image_classification_dataset.tfdsimageclassificationdataset method)": [[9, "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset.__init__"]], "torchvisionimageclassificationdataset (class in tlt.datasets.image_classification.torchvision_image_classification_dataset)": [[10, "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.torchvision_image_classification_dataset.torchvisionimageclassificationdataset method)": [[10, "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset.__init__"]], "pytorchdataset (class in tlt.datasets.pytorch_dataset)": [[11, "tlt.datasets.pytorch_dataset.PyTorchDataset"]], "__init__() (tlt.datasets.pytorch_dataset.pytorchdataset method)": [[11, "tlt.datasets.pytorch_dataset.PyTorchDataset.__init__"]], "hfcustomtextclassificationdataset (class in tlt.datasets.text_classification.hf_custom_text_classification_dataset)": [[12, "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.hf_custom_text_classification_dataset.hfcustomtextclassificationdataset method)": [[12, "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset.__init__"]], "hftextclassificationdataset (class in tlt.datasets.text_classification.hf_text_classification_dataset)": [[13, "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.hf_text_classification_dataset.hftextclassificationdataset method)": [[13, "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset.__init__"]], "textclassificationdataset (class in tlt.datasets.text_classification.text_classification_dataset)": [[14, "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.text_classification_dataset.textclassificationdataset method)": [[14, "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset.__init__"]], "tfcustomtextclassificationdataset (class in tlt.datasets.text_classification.tf_custom_text_classification_dataset)": [[15, "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.tf_custom_text_classification_dataset.tfcustomtextclassificationdataset method)": [[15, "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset.__init__"]], "tfdstextclassificationdataset (class in tlt.datasets.text_classification.tfds_text_classification_dataset)": [[16, "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.tfds_text_classification_dataset.tfdstextclassificationdataset method)": [[16, "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset.__init__"]], "tfdataset (class in tlt.datasets.tf_dataset)": [[17, "tlt.datasets.tf_dataset.TFDataset"]], "__init__() (tlt.datasets.tf_dataset.tfdataset method)": [[17, "tlt.datasets.tf_dataset.TFDataset.__init__"]], "hfmodel (class in tlt.models.hf_model)": [[18, "tlt.models.hf_model.HFModel"]], "__init__() (tlt.models.hf_model.hfmodel method)": [[18, "tlt.models.hf_model.HFModel.__init__"]], "imageclassificationmodel (class in tlt.models.image_classification.image_classification_model)": [[19, "tlt.models.image_classification.image_classification_model.ImageClassificationModel"]], "__init__() (tlt.models.image_classification.image_classification_model.imageclassificationmodel method)": [[19, "tlt.models.image_classification.image_classification_model.ImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.image_classification_model.imageclassificationmodel method)": [[20, "tlt.models.image_classification.image_classification_model.ImageClassificationModel.benchmark"]], "quantize() (tlt.models.image_classification.image_classification_model.imageclassificationmodel method)": [[21, "tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.image_classification_model.imageclassificationmodel method)": [[22, "tlt.models.image_classification.image_classification_model.ImageClassificationModel.train"]], "kerasimageclassificationmodel (class in tlt.models.image_classification.keras_image_classification_model)": [[23, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel"]], "__init__() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[23, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[24, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.benchmark"]], "optimize_graph() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[25, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.optimize_graph"]], "quantize() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[26, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[27, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train"]], "pytorchhubimageclassificationmodel (class in tlt.models.image_classification.pytorch_hub_image_classification_model)": [[28, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel"]], "__init__() (tlt.models.image_classification.pytorch_hub_image_classification_model.pytorchhubimageclassificationmodel method)": [[28, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.pytorch_hub_image_classification_model.pytorchhubimageclassificationmodel method)": [[29, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.benchmark"]], "quantize() (tlt.models.image_classification.pytorch_hub_image_classification_model.pytorchhubimageclassificationmodel method)": [[30, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.pytorch_hub_image_classification_model.pytorchhubimageclassificationmodel method)": [[31, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train"]], "pytorchimageclassificationmodel (class in tlt.models.image_classification.pytorch_image_classification_model)": [[32, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel"]], "__init__() (tlt.models.image_classification.pytorch_image_classification_model.pytorchimageclassificationmodel method)": [[32, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.pytorch_image_classification_model.pytorchimageclassificationmodel method)": [[33, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.benchmark"]], "quantize() (tlt.models.image_classification.pytorch_image_classification_model.pytorchimageclassificationmodel method)": [[34, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.pytorch_image_classification_model.pytorchimageclassificationmodel method)": [[35, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train"]], "tfimageclassificationmodel (class in tlt.models.image_classification.tf_image_classification_model)": [[36, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel"]], "__init__() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[36, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[37, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.benchmark"]], "optimize_graph() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[38, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.optimize_graph"]], "quantize() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[39, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[40, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train"]], "tfhubimageclassificationmodel (class in tlt.models.image_classification.tfhub_image_classification_model)": [[41, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel"]], "__init__() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[41, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[42, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.benchmark"]], "optimize_graph() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[43, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.optimize_graph"]], "quantize() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[44, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[45, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train"]], "torchvisionimageclassificationmodel (class in tlt.models.image_classification.torchvision_image_classification_model)": [[46, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel"]], "__init__() (tlt.models.image_classification.torchvision_image_classification_model.torchvisionimageclassificationmodel method)": [[46, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.torchvision_image_classification_model.torchvisionimageclassificationmodel method)": [[47, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.benchmark"]], "quantize() (tlt.models.image_classification.torchvision_image_classification_model.torchvisionimageclassificationmodel method)": [[48, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.torchvision_image_classification_model.torchvisionimageclassificationmodel method)": [[49, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train"]], "basemodel (class in tlt.models.model)": [[50, "tlt.models.model.BaseModel"]], "__init__() (tlt.models.model.basemodel method)": [[50, "tlt.models.model.BaseModel.__init__"]], "pytorchmodel (class in tlt.models.pytorch_model)": [[51, "tlt.models.pytorch_model.PyTorchModel"]], "__init__() (tlt.models.pytorch_model.pytorchmodel method)": [[51, "tlt.models.pytorch_model.PyTorchModel.__init__"]], "pytorchhftextclassificationmodel (class in tlt.models.text_classification.pytorch_hf_text_classification_model)": [[52, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel"]], "__init__() (tlt.models.text_classification.pytorch_hf_text_classification_model.pytorchhftextclassificationmodel method)": [[52, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.__init__"]], "benchmark() (tlt.models.text_classification.pytorch_hf_text_classification_model.pytorchhftextclassificationmodel method)": [[53, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.benchmark"]], "quantize() (tlt.models.text_classification.pytorch_hf_text_classification_model.pytorchhftextclassificationmodel method)": [[54, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize"]], "train() (tlt.models.text_classification.pytorch_hf_text_classification_model.pytorchhftextclassificationmodel method)": [[55, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train"]], "textclassificationmodel (class in tlt.models.text_classification.text_classification_model)": [[56, "tlt.models.text_classification.text_classification_model.TextClassificationModel"]], "__init__() (tlt.models.text_classification.text_classification_model.textclassificationmodel method)": [[56, "tlt.models.text_classification.text_classification_model.TextClassificationModel.__init__"]], "benchmark() (tlt.models.text_classification.text_classification_model.textclassificationmodel method)": [[57, "tlt.models.text_classification.text_classification_model.TextClassificationModel.benchmark"]], "quantize() (tlt.models.text_classification.text_classification_model.textclassificationmodel method)": [[58, "tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize"]], "train() (tlt.models.text_classification.text_classification_model.textclassificationmodel method)": [[59, "tlt.models.text_classification.text_classification_model.TextClassificationModel.train"]], "tfhftextclassificationmodel (class in tlt.models.text_classification.tf_hf_text_classification_model)": [[60, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel"]], "__init__() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[60, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.__init__"]], "benchmark() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[61, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.benchmark"]], "optimize_graph() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[62, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.optimize_graph"]], "quantize() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[63, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize"]], "train() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[64, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train"]], "tftextclassificationmodel (class in tlt.models.text_classification.tf_text_classification_model)": [[65, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel"]], "__init__() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[65, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.__init__"]], "benchmark() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[66, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.benchmark"]], "optimize_graph() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[67, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.optimize_graph"]], "quantize() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[68, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize"]], "train() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[69, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train"]], "tfmodel (class in tlt.models.tf_model)": [[70, "tlt.models.tf_model.TFModel"]], "__init__() (tlt.models.tf_model.tfmodel method)": [[70, "tlt.models.tf_model.TFModel.__init__"]], "get_dataset() (in module tlt.datasets.dataset_factory)": [[71, "tlt.datasets.dataset_factory.get_dataset"]], "get_model() (in module tlt.models.model_factory)": [[71, "tlt.models.model_factory.get_model"]], "get_supported_models() (in module tlt.models.model_factory)": [[71, "tlt.models.model_factory.get_supported_models"]], "load_dataset() (in module tlt.datasets.dataset_factory)": [[71, "tlt.datasets.dataset_factory.load_dataset"]], "load_model() (in module tlt.models.model_factory)": [[71, "tlt.models.model_factory.load_model"]], "module": [[71, "module-tlt.datasets.dataset_factory"], [71, "module-tlt.models.model_factory"]], "print_supported_models() (in module tlt.models.model_factory)": [[71, "tlt.models.model_factory.print_supported_models"]], "tlt.datasets.dataset_factory": [[71, "module-tlt.datasets.dataset_factory"]], "tlt.models.model_factory": [[71, "module-tlt.models.model_factory"]], "--accuracy-criterion": [[72, "cmdoption-tlt-quantize-accuracy-criterion"]], "--accuracy_criterion": [[72, "cmdoption-tlt-quantize-accuracy-criterion"]], "--add-aug": [[72, "cmdoption-tlt-train-add-aug"]], "--add_aug": [[72, "cmdoption-tlt-train-add-aug"]], "--approach": [[72, "cmdoption-tlt-quantize-approach"]], "--batch-size": [[72, "cmdoption-tlt-benchmark-batch-size"], [72, "cmdoption-tlt-quantize-batch-size"]], "--batch_size": [[72, "cmdoption-tlt-benchmark-batch-size"], [72, "cmdoption-tlt-quantize-batch-size"]], "--class-names": [[72, "cmdoption-tlt-eval-class-names"], [72, "cmdoption-tlt-train-class-names"]], "--class_names": [[72, "cmdoption-tlt-eval-class-names"], [72, "cmdoption-tlt-train-class-names"]], "--dataset-catalog": [[72, "cmdoption-tlt-eval-dataset-catalog"], [72, "cmdoption-tlt-train-dataset-catalog"]], "--dataset-dir": [[72, "cmdoption-tlt-benchmark-dataset-dir"], [72, "cmdoption-tlt-eval-dataset-dir"], [72, "cmdoption-tlt-quantize-dataset-dir"], [72, "cmdoption-tlt-train-dataset-dir"]], "--dataset-file": [[72, "cmdoption-tlt-benchmark-dataset-file"], [72, "cmdoption-tlt-eval-dataset-file"], [72, "cmdoption-tlt-quantize-dataset-file"], [72, "cmdoption-tlt-train-dataset-file"]], "--dataset-name": [[72, "cmdoption-tlt-eval-dataset-name"], [72, "cmdoption-tlt-train-dataset-name"]], "--dataset_catalog": [[72, "cmdoption-tlt-eval-dataset-catalog"], [72, "cmdoption-tlt-train-dataset-catalog"]], "--dataset_dir": [[72, "cmdoption-tlt-benchmark-dataset-dir"], [72, "cmdoption-tlt-eval-dataset-dir"], [72, "cmdoption-tlt-quantize-dataset-dir"], [72, "cmdoption-tlt-train-dataset-dir"]], "--dataset_file": [[72, "cmdoption-tlt-benchmark-dataset-file"], [72, "cmdoption-tlt-eval-dataset-file"], [72, "cmdoption-tlt-quantize-dataset-file"], [72, "cmdoption-tlt-train-dataset-file"]], "--dataset_name": [[72, "cmdoption-tlt-eval-dataset-name"], [72, "cmdoption-tlt-train-dataset-name"]], "--delimiter": [[72, "cmdoption-tlt-benchmark-delimiter"], [72, "cmdoption-tlt-eval-delimiter"], [72, "cmdoption-tlt-quantize-delimiter"], [72, "cmdoption-tlt-train-delimiter"]], "--distributed": [[72, "cmdoption-tlt-train-d"]], "--early-stopping": [[72, "cmdoption-tlt-train-early-stopping"]], "--early_stopping": [[72, "cmdoption-tlt-train-early-stopping"]], "--epochs": [[72, "cmdoption-tlt-train-epochs"]], "--framework": [[72, "cmdoption-tlt-list-models-f"], [72, "cmdoption-tlt-train-f"]], "--hostfile": [[72, "cmdoption-tlt-train-hostfile"]], "--hvd-start-timeout": [[72, "cmdoption-tlt-train-hvd-start-timeout"]], "--hvd_start_timeout": [[72, "cmdoption-tlt-train-hvd-start-timeout"]], "--init-checkpoints": [[72, "cmdoption-tlt-train-init-checkpoints"]], "--init_checkpoints": [[72, "cmdoption-tlt-train-init-checkpoints"]], "--ipex-optimize": [[72, "cmdoption-tlt-train-ipex_optimize"]], "--ipex_optimize": [[72, "cmdoption-tlt-train-ipex_optimize"]], "--lr-decay": [[72, "cmdoption-tlt-train-lr-decay"]], "--lr_decay": [[72, "cmdoption-tlt-train-lr-decay"]], "--max-trials": [[72, "cmdoption-tlt-quantize-max-trials"]], "--max_trials": [[72, "cmdoption-tlt-quantize-max-trials"]], "--model-dir": [[72, "cmdoption-tlt-benchmark-model-dir"], [72, "cmdoption-tlt-eval-model-dir"], [72, "cmdoption-tlt-optimize-model-dir"], [72, "cmdoption-tlt-quantize-model-dir"]], "--model-name": [[72, "cmdoption-tlt-eval-model-name"], [72, "cmdoption-tlt-train-model-name"]], "--model_dir": [[72, "cmdoption-tlt-benchmark-model-dir"], [72, "cmdoption-tlt-eval-model-dir"], [72, "cmdoption-tlt-optimize-model-dir"], [72, "cmdoption-tlt-quantize-model-dir"]], "--model_name": [[72, "cmdoption-tlt-eval-model-name"], [72, "cmdoption-tlt-train-model-name"]], "--nnodes": [[72, "cmdoption-tlt-train-nnodes"]], "--nproc-per-node": [[72, "cmdoption-tlt-train-nproc_per_node"]], "--nproc_per_node": [[72, "cmdoption-tlt-train-nproc_per_node"]], "--output-dir": [[72, "cmdoption-tlt-benchmark-output-dir"], [72, "cmdoption-tlt-optimize-output-dir"], [72, "cmdoption-tlt-quantize-output-dir"], [72, "cmdoption-tlt-train-output-dir"]], "--output_dir": [[72, "cmdoption-tlt-benchmark-output-dir"], [72, "cmdoption-tlt-optimize-output-dir"], [72, "cmdoption-tlt-quantize-output-dir"], [72, "cmdoption-tlt-train-output-dir"]], "--timeout": [[72, "cmdoption-tlt-quantize-timeout"]], "--use-case": [[72, "cmdoption-tlt-list-models-use-case"]], "--use-horovod": [[72, "cmdoption-tlt-train-use-horovod"]], "--use_case": [[72, "cmdoption-tlt-list-models-use-case"]], "--use_horovod": [[72, "cmdoption-tlt-train-use-horovod"]], "--verbose": [[72, "cmdoption-tlt-list-models-verbose"]], "-d": [[72, "cmdoption-tlt-train-d"]], "-f": [[72, "cmdoption-tlt-list-models-f"], [72, "cmdoption-tlt-train-f"]], "tlt-benchmark command line option": [[72, "cmdoption-tlt-benchmark-batch-size"], [72, "cmdoption-tlt-benchmark-dataset-dir"], [72, "cmdoption-tlt-benchmark-dataset-file"], [72, "cmdoption-tlt-benchmark-delimiter"], [72, "cmdoption-tlt-benchmark-model-dir"], [72, "cmdoption-tlt-benchmark-output-dir"]], "tlt-eval command line option": [[72, "cmdoption-tlt-eval-class-names"], [72, "cmdoption-tlt-eval-dataset-catalog"], [72, "cmdoption-tlt-eval-dataset-dir"], [72, "cmdoption-tlt-eval-dataset-file"], [72, "cmdoption-tlt-eval-dataset-name"], [72, "cmdoption-tlt-eval-delimiter"], [72, "cmdoption-tlt-eval-model-dir"], [72, "cmdoption-tlt-eval-model-name"]], "tlt-list-models command line option": [[72, "cmdoption-tlt-list-models-f"], [72, "cmdoption-tlt-list-models-use-case"], [72, "cmdoption-tlt-list-models-verbose"]], "tlt-optimize command line option": [[72, "cmdoption-tlt-optimize-model-dir"], [72, "cmdoption-tlt-optimize-output-dir"]], "tlt-quantize command line option": [[72, "cmdoption-tlt-quantize-accuracy-criterion"], [72, "cmdoption-tlt-quantize-approach"], [72, "cmdoption-tlt-quantize-batch-size"], [72, "cmdoption-tlt-quantize-dataset-dir"], [72, "cmdoption-tlt-quantize-dataset-file"], [72, "cmdoption-tlt-quantize-delimiter"], [72, "cmdoption-tlt-quantize-max-trials"], [72, "cmdoption-tlt-quantize-model-dir"], [72, "cmdoption-tlt-quantize-output-dir"], [72, "cmdoption-tlt-quantize-timeout"]], "tlt-train command line option": [[72, "cmdoption-tlt-train-add-aug"], [72, "cmdoption-tlt-train-class-names"], [72, "cmdoption-tlt-train-d"], [72, "cmdoption-tlt-train-dataset-catalog"], [72, "cmdoption-tlt-train-dataset-dir"], [72, "cmdoption-tlt-train-dataset-file"], [72, "cmdoption-tlt-train-dataset-name"], [72, "cmdoption-tlt-train-delimiter"], [72, "cmdoption-tlt-train-early-stopping"], [72, "cmdoption-tlt-train-epochs"], [72, "cmdoption-tlt-train-f"], [72, "cmdoption-tlt-train-hostfile"], [72, "cmdoption-tlt-train-hvd-start-timeout"], [72, "cmdoption-tlt-train-init-checkpoints"], [72, "cmdoption-tlt-train-ipex_optimize"], [72, "cmdoption-tlt-train-lr-decay"], [72, "cmdoption-tlt-train-model-name"], [72, "cmdoption-tlt-train-nnodes"], [72, "cmdoption-tlt-train-nproc_per_node"], [72, "cmdoption-tlt-train-output-dir"], [72, "cmdoption-tlt-train-use-horovod"]]}})