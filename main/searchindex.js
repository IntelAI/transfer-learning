Search.setIndex({"docnames": ["DATASETS", "GetStarted", "Legal", "Models", "_autosummary/tlt.datasets.dataset.BaseDataset", "_autosummary/tlt.datasets.hf_dataset.HFDataset", "_autosummary/tlt.datasets.image_anomaly_detection.pytorch_custom_image_anomaly_detection_dataset.PyTorchCustomImageAnomalyDetectionDataset", "_autosummary/tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset", "_autosummary/tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset", "_autosummary/tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset", "_autosummary/tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset", "_autosummary/tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset", "_autosummary/tlt.datasets.pytorch_dataset.PyTorchDataset", "_autosummary/tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset", "_autosummary/tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset", "_autosummary/tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset", "_autosummary/tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset", "_autosummary/tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset", "_autosummary/tlt.datasets.text_generation.hf_custom_text_generation_dataset.HFCustomTextGenerationDataset", "_autosummary/tlt.datasets.text_generation.text_generation_dataset.TextGenerationDataset", "_autosummary/tlt.datasets.tf_dataset.TFDataset", "_autosummary/tlt.models.hf_model.HFModel", "_autosummary/tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel", "_autosummary/tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel.benchmark", "_autosummary/tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel.quantize", "_autosummary/tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel.train", "_autosummary/tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel", "_autosummary/tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel.benchmark", "_autosummary/tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel.quantize", "_autosummary/tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel.train", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.train", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.optimize_graph", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.optimize_graph", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.optimize_graph", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.benchmark", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train", "_autosummary/tlt.models.model.BaseModel", "_autosummary/tlt.models.pytorch_model.PyTorchModel", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.benchmark", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.benchmark", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.train", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.benchmark", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.optimize_graph", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.benchmark", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.optimize_graph", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train", "_autosummary/tlt.models.text_generation.pytorch_hf_text_generation_model.PyTorchHFTextGenerationModel", "_autosummary/tlt.models.text_generation.pytorch_hf_text_generation_model.PyTorchHFTextGenerationModel.train", "_autosummary/tlt.models.text_generation.text_generation_model.TextGenerationModel", "_autosummary/tlt.models.text_generation.text_generation_model.TextGenerationModel.train", "_autosummary/tlt.models.tf_model.TFModel", "api", "cli", "distributed", "docbuild", "examples/README", "examples/cli/README", "examples/cli/image_anomaly_detection", "examples/cli/image_classification", "examples/cli/text_classification", "examples/examples", "index", "methods", "notebooks/Medical_Imaging_Classification", "notebooks/README", "notebooks/Remote_Sensing_Image_Scene_Classification", "notebooks/TLT_HF_Text_Classification_Performance", "notebooks/TLT_PyTorch_Anomly_Detection", "notebooks/TLT_PyTorch_Image_Classification_Transfer_Learning", "notebooks/TLT_PyTorch_Text_Classification_Transfer_Learning", "notebooks/TLT_TF_Image_Classification_Performance", "notebooks/TLT_TF_Image_Classification_Transfer_Learning", "notebooks/TLT_TF_Text_Classification_Transfer_Learning", "notebooks/setup", "tlt/distributed/README"], "filenames": ["DATASETS.rst", "GetStarted.rst", "Legal.rst", "Models.rst", "_autosummary/tlt.datasets.dataset.BaseDataset.rst", "_autosummary/tlt.datasets.hf_dataset.HFDataset.rst", "_autosummary/tlt.datasets.image_anomaly_detection.pytorch_custom_image_anomaly_detection_dataset.PyTorchCustomImageAnomalyDetectionDataset.rst", "_autosummary/tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset.rst", "_autosummary/tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset.rst", "_autosummary/tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset.rst", "_autosummary/tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset.rst", "_autosummary/tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset.rst", "_autosummary/tlt.datasets.pytorch_dataset.PyTorchDataset.rst", "_autosummary/tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset.rst", "_autosummary/tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset.rst", "_autosummary/tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset.rst", "_autosummary/tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset.rst", "_autosummary/tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset.rst", "_autosummary/tlt.datasets.text_generation.hf_custom_text_generation_dataset.HFCustomTextGenerationDataset.rst", "_autosummary/tlt.datasets.text_generation.text_generation_dataset.TextGenerationDataset.rst", "_autosummary/tlt.datasets.tf_dataset.TFDataset.rst", "_autosummary/tlt.models.hf_model.HFModel.rst", "_autosummary/tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel.rst", "_autosummary/tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel.benchmark.rst", "_autosummary/tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel.quantize.rst", "_autosummary/tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel.train.rst", "_autosummary/tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel.rst", "_autosummary/tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel.benchmark.rst", "_autosummary/tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel.quantize.rst", "_autosummary/tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel.train.rst", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.image_classification_model.ImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.optimize_graph.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.optimize_graph.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.optimize_graph.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train.rst", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.rst", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.benchmark.rst", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize.rst", "_autosummary/tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train.rst", "_autosummary/tlt.models.model.BaseModel.rst", "_autosummary/tlt.models.pytorch_model.PyTorchModel.rst", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.rst", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.benchmark.rst", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize.rst", "_autosummary/tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train.rst", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.rst", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.benchmark.rst", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize.rst", "_autosummary/tlt.models.text_classification.text_classification_model.TextClassificationModel.train.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.benchmark.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.optimize_graph.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize.rst", "_autosummary/tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.benchmark.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.optimize_graph.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize.rst", "_autosummary/tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train.rst", "_autosummary/tlt.models.text_generation.pytorch_hf_text_generation_model.PyTorchHFTextGenerationModel.rst", "_autosummary/tlt.models.text_generation.pytorch_hf_text_generation_model.PyTorchHFTextGenerationModel.train.rst", "_autosummary/tlt.models.text_generation.text_generation_model.TextGenerationModel.rst", "_autosummary/tlt.models.text_generation.text_generation_model.TextGenerationModel.train.rst", "_autosummary/tlt.models.tf_model.TFModel.rst", "api.rst", "cli.rst", "distributed.rst", "docbuild.rst", "examples/README.rst", "examples/cli/README.rst", "examples/cli/image_anomaly_detection.rst", "examples/cli/image_classification.rst", "examples/cli/text_classification.rst", "examples/examples.rst", "index.rst", "methods.rst", "notebooks/Medical_Imaging_Classification.nblink", "notebooks/README.rst", "notebooks/Remote_Sensing_Image_Scene_Classification.nblink", "notebooks/TLT_HF_Text_Classification_Performance.nblink", "notebooks/TLT_PyTorch_Anomly_Detection.nblink", "notebooks/TLT_PyTorch_Image_Classification_Transfer_Learning.nblink", "notebooks/TLT_PyTorch_Text_Classification_Transfer_Learning.nblink", "notebooks/TLT_TF_Image_Classification_Performance.nblink", "notebooks/TLT_TF_Image_Classification_Transfer_Learning.nblink", "notebooks/TLT_TF_Text_Classification_Transfer_Learning.nblink", "notebooks/setup.rst", "tlt/distributed/README.rst"], "titles": ["Datasets", "Get Started", "Legal Information", "Intel\u00ae Transfer Learning Tool Supported Models", "tlt.datasets.dataset.BaseDataset", "tlt.datasets.hf_dataset.HFDataset", "tlt.datasets.image_anomaly_detection.pytorch_custom_image_anomaly_detection_dataset.PyTorchCustomImageAnomalyDetectionDataset", "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset", "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset", "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset", "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset", "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset", "tlt.datasets.pytorch_dataset.PyTorchDataset", "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset", "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset", "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset", "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset", "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset", "tlt.datasets.text_generation.hf_custom_text_generation_dataset.HFCustomTextGenerationDataset", "tlt.datasets.text_generation.text_generation_dataset.TextGenerationDataset", "tlt.datasets.tf_dataset.TFDataset", "tlt.models.hf_model.HFModel", "tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel", "tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel.benchmark", "tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel.quantize", "tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel.train", "tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel", "tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel.benchmark", "tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel.quantize", "tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel.train", "tlt.models.image_classification.image_classification_model.ImageClassificationModel", "tlt.models.image_classification.image_classification_model.ImageClassificationModel.benchmark", "tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize", "tlt.models.image_classification.image_classification_model.ImageClassificationModel.train", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.benchmark", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.optimize_graph", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize", "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train", "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel", "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.benchmark", "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize", "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train", "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel", "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.benchmark", "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize", "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.benchmark", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.optimize_graph", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize", "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.benchmark", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.optimize_graph", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize", "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train", "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel", "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.benchmark", "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize", "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train", "tlt.models.model.BaseModel", "tlt.models.pytorch_model.PyTorchModel", "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel", "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.benchmark", "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize", "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train", "tlt.models.text_classification.text_classification_model.TextClassificationModel", "tlt.models.text_classification.text_classification_model.TextClassificationModel.benchmark", "tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize", "tlt.models.text_classification.text_classification_model.TextClassificationModel.train", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.benchmark", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.optimize_graph", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize", "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.benchmark", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.optimize_graph", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize", "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train", "tlt.models.text_generation.pytorch_hf_text_generation_model.PyTorchHFTextGenerationModel", "tlt.models.text_generation.pytorch_hf_text_generation_model.PyTorchHFTextGenerationModel.train", "tlt.models.text_generation.text_generation_model.TextGenerationModel", "tlt.models.text_generation.text_generation_model.TextGenerationModel.train", "tlt.models.tf_model.TFModel", "API Reference", "CLI Reference", "Distributed Training", "Building Documentation", "Examples", "Beyond Get Started CLI Example", "Image Anomaly Detection Intel\u00ae Transfer Learning Tool CLI Example", "Image Classification Intel\u00ae Transfer Learning Tool CLI Example", "Text Classification Intel\u00ae Transfer Learning Tool CLI Example", "Examples", "Intel\u00ae Transfer Learning Tool", "Image Classification Methods", "Medical Imaging Classification (Colorectal histology) using TensorFlow and the Intel\u00ae Transfer Learning Tool API", "Intel\u00ae Transfer Learning Tool API Notebook Examples", "Remote Sensing Image Scene Classification (Resisc) using TensorFlow and the Intel\u00ae Transfer Learning Tool API", "Performance Comparison: Text Classification Transfer Learning with Hugging Face* and the Intel\u00ae Transfer Learning Tool", "Image Anomaly Detection with PyTorch using Intel\u00ae Transfer Learning Tool", "Transfer Learning for Image Classification using PyTorch and the Intel\u00ae Transfer Learning Tool API", "Text Classification fine tuning using Pytorch and the Intel\u00ae Transfer Learning Tool API", "Performance Comparison: Image Classification Transfer Learning with TensorFlow and the Intel\u00ae Transfer Learning Tool", "Transfer Learning for Image Classification using TensorFlow and the Intel\u00ae Transfer Learning Tool API", "Text Classification fine tuning using TensorFlow and the Intel\u00ae Transfer Learning Tool API", "Environment Setup and Running the Notebooks", "Distributed Training"], "terms": {"thi": [0, 1, 2, 13, 16, 18, 38, 42, 56, 60, 66, 75, 82, 87, 88, 89, 91, 92, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "i": [0, 1, 2, 6, 8, 9, 13, 16, 18, 23, 24, 25, 27, 28, 29, 31, 32, 35, 37, 38, 40, 41, 42, 44, 45, 46, 48, 50, 51, 53, 55, 56, 58, 59, 60, 64, 65, 66, 68, 69, 72, 74, 75, 77, 79, 80, 82, 86, 87, 88, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "comprehens": [0, 92, 102], "list": [0, 1, 6, 13, 16, 38, 42, 51, 56, 60, 66, 75, 86, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108], "public": [0, 88, 94, 96, 102, 103, 104, 106, 107, 109], "us": [0, 2, 4, 6, 8, 9, 13, 16, 18, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 90, 91, 95, 96, 99, 108, 109], "repositori": [0, 1, 94, 104, 107], "name": [0, 1, 2, 3, 6, 8, 9, 13, 16, 18, 25, 29, 42, 46, 60, 66, 86, 87, 88, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109], "link": [0, 96, 98, 99, 100, 104], "sourc": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 30, 34, 39, 43, 46, 47, 51, 52, 56, 57, 60, 61, 62, 63, 66, 67, 71, 75, 76, 80, 81, 82, 83, 85, 86, 89, 96], "framework": [0, 1, 3, 21, 30, 61, 62, 67, 83, 85, 86, 91, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108], "case": [0, 1, 3, 86, 87, 91, 92, 96, 99, 101, 103, 104, 106, 107], "ag": 0, "new": [0, 25, 29, 87, 88, 91, 92, 93, 94, 96, 98, 100, 103, 104, 105, 106, 107, 109], "hug": [0, 3, 5, 14, 21, 63, 66, 71, 81, 82, 86, 90, 95, 96, 99, 104, 107], "face": [0, 3, 5, 14, 21, 63, 66, 71, 81, 82, 86, 90, 95, 96, 99, 104, 107], "pytorch": [0, 1, 3, 6, 8, 12, 22, 25, 29, 39, 42, 43, 46, 60, 62, 63, 66, 81, 82, 86, 87, 90, 91, 92, 94, 95, 96, 99, 101, 105], "text": [0, 13, 14, 15, 16, 17, 18, 19, 63, 66, 67, 71, 75, 76, 80, 81, 82, 83, 87, 90, 91, 95, 96, 99, 103, 105], "classif": [0, 1, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 22, 30, 34, 38, 39, 42, 43, 46, 47, 51, 52, 56, 57, 60, 63, 66, 67, 71, 75, 76, 80, 87, 90, 91, 95, 96, 99], "tfd": [0, 107], "tensorflow": [0, 1, 3, 9, 10, 16, 17, 71, 86, 87, 91, 93, 94, 96, 99, 103], "food101": [0, 1, 103], "torchvis": [0, 1, 3, 11, 26, 42, 46, 57, 60, 86, 87, 96, 102], "imag": [0, 1, 6, 7, 8, 9, 10, 11, 22, 25, 29, 30, 34, 38, 39, 42, 43, 46, 47, 51, 52, 56, 57, 60, 87, 90, 91, 95, 96, 99, 107], "sm": [0, 94, 104, 107], "spam": [0, 94, 104, 107], "collect": [0, 94, 98, 104, 105, 107], "tf": [0, 16, 20, 38, 47, 52, 56, 76, 85, 86, 98, 100, 106, 107], "flower": [0, 1, 91, 93, 103, 105, 106], "cat": 0, "v": [0, 105], "dog": 0, "country211": [0, 103], "dtd": [0, 103], "fgvcaircraft": [0, 103], "renderedsst2": [0, 1, 103], "rock": 0, "paper": 0, "scissor": 0, "rotten_tomato": [0, 94, 104], "tweetev": 0, "cifar10": [0, 103], "imdb": [0, 94, 101, 104], "review": 0, "glue": [0, 94, 107], "sst2": [0, 94, 104, 107], "cola": [0, 94, 107], "colorect": [0, 99], "histologi": [0, 99], "resisc45": [0, 100], "cdd": 0, "cesm": 0, "squad": 0, "mvtec": [0, 92, 102], "anomali": [0, 6, 25, 26, 29, 87, 90, 91, 95, 96, 99], "detect": [0, 6, 25, 26, 29, 42, 46, 60, 87, 90, 91, 95, 96, 99, 103], "code": [0, 2, 6, 89, 90, 95, 96, 105], "alpaca": 0, "gener": [0, 18, 19, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 81, 82, 83, 89, 90, 91, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107], "dolli": 0, "15k": 0, "financ": 0, "huggingfac": [0, 86, 87, 101], "medic": [0, 99], "meadow": 0, "redpajama": 0, "data": [0, 1, 2, 6, 8, 9, 13, 16, 18, 24, 28, 32, 37, 38, 41, 45, 50, 51, 55, 56, 59, 65, 69, 74, 75, 79, 80, 86, 87, 92, 93, 94, 96, 98, 100, 101, 102, 103, 104, 106, 107], "guid": [1, 89, 91, 96, 108], "walk": [1, 91, 96], "you": [1, 2, 13, 86, 88, 89, 91, 92, 94, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109], "through": [1, 91, 96, 101, 103, 105], "coupl": [1, 96], "exampl": [1, 2, 6, 13, 16, 18, 23, 27, 31, 35, 38, 40, 42, 44, 48, 53, 56, 58, 60, 64, 66, 68, 72, 75, 77, 86, 87, 89, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107], "show": [1, 86, 92, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107], "approach": [1, 87, 96, 103], "flow": [1, 91, 96], "recommend": [1, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 87, 98, 100, 101, 102, 103, 104, 105, 106, 107], "hardwar": [1, 25, 29, 42, 46, 60, 96, 102, 103, 104, 106], "precis": [1, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 91, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107], "4th": 1, "gen": 1, "xeon": [1, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 98, 100, 101, 102, 104, 106, 107], "scalabl": 1, "perform": [1, 2, 23, 24, 25, 27, 28, 29, 31, 32, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 64, 65, 66, 68, 69, 72, 73, 74, 75, 77, 78, 79, 80, 82, 87, 96, 98, 100, 102, 103, 104, 106, 107, 108], "processor": [1, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 98, 100, 101, 102, 104, 106, 107], "bf16": [1, 101], "1st": 1, "2nd": 1, "3rd": 1, "fp32": [1, 36, 49, 54, 73, 78, 91, 96], "resourc": [1, 96], "minimum": 1, "cpu": [1, 23, 25, 27, 29, 31, 35, 40, 42, 44, 46, 48, 53, 58, 60, 64, 66, 68, 72, 77, 82, 96, 101, 102, 103, 105], "core": [1, 23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77, 101, 105], "8": [1, 3, 82, 87, 108], "16": [1, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 98, 100, 101, 102, 103, 104, 106, 107], "ram": 1, "gb": [1, 101, 105], "24": [1, 91, 105], "32": [1, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 87, 98, 100, 101, 102, 103, 104, 106, 107], "disk": [1, 102, 104, 107], "space": [1, 88, 109], "10": [1, 23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77, 87, 91, 92, 98, 100, 101, 102, 103, 104, 105, 107, 108], "can": [1, 6, 8, 9, 13, 16, 18, 23, 25, 27, 29, 31, 35, 38, 40, 42, 44, 46, 48, 51, 53, 56, 58, 60, 61, 63, 64, 66, 68, 71, 72, 75, 76, 77, 80, 81, 82, 86, 87, 89, 91, 92, 93, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108], "vari": [1, 92, 93, 94], "base": [1, 3, 4, 5, 7, 12, 15, 19, 20, 21, 30, 38, 42, 46, 56, 60, 61, 62, 66, 75, 85, 88, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109], "dataset": [1, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 37, 38, 40, 41, 42, 44, 45, 46, 48, 50, 51, 53, 55, 56, 58, 59, 60, 64, 65, 66, 68, 69, 70, 72, 74, 75, 77, 79, 80, 82, 84, 87, 91, 96, 108], "download": [1, 11, 66, 82, 86, 87, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108], "softwar": [1, 2, 102, 103, 108], "linux": [1, 108], "valid": [1, 6, 8, 9, 18, 23, 24, 27, 28, 31, 32, 35, 37, 38, 40, 41, 42, 44, 45, 46, 48, 50, 51, 53, 55, 56, 58, 59, 60, 64, 65, 66, 68, 69, 72, 74, 75, 77, 79, 80, 82, 86, 87, 96, 98, 100, 101, 102, 103, 104, 106, 107, 108], "ubuntu": [1, 108], "20": [1, 25, 29, 101, 102, 103, 105, 106, 108], "04": [1, 108], "22": [1, 91, 108], "lt": [1, 108], "python": [1, 89, 90, 95, 96, 101, 105], "3": [1, 86, 91, 108], "9": [1, 108], "pip": [1, 89, 103, 108], "conda": [1, 108], "virtualenv": [1, 89, 108], "git": [1, 108], "onli": [1, 2, 6, 8, 9, 25, 29, 36, 49, 54, 73, 78, 86, 87, 88, 94, 98, 100, 101, 102, 103, 105, 108, 109], "advanc": 1, "depend": [1, 86, 89, 94, 99, 108], "packag": [1, 94], "sudo": [1, 89], "apt": [1, 89], "build": [1, 87], "essenti": [1, 96], "python3": [1, 89, 108], "dev": 1, "libgl1": 1, "libglib2": 1, "0": [1, 2, 8, 11, 13, 14, 18, 25, 29, 82, 87, 89, 91, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107], "creat": [1, 2, 86, 87, 88, 91, 92, 93, 94, 96, 98, 100, 103, 104, 105, 106, 107, 109], "activ": [1, 42, 46, 60, 86, 89, 108], "virtual": 1, "environ": [1, 87, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107], "we": [1, 25, 29, 91, 98, 100, 101, 102, 103, 104, 105, 106, 107], "encourag": 1, "consist": [1, 101, 105], "manag": [1, 90, 95], "There": [1, 102], "ar": [1, 2, 6, 8, 9, 13, 18, 25, 29, 36, 38, 42, 46, 49, 51, 54, 56, 60, 73, 75, 78, 80, 86, 87, 88, 90, 91, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "two": [1, 6, 13, 16, 38, 42, 56, 60, 66, 75, 86, 88, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109], "wai": [1, 6, 86, 92, 101, 102, 105], "do": [1, 2, 88, 101, 102, 103, 105, 106, 109], "p": [1, 87, 88, 91, 92, 93, 94, 101, 102, 108, 109], "tlt_dev_venv": [1, 89], "bin": [1, 89], "Or": [1, 86, 92], "basic": 1, "instruct": [1, 18, 87, 88, 94, 96, 99, 102, 103, 104, 106, 107, 108, 109], "unless": [1, 102], "plan": 1, "make": [1, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 88, 89, 91, 94, 96, 98, 100, 102, 104, 106, 107, 109], "chang": [1, 88, 101, 102, 103, 106, 109], "latest": [1, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 87, 98, 100, 103, 104, 106, 107], "from": [1, 10, 11, 13, 14, 16, 17, 18, 23, 27, 31, 35, 38, 40, 42, 44, 46, 48, 51, 53, 56, 58, 60, 64, 68, 71, 72, 75, 77, 80, 86, 87, 89, 91, 92, 96, 98, 100, 101, 104, 105, 107, 108], "pleas": [1, 89, 102, 103, 104, 105, 107], "note": [1, 6, 8, 9, 13, 16, 18, 88, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109], "mix": [1, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 91, 96, 98, 100, 101, 102, 104, 106, 107], "option": [1, 6, 8, 9, 13, 16, 18, 23, 24, 25, 27, 28, 29, 31, 32, 35, 37, 38, 40, 41, 42, 44, 45, 46, 48, 50, 51, 53, 55, 56, 58, 59, 60, 64, 65, 66, 68, 69, 72, 74, 75, 77, 79, 80, 82, 86, 87, 105, 108], "within": [1, 89, 102, 103, 104, 106], "same": [1, 91, 98, 100, 101, 102, 103, 105, 106], "support": [1, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 86, 87, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107], "clone": [1, 108], "repo": [1, 108], "http": [1, 2, 89, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108], "github": [1, 96, 103, 106, 108], "com": [1, 91, 92, 93, 100, 102, 103, 105, 106, 108], "intelai": [1, 108], "cd": [1, 88, 108, 109], "Then": [1, 103, 106], "either": [1, 6, 86, 89, 92, 94, 96, 101, 104, 107], "an": [1, 2, 7, 10, 11, 13, 38, 51, 56, 86, 87, 88, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "edit": [1, 88, 109], "avoid": [1, 2], "rebuild": 1, "after": [1, 87, 91, 92, 93, 94, 96, 101, 102, 103, 105, 106, 107], "each": [1, 6, 8, 9, 13, 16, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 86, 87, 91, 92, 93, 94, 98, 100, 101, 103, 104, 105, 106, 107], "prefer": 1, "wheel": 1, "setup": [1, 89, 99, 101, 105], "py": 1, "bdist_wheel": 1, "dist": 1, "intel_transfer_learning_tool": 1, "7": 1, "py3": 1, "none": [1, 4, 6, 8, 9, 10, 13, 16, 18, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 91, 98, 100, 101, 102, 104, 105, 106, 107], "ani": [1, 2, 88, 92, 101, 102, 103, 104, 106, 107, 108, 109], "whl": 1, "addit": [1, 38, 42, 56, 60, 66, 75, 86, 96, 98, 100, 103, 104, 106, 107], "featur": [1, 25, 29, 38, 56, 96, 98, 100, 101, 103, 104, 105], "specif": [1, 2, 6], "For": [1, 2, 8, 9, 13, 16, 18, 87, 89, 91, 101, 102, 103, 104, 105, 106, 107], "distribut": [1, 14, 38, 42, 46, 51, 56, 60, 66, 75, 80, 87, 90, 95], "multinod": [1, 88, 96, 109], "train": [1, 4, 6, 8, 9, 10, 11, 14, 17, 18, 23, 24, 27, 28, 31, 32, 35, 36, 37, 40, 41, 44, 45, 48, 49, 50, 53, 54, 55, 58, 59, 64, 65, 68, 69, 72, 73, 74, 77, 78, 79, 86, 92, 93, 94, 96, 98, 100, 104, 107], "follow": [1, 91, 94, 98, 100, 101, 102, 103, 104, 106, 107], "verifi": [1, 88, 101, 109], "your": [1, 2, 88, 91, 96, 98, 100, 101, 102, 105, 108, 109], "wa": [1, 98, 100, 101, 102, 103, 104, 105, 106, 107], "success": 1, "command": [1, 87, 88, 89, 90, 91, 94, 95, 96, 109], "which": [1, 13, 16, 25, 29, 42, 46, 60, 86, 91, 92, 93, 94, 96, 98, 100, 102, 103, 104, 105, 106, 107], "displai": [1, 103, 104, 106, 107], "help": [1, 38, 42, 56, 60, 66, 75, 91, 98, 100, 102, 103, 104, 106, 107], "inform": [1, 86, 87, 91, 96, 98, 100, 103, 104, 106, 107], "about": [1, 86, 87, 98, 100, 103, 104, 105, 106, 107], "tlt": [1, 86, 89, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107], "With": [1, 6, 98, 100, 103, 104, 106, 107], "ai": [1, 2, 96], "model": [1, 6, 8, 9, 13, 16, 18, 92, 93, 94, 96], "bash": [1, 90, 95, 96], "prompt": [1, 87, 88, 96, 109], "call": [1, 38, 42, 46, 51, 56, 60, 75, 80, 88, 90, 91, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109], "script": [1, 2, 96], "both": [1, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 98, 100, 101, 102, 104, 105, 106, 107], "provid": [1, 2, 13, 16, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 86, 87, 89, 94, 96, 98, 100, 101, 103, 104, 106, 107], "opportun": 1, "evalu": [1, 4, 24, 28, 32, 37, 38, 41, 42, 45, 46, 50, 51, 55, 56, 59, 60, 65, 66, 69, 74, 75, 79, 80, 82, 87, 91, 92, 93, 94, 103, 104, 106, 107], "optim": [1, 22, 25, 29, 34, 36, 42, 43, 46, 47, 49, 54, 60, 63, 66, 73, 76, 78, 82, 86, 96, 102, 103, 104, 106, 107], "benchmark": [1, 2, 94, 96, 100, 102, 103, 104, 106, 107], "program": [1, 96], "experi": [1, 101, 105], "ll": 1, "need": [1, 86, 89, 91, 103, 104, 107], "knowledg": [1, 96, 98, 100], "choos": [1, 103], "work": [1, 86, 91, 103, 106], "best": [1, 25, 29, 91, 102], "let": [1, 96, 102, 103, 104, 106, 107], "": [1, 2, 3, 13, 16, 23, 24, 27, 28, 31, 32, 35, 37, 40, 41, 44, 45, 48, 50, 53, 55, 58, 59, 64, 65, 68, 69, 72, 74, 77, 79, 86, 94, 96, 98, 100, 101, 102, 104, 105, 106, 107], "continu": [1, 91, 98, 100, 103, 104, 106, 107], "previou": [1, 98, 100, 101, 103, 104, 105, 106, 107], "where": [1, 6, 8, 9, 13, 16, 23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77, 86, 87, 91, 94, 101, 104, 105, 107], "prepar": [1, 101], "classifi": [1, 13, 16, 86, 94, 104, 107], "identifi": [1, 18], "differ": [1, 51, 98, 100, 101, 102, 104, 105, 106], "type": [1, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 86, 88, 91, 98, 100, 101, 102, 104, 105, 106, 107, 109], "see": [1, 2, 86, 88, 91, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "all": [1, 2, 6, 13, 16, 86, 87, 88, 89, 96, 101, 102, 103, 104, 105, 106, 107, 109], "avail": [1, 86, 87, 98, 100, 102, 103, 104, 106, 107, 108], "image_classif": [1, 86, 87, 91, 98, 100, 103, 105, 106], "In": [1, 91, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107], "retrain": [1, 105], "efficientnet_b0": [1, 3, 86, 87, 91], "The": [1, 6, 8, 9, 18, 23, 24, 25, 27, 28, 29, 31, 32, 35, 37, 38, 40, 41, 42, 44, 45, 46, 48, 50, 51, 53, 55, 56, 58, 59, 60, 64, 65, 66, 68, 69, 72, 74, 75, 77, 79, 80, 82, 86, 87, 88, 89, 91, 92, 93, 94, 96, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109], "dir": [1, 87, 88, 91, 92, 93, 94, 109], "output": [1, 18, 24, 25, 28, 29, 32, 36, 37, 38, 41, 42, 45, 46, 49, 50, 51, 54, 55, 56, 59, 60, 65, 66, 69, 73, 74, 75, 78, 79, 80, 82, 87, 89, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108], "path": [1, 23, 25, 27, 29, 31, 35, 38, 40, 42, 44, 46, 48, 51, 53, 56, 58, 60, 64, 66, 68, 72, 75, 77, 80, 82, 86, 87, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108], "point": [1, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 91, 98, 100, 102, 103, 104, 106, 107], "writabl": [1, 24, 28, 32, 36, 37, 41, 45, 49, 50, 54, 55, 59, 65, 69, 73, 74, 78, 79], "folder": [1, 6, 8, 9, 13, 16, 18, 87, 91, 92, 93, 98, 100, 103, 105, 106, 108], "f": [1, 87, 88, 91, 92, 93, 94, 98, 103, 106, 109], "tmp": [1, 86, 87, 91, 92, 93, 94], "user": [1, 8, 9, 86, 96, 98, 100, 102, 103], "epoch": [1, 25, 29, 33, 38, 42, 46, 51, 56, 60, 66, 70, 75, 80, 82, 84, 87, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107], "1": [1, 6, 23, 25, 27, 29, 33, 35, 38, 40, 42, 44, 46, 48, 51, 53, 56, 58, 60, 64, 66, 70, 72, 75, 77, 80, 82, 84, 87, 89, 91, 92, 93, 94, 108], "directori": [1, 6, 8, 9, 13, 16, 18, 23, 24, 25, 27, 28, 29, 31, 32, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 64, 65, 66, 68, 69, 72, 73, 74, 75, 77, 78, 79, 80, 82, 86, 87, 88, 89, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "100": [1, 23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77, 96, 101, 105], "1776": 1, "27": [1, 91], "02": 1, "00": 1, "09it": 1, "592": 1, "08": 1, "33": [1, 91], "15it": 1, "loss": [1, 22, 34, 38, 42, 43, 46, 47, 51, 56, 60, 63, 66, 75, 76, 80, 86, 87, 91, 96, 98, 100, 101, 103, 104, 105, 106, 107], "2": [1, 2, 3, 6, 25, 29, 80, 91, 92, 93, 94], "7038": 1, "acc": [1, 91, 105], "3854": 1, "val": 1, "1242": 1, "4880": 1, "complet": [1, 2, 87, 91, 101, 103, 104], "35m": 1, "37": 1, "save": [1, 23, 24, 25, 27, 28, 29, 31, 32, 35, 36, 37, 40, 41, 44, 45, 48, 49, 50, 53, 54, 55, 58, 59, 64, 65, 68, 69, 72, 73, 74, 77, 78, 79, 87, 91, 96, 98, 100, 101, 102, 103, 105, 106], "accuraci": [1, 2, 38, 42, 56, 60, 66, 75, 87, 91, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107], "valu": [1, 13, 16, 82, 87, 89, 91, 94, 101, 104, 105, 107], "print": [1, 86, 91, 92, 98, 100, 101, 102, 103, 104, 105, 106, 107], "toward": [1, 91], "end": [1, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 87, 88, 91, 98, 100, 102, 103, 104, 106, 107, 109], "consol": [1, 91], "export": [1, 87, 91, 92, 93, 94, 96, 101, 105, 108], "specifi": [1, 9, 13, 16, 24, 25, 28, 29, 32, 33, 36, 37, 38, 41, 42, 45, 46, 49, 50, 51, 54, 55, 56, 59, 60, 65, 66, 69, 70, 73, 74, 75, 78, 79, 80, 82, 84, 87, 91, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107], "number": [1, 6, 8, 13, 18, 23, 25, 27, 29, 31, 35, 38, 40, 42, 44, 46, 48, 51, 53, 56, 58, 60, 64, 66, 68, 72, 75, 77, 80, 82, 87, 91, 92, 98, 100, 101, 103, 104, 105, 106, 107], "That": 1, "As": 1, "also": [1, 2, 23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77, 87, 91, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107], "beyond": [1, 90, 95], "includ": [1, 36, 49, 54, 73, 78, 86, 91, 96, 104], "quantiz": [1, 23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77, 96, 105], "read": [1, 88, 109], "refer": [1, 98, 100, 102, 103, 104, 106, 107], "find": 1, "more": [1, 13, 16, 80, 91, 94, 98, 100, 103, 104, 105, 106, 107], "our": [1, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107], "int8": [1, 91, 96], "improv": [1, 96, 105], "infer": [1, 13, 36, 49, 54, 73, 78, 91, 96, 102, 103, 104, 105, 106, 107], "jupyt": [1, 90, 95, 96, 99, 105, 108], "notebook": [1, 90, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107], "detail": [1, 91, 100], "import": [1, 86, 88, 96, 101, 105, 109], "o": [1, 98, 100, 101, 102, 103, 104, 105, 106, 107], "dataset_factori": [1, 86, 98, 100, 101, 102, 103, 104, 105, 106, 107], "model_factori": [1, 86, 98, 100, 101, 102, 103, 104, 105, 106, 107], "util": [1, 98, 100, 101, 102, 103, 104, 105, 106, 107], "frameworktyp": [1, 21, 30, 61, 62, 67, 83, 85, 86, 98, 100], "usecasetyp": [1, 21, 30, 61, 62, 67, 83, 85, 86, 98, 100], "usernam": 1, "getenv": 1, "dataset_dir": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 86, 87, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108], "format": [1, 18, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107], "exist": [1, 6, 8, 9, 24, 28, 32, 36, 37, 41, 45, 49, 50, 54, 55, 59, 65, 69, 73, 74, 78, 79, 86, 88, 96, 103, 104, 105, 106, 107, 109], "makedir": [1, 105], "writeabl": [1, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 87, 98, 100, 102, 103, 104, 106, 107], "file": [1, 13, 16, 18, 23, 24, 25, 27, 28, 29, 32, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 64, 65, 66, 69, 72, 73, 74, 75, 77, 78, 79, 80, 82, 86, 87, 88, 89, 91, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109], "output_dir": [1, 24, 25, 28, 29, 32, 33, 36, 37, 38, 41, 42, 45, 46, 49, 50, 51, 54, 55, 56, 59, 60, 65, 66, 69, 70, 73, 74, 75, 78, 79, 80, 82, 84, 87, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108], "get_model": [1, 86, 98, 100, 101, 102, 103, 104, 105, 106, 107], "model_nam": [1, 21, 22, 26, 30, 34, 39, 43, 47, 52, 57, 61, 62, 63, 67, 71, 76, 81, 83, 85, 86, 87, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107], "preprocess": [1, 66, 82, 98, 100, 101, 102, 103, 104, 105, 106, 107], "catalog": [1, 10, 11, 14, 17, 86, 87, 98, 100, 101], "get_dataset": [1, 86, 98, 101, 103, 104, 106, 107], "dataset_nam": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 86, 87, 93, 94, 98, 101, 103, 104, 106, 107], "use_cas": [1, 21, 30, 61, 62, 67, 83, 85, 86, 98, 100, 101, 102, 103, 104, 105, 106, 107], "dataset_catalog": [1, 4, 5, 7, 12, 15, 19, 20, 86, 87, 98, 101, 103, 104, 106, 107], "image_s": [1, 30, 86, 98, 100, 102, 103, 105, 106], "batch_siz": [1, 25, 29, 87, 98, 100, 101, 102, 103, 104, 105, 106, 107], "shuffle_split": [1, 98, 100, 101, 102, 103, 104, 105, 106, 107], "train_pct": [1, 98, 100, 101, 102, 103, 104, 105, 106, 107], "75": [1, 87, 102, 103, 104, 106, 107], "val_pct": [1, 98, 100, 101, 102, 103, 104, 105, 106, 107], "25": [1, 91, 101, 102, 103, 104, 105, 106, 107], "ipex_optim": [1, 25, 29, 42, 46, 60, 66, 82, 87, 101, 102, 103, 104], "fals": [1, 13, 14, 16, 24, 25, 28, 29, 32, 36, 37, 38, 41, 42, 45, 46, 49, 50, 51, 54, 55, 56, 59, 60, 65, 66, 69, 73, 74, 75, 78, 79, 80, 82, 86, 98, 100, 101, 102, 103, 104, 105, 106, 107], "visual": [1, 96, 101, 103, 105, 106], "result": [1, 23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77, 86, 88, 91, 102, 103, 104, 105, 106, 107, 109], "matplotlib": [1, 101, 102, 103, 105, 106], "pyplot": [1, 101, 102, 103, 105, 106], "plt": [1, 101, 102, 103, 105, 106], "numpi": [1, 98, 100, 101, 102, 103, 104, 105, 106, 107], "np": [1, 98, 100, 101, 102, 103, 104, 105, 106, 107], "label": [1, 8, 9, 13, 16, 86, 93, 94, 101, 102, 103, 104, 105, 106, 107], "get_batch": [1, 102, 103, 104, 105, 106, 107], "predict": [1, 96, 98, 100, 101], "singl": [1, 87, 102, 104, 105, 107], "batch": [1, 25, 29, 36, 49, 54, 73, 78, 87, 91, 96, 98, 100, 101, 102, 103, 104, 106, 107], "map": [1, 13, 16, 94, 101, 103, 104, 105, 106, 107], "id": [1, 100, 102, 103, 106], "class": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 34, 38, 39, 42, 43, 46, 47, 51, 52, 56, 57, 60, 61, 62, 63, 67, 71, 76, 80, 81, 83, 85, 87, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107], "class_nam": [1, 13, 16, 86, 87, 98, 100, 101, 102, 103, 104, 105, 106, 107], "figur": [1, 96, 102, 103, 105, 106], "figsiz": [1, 102, 103, 105, 106], "subplots_adjust": [1, 102, 103, 106], "hspace": [1, 102, 103, 106], "5": [1, 66, 86, 91, 92, 93, 101, 105], "n": [1, 88, 98, 101, 102, 103, 105, 106, 109], "rang": [1, 101, 102, 103, 105, 106], "min": [1, 101, 102, 103, 105, 106], "30": [1, 42, 46, 60, 87, 102, 103, 106], "subplot": [1, 101, 102, 103, 105, 106], "6": [1, 89, 105], "inp": [1, 102, 103], "transpos": [1, 102, 103], "mean": [1, 87, 101, 102, 103, 105], "arrai": [1, 102, 103, 106], "485": [1, 102, 103], "456": [1, 102, 103], "406": [1, 102, 103], "std": [1, 102, 103], "229": [1, 102, 103], "224": [1, 86, 102, 103], "225": [1, 102, 103], "clip": [1, 102, 103], "imshow": [1, 102, 103, 106], "correct_predict": [1, 102, 103, 106], "color": [1, 9, 18, 101, 102, 103, 105, 106], "darkgreen": [1, 102, 103, 106], "els": [1, 88, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109], "crimson": [1, 102, 103, 106], "titl": [1, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "fontsiz": [1, 102, 103, 106], "14": [1, 102, 103, 106], "axi": [1, 98, 100, 101, 102, 103, 104, 106, 107], "off": [1, 102, 103, 106], "_": [1, 102, 103, 105, 106], "suptitl": [1, 102, 103, 106], "correct": [1, 102, 103, 106], "shown": [1, 96, 102, 103, 106], "green": [1, 102, 103, 106], "incorrect": [1, 102, 103, 106], "red": [1, 18, 102, 103, 106], "actual": [1, 103, 104, 106, 107], "parenthesi": [1, 103, 106], "saved_model_dir": [1, 23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77, 98, 100, 101, 102, 103, 104, 106, 107], "quantization_output": 1, "join": [1, 98, 100, 101, 102, 103, 104, 105, 106, 107], "quantized_model": [1, 102, 103, 104, 106, 107], "overwrite_model": [1, 24, 28, 32, 36, 37, 41, 45, 49, 50, 54, 55, 59, 65, 69, 73, 74, 78, 79], "true": [1, 6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 25, 29, 33, 38, 42, 46, 51, 56, 60, 66, 70, 75, 80, 82, 84, 86, 87, 98, 100, 101, 102, 103, 104, 105, 106, 107], "neural": [1, 23, 24, 27, 28, 31, 32, 35, 36, 37, 40, 41, 44, 45, 48, 49, 50, 53, 54, 55, 58, 59, 64, 65, 68, 69, 72, 73, 74, 77, 78, 79, 87, 91, 96, 102, 103, 104, 106, 107], "compressor": [1, 23, 24, 27, 28, 31, 32, 35, 36, 37, 40, 41, 44, 45, 48, 49, 50, 53, 54, 55, 58, 59, 64, 65, 68, 69, 72, 73, 74, 77, 78, 79, 87, 91, 96, 102, 103, 104, 106, 107], "config": [1, 24, 28, 32, 37, 41, 45, 50, 55, 59, 65, 69, 74, 79, 86, 87, 103, 104, 105, 106, 107], "document": [1, 2, 86, 94, 96, 98, 100, 102, 103, 104, 106, 107], "develop": [1, 89], "deploy": [1, 96], "sampl": [1, 6, 82, 101, 106], "ve": 1, "present": [1, 23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77, 88, 109], "how": [1, 6, 88, 92, 93, 94, 98, 100, 102, 103, 104, 105, 106, 107, 109], "execut": [1, 98, 100], "workflow": [1, 91, 96, 98, 100, 102], "well": [1, 88, 96, 104, 107, 109], "some": [1, 90, 95, 102], "intel": [2, 23, 24, 25, 27, 28, 29, 31, 32, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 64, 65, 66, 68, 69, 72, 73, 74, 75, 77, 78, 79, 80, 82, 87, 88, 90, 91, 95, 108, 109], "transfer": [2, 61, 88, 89, 90, 91, 95, 108, 109], "learn": [2, 38, 42, 46, 51, 56, 60, 61, 66, 75, 80, 87, 88, 89, 90, 91, 95, 108, 109], "tool": [2, 88, 89, 90, 91, 95, 108, 109], "intend": 2, "platform": [2, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 94, 96, 98, 100, 102, 104, 106, 107], "visit": 2, "www": [2, 94, 100, 101, 103, 104, 107], "blog": 2, "commit": 2, "respect": 2, "human": [2, 94, 101, 104, 107], "right": [2, 94, 104, 107], "complic": 2, "abus": 2, "global": 2, "principl": 2, "product": 2, "applic": [2, 34, 96, 104, 106, 107], "caus": 2, "contribut": 2, "violat": 2, "internation": 2, "recogn": 2, "under": [2, 88, 101, 102, 109], "apach": 2, "version": [2, 36, 49, 54, 73, 78, 101, 105], "To": [2, 88, 89, 98, 100, 102, 103, 105, 106, 109], "extent": 2, "md": 2, "referenc": 2, "access": 2, "site": 2, "third": [2, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 86, 98, 100, 101, 102, 104, 106, 107], "parti": [2, 86], "indic": [2, 13, 16, 96], "content": [2, 88, 103, 104, 107, 109], "doe": [2, 6, 8, 9, 13, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 98, 100, 102, 104, 105, 106, 107], "warrant": 2, "qualiti": [2, 102], "By": [2, 98, 100, 105], "agre": 2, "term": [2, 104, 107], "associ": [2, 94, 101, 104, 107], "compli": 2, "expressli": 2, "adequaci": 2, "liabl": 2, "error": [2, 88, 101, 102, 103, 104, 105, 106, 107, 109], "omiss": 2, "defect": [2, 6, 92, 102], "relianc": 2, "thereon": 2, "warranti": 2, "non": [2, 6, 66, 75, 80, 82, 91, 92, 102], "infring": 2, "liabil": 2, "damag": 2, "relat": [2, 96, 105], "other": [2, 6, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 89, 91, 98, 100, 102, 104, 105, 106, 107], "brand": 2, "mai": [2, 88, 92, 93, 94, 96, 102, 103, 104, 105, 106, 107, 109], "claim": 2, "properti": [2, 104, 107], "trademark": [2, 96], "hub": [3, 38, 39, 52, 56, 86, 96, 98, 100, 102, 103, 107], "alexnet": [3, 91], "convnext_bas": [3, 91], "convnext_larg": [3, 91], "convnext_smal": [3, 91], "convnext_tini": [3, 91], "densenet121": [3, 91], "densenet161": [3, 91], "densenet169": [3, 91], "densenet201": [3, 91], "efficientnetv2": 3, "b0": 3, "b1": 3, "b2": 3, "b3": 3, "efficientnet_b1": [3, 91, 103], "efficientnet_b2": [3, 91], "efficientnet_b3": [3, 91], "efficientnet_b4": [3, 91], "efficientnet_b5": 3, "efficientnet_b6": 3, "efficientnet_b7": 3, "googlenet": 3, "inception_v3": 3, "mnasnet0_5": 3, "mnasnet1_0": 3, "mobilenet_v2": 3, "mobilenet_v2_100_224": 3, "mobilenet_v3_larg": 3, "mobilenet_v3_smal": 3, "nasnet_larg": 3, "proxyless_cpu": 3, "regnet_x_16gf": 3, "regnet_x_1_6gf": 3, "regnet_x_32gf": 3, "regnet_x_3_2gf": 3, "regnet_x_400mf": 3, "regnet_x_800mf": 3, "regnet_x_8gf": 3, "regnet_y_16gf": 3, "regnet_y_1_6gf": 3, "regnet_y_32gf": 3, "regnet_y_3_2gf": 3, "regnet_y_400mf": 3, "regnet_y_800mf": 3, "regnet_y_8gf": 3, "resnet101": 3, "resnet152": 3, "resnet18": [3, 92, 102], "resnet18_ssl": 3, "resnet18_swsl": 3, "resnet34": 3, "resnet50": [3, 92, 102], "resnet50_ssl": 3, "resnet50_swsl": 3, "resnet_v1_50": [3, 91, 93, 98, 100, 105, 106], "resnet_v2_101": 3, "resnet_v2_50": 3, "resnext101_32x16d_ssl": 3, "resnext101_32x16d_swsl": 3, "resnext101_32x16d_wsl": 3, "resnext101_32x32d_wsl": 3, "resnext101_32x48d_wsl": 3, "resnext101_32x4d_ssl": 3, "resnext101_32x4d_swsl": 3, "resnext101_32x8d": 3, "resnext101_32x8d_ssl": 3, "resnext101_32x8d_swsl": 3, "resnext101_32x8d_wsl": 3, "resnext50_32x4d": 3, "resnext50_32x4d_ssl": 3, "resnext50_32x4d_swsl": 3, "shufflenet_v2_x0_5": 3, "shufflenet_v2_x1_0": 3, "vgg11": 3, "vgg11_bn": 3, "vgg13": 3, "vgg13_bn": 3, "vgg16": 3, "vgg16_bn": 3, "vgg19": 3, "vgg19_bn": 3, "vit_b_16": 3, "vit_b_32": 3, "vit_l_16": 3, "vit_l_32": 3, "wide_resnet101_2": 3, "wide_resnet50_2": 3, "convnextbas": 3, "kera": [3, 34, 38, 51, 56, 86, 96, 105, 106], "convnextlarg": 3, "convnextsmal": 3, "convnexttini": 3, "convnextxlarg": 3, "efficientnetv2b0": 3, "efficientnetv2b1": 3, "efficientnetv2b2": 3, "efficientnetv2b3": 3, "efficientnetv2l": 3, "efficientnetv2m": 3, "inceptionresnetv2": 3, "inceptionv3": 3, "mobilenet": 3, "mobilenetv2": 3, "nasnetlarg": 3, "nasnetmobil": 3, "resnet101v2": 3, "resnet152v2": 3, "resnet50v2": 3, "xception": 3, "bert": [3, 94, 101, 104], "uncas": [3, 94], "larg": [3, 94, 96, 102, 103, 106], "clinic": 3, "distilbert": 3, "google_bert_uncased_l": [3, 94, 107], "10_h": [3, 94], "128_a": [3, 107], "256_a": [3, 94], "4": [3, 86, 87, 91, 92, 94], "512_a": 3, "768_a": 3, "12": [3, 91], "12_h": 3, "2_h": [3, 107], "4_h": 3, "6_h": 3, "8_h": 3, "dinov2_vitb14": 3, "dinov2_vitb14_reg": 3, "dinov2_vitg14": 3, "dinov2_vitg14_reg": 3, "dinov2_vitl14": 3, "dinov2_vitl14_reg": 3, "dinov2_vits14": 3, "dinov2_vits14_reg": 3, "bloom": 3, "560m": 3, "bloomz": 3, "3b": 3, "distilgpt2": 3, "gpt": 3, "j": [3, 98], "6b": 3, "gpt2": 3, "abstract": [4, 31, 32, 33, 61, 68, 69, 70, 84], "__init__": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 34, 39, 43, 47, 52, 57, 61, 62, 63, 67, 71, 76, 81, 83, 85, 105], "constructor": [4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 22, 26, 30, 34, 39, 43, 47, 52, 57, 61, 62, 63, 67, 71, 76, 81, 83, 85], "method": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 34, 39, 43, 47, 52, 57, 61, 62, 63, 67, 71, 76, 81, 83, 85, 92, 94, 96, 101, 105, 107], "attribut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 34, 39, 43, 47, 52, 57, 61, 62, 63, 67, 71, 76, 81, 83, 85, 86, 96], "repres": [5, 12, 20, 21, 22, 26, 30, 34, 38, 39, 42, 43, 47, 52, 56, 57, 60, 62, 63, 66, 67, 71, 75, 76, 81, 83, 85, 98, 100, 103, 104, 106, 107], "num_work": [6, 8, 11, 13, 14, 18], "56": 6, "shuffle_fil": [6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 38, 51, 56, 75, 80, 101, 104, 105, 107], "A": [6, 8, 9, 13, 14, 16, 17, 18, 66, 75, 80, 82, 86, 87, 91, 92, 94, 102, 105], "custom": [6, 8, 9, 13, 16, 18, 24, 28, 32, 37, 41, 45, 47, 50, 55, 59, 65, 69, 74, 79, 86, 87, 96, 98, 100, 102], "expect": [6, 8, 9, 13, 16, 18, 86, 92, 93, 94, 104, 105, 107], "organ": [6, 8, 9, 86, 92, 93, 103, 106], "one": [6, 13, 16, 18, 91, 94, 98, 100, 102, 103, 104, 105, 106, 107], "subfold": [6, 8, 9, 86, 92, 93, 103, 106], "good": [6, 92, 96, 102, 104], "least": [6, 102], "It": [6, 8, 9, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 91, 94, 98, 100, 101, 102, 104, 106, 107], "matter": [6, 102], "what": [6, 18, 88, 102, 105, 109], "mani": [6, 102], "long": [6, 102], "bad": [6, 92, 102], "test": [6, 8, 9, 23, 24, 27, 28, 31, 32, 35, 37, 40, 41, 44, 45, 48, 50, 53, 55, 58, 59, 64, 65, 66, 68, 69, 72, 74, 77, 79, 82, 86, 88, 89, 92, 96, 98, 100, 101, 103, 104, 105, 106, 107, 109], "defective_type_a": 6, "defective_type_b": 6, "subdirectori": [6, 8, 9, 103, 105, 106], "should": [6, 8, 9, 13, 16, 38, 42, 56, 60, 66, 75, 86, 87, 88, 89, 91, 92, 93, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109], "contain": [6, 8, 9, 13, 16, 18, 23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 66, 68, 72, 77, 86, 87, 92, 93, 96, 98, 100, 103, 106], "paramet": [6, 8, 9, 13, 16, 18, 23, 24, 25, 27, 28, 29, 31, 32, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 64, 65, 66, 68, 69, 72, 73, 74, 75, 77, 78, 79, 80, 82, 86, 87], "str": [6, 8, 9, 13, 16, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 98, 100, 101, 102, 103, 104, 105, 106, 107], "locat": [6, 8, 9, 23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77, 86, 87, 88, 89, 91, 94, 100, 101, 102, 109], "If": [6, 8, 9, 13, 16, 18, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 86, 87, 88, 89, 91, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "given": [6, 8, 9, 13, 16, 18, 66, 82, 86, 87, 88, 102, 103, 109], "int": [6, 8, 9, 13, 16, 18, 23, 25, 27, 29, 30, 31, 35, 38, 40, 42, 44, 46, 48, 51, 53, 56, 58, 60, 64, 66, 68, 72, 75, 77, 80, 82, 98, 100, 101, 102, 103, 104, 105, 106, 107], "process": [6, 8, 42, 46, 60, 66, 87, 94, 96, 103, 105], "load": [6, 8, 13, 16, 18, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 86, 87, 94, 101, 103, 104, 105, 106, 107], "default": [6, 8, 9, 13, 16, 18, 23, 24, 25, 27, 28, 29, 31, 32, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 64, 65, 66, 68, 69, 72, 73, 74, 75, 77, 78, 79, 80, 82, 86, 87, 88, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "bool": [6, 8, 9, 13, 16, 18, 24, 25, 28, 29, 30, 32, 36, 37, 38, 41, 42, 45, 46, 49, 50, 51, 54, 55, 56, 59, 60, 65, 66, 69, 73, 74, 75, 78, 79, 80, 82, 86, 87, 98, 100, 101, 102, 103, 104, 105, 106, 107], "whether": [6, 8, 9, 13, 16, 18, 24, 25, 28, 29, 32, 36, 37, 38, 41, 45, 49, 50, 51, 54, 55, 56, 59, 65, 69, 73, 74, 75, 78, 79, 80, 101, 102], "shuffl": [6, 8, 9, 13, 16, 18, 38, 51, 56, 75, 80, 101, 102, 105], "categori": [6, 92, 105], "rais": [6, 8, 9, 13, 16, 18, 23, 24, 27, 28, 31, 32, 35, 36, 37, 38, 40, 41, 44, 45, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 64, 65, 66, 68, 69, 72, 73, 74, 75, 77, 78, 79, 80, 82, 86, 101, 105], "filenotfounderror": [6, 8, 9, 13, 16, 18, 23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77, 105], "found": [6, 13, 16, 18, 23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77, 86, 91, 101, 103, 105, 107], "jpg": [8, 9, 86, 92, 93, 102, 103, 106], "class_a": [8, 9, 13, 16, 86, 105], "class_b": [8, 9, 13, 16, 86, 105], "class_c": [8, 9, 86, 105], "defin": [8, 9, 42, 46, 60, 66, 75, 80, 82, 102, 103, 104, 106, 108], "split": [8, 9, 10, 11, 14, 17, 66, 82, 86, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107], "subset": [8, 9, 23, 24, 27, 28, 31, 32, 35, 37, 38, 40, 41, 42, 44, 45, 46, 48, 50, 51, 53, 55, 56, 58, 59, 60, 64, 65, 66, 68, 69, 72, 74, 75, 77, 79, 80, 82, 92, 98, 100, 102, 103, 104, 105, 106, 107], "arrang": [8, 9, 92, 102, 103], "accordingli": [8, 9], "accept": [8, 9, 102], "color_mod": 9, "rgb": [9, 103], "seed": [9, 10, 16, 18, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 101, 102, 105], "kwarg": [9, 10, 11, 16, 17, 22, 26, 34, 38, 39, 43, 47, 51, 52, 56, 57, 63, 66, 71, 75, 76, 80, 81, 82, 86], "mode": [9, 91, 101], "greyscal": 9, "rgba": 9, "random": [9, 16, 18, 102, 105], "as_supervis": 10, "csv_file_nam": [13, 16, 104, 107], "column_nam": [13, 101, 104], "label_map_func": [13, 16, 107], "callabl": [13, 16], "label_col": 13, "delimit": [13, 16, 87, 94, 104, 107], "header": [13, 16, 25, 29, 104, 107], "select_col": [13, 16, 104, 107], "exclude_col": [13, 16, 104, 107], "transform": [13, 16, 18, 101], "csv": [13, 16, 18, 86, 87, 94, 104, 107], "column": [13, 16, 86, 94, 104, 107], "first": [13, 16, 38, 42, 46, 56, 60, 66, 75, 88, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109], "second": [13, 16, 38, 42, 56, 60, 66, 75, 87, 88, 91, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109], "sentenc": [13, 16, 86, 94, 104, 107], "comma": [13, 16, 87, 94, 104, 107], "separ": [13, 16, 87, 94, 104, 105, 107], "look": [13, 16, 18, 104, 107], "similar": [13, 16, 18, 104, 107], "snippet": [13, 16, 18], "below": [13, 16, 18, 88, 92, 93, 94, 98, 100, 102, 103, 104, 105, 108, 109], "ha": [13, 16, 24, 28, 32, 36, 37, 38, 41, 42, 45, 46, 49, 50, 51, 54, 55, 56, 59, 60, 65, 66, 69, 73, 74, 75, 78, 79, 80, 82, 87, 91, 92, 93, 94, 96, 101, 104, 105, 107], "filter": [13, 16, 86, 87, 94, 101, 102, 104, 105, 107], "out": [13, 16, 18, 36, 49, 54, 73, 78, 96, 101, 103, 104, 105, 106, 107], "pars": [13, 16, 101, 104, 107], "order": [13, 16], "must": [13, 18, 102], "exactli": 13, "posit": 13, "correspond": 13, "argument": [13, 23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77, 82, 86, 89, 94, 98, 100, 101], "assign": 13, "text_1": 13, "text_2": 13, "rest": [13, 103, 106], "function": [13, 16, 86, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107], "across": [13, 16, 96], "appli": [13, 16, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 87, 91, 98, 100, 102, 103, 104, 106, 107], "element": [13, 16], "string": [13, 16, 38, 51, 56, 75, 80, 87, 94, 103, 104, 107], "instead": [13, 16, 87, 103, 106], "numer": [13, 16, 94, 103, 104, 106, 107], "index": [13, 101, 104, 105, 107], "integ": [13, 38, 42, 51, 56, 60, 66, 75, 80, 98, 100, 101, 103, 104, 105, 106, 107], "everi": [13, 25, 29], "uniqu": 13, "start": [13, 87, 89, 90, 92, 95, 102, 108], "charact": [13, 16, 94, 107], "row": [13, 16, 104, 107], "boolean": [13, 16, 25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 86, 87], "line": [13, 16, 96, 103, 105, 106], "skip": [13, 16, 103, 104, 105, 106, 107, 108], "sort": [13, 16, 86], "At": [13, 16], "most": [13, 16, 87, 101, 105], "exclud": [13, 16], "worker": [13, 18], "pass": [13, 18, 89, 91, 94, 101, 102, 103, 104, 106, 107], "dataload": [13, 18, 101], "typeerror": [13, 16, 38, 51, 56, 66, 75, 80, 82, 101, 105], "valueerror": [13, 16, 24, 28, 32, 37, 41, 45, 50, 55, 59, 65, 66, 69, 74, 79, 82, 101, 105], "empti": [13, 16, 106, 108], "mismatch": 13, "than": [13, 80, 101, 105], "field": 16, "dataset_fil": [18, 87, 94], "validation_fil": 18, "json": [18, 87], "txt": [18, 87, 89, 103, 106, 108], "record": 18, "up": [18, 25, 29, 87, 88, 94, 96, 98, 100, 102, 103, 104, 106, 107, 109], "three": [18, 101, 102], "kei": [18, 87, 88, 101, 105, 109], "input": [18, 38, 42, 56, 60, 66, 75, 86, 98, 100, 102, 103, 104, 105, 106, 107], "primari": 18, "blue": [18, 101, 105], "yellow": [18, 101, 105], "odd": 18, "twitter": [18, 104], "instagram": 18, "telegram": 18, "warmup": [23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77], "iter": [23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77, 96, 101, 105], "cores_per_inst": [23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77], "num_of_inst": [23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77], "inter_num_of_thread": [23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77], "intra_num_of_thread": [23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77], "otherwis": [23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 66, 68, 72, 75, 77, 80, 82, 101], "full": [23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77, 91, 102, 103, 104, 105, 106, 107], "explicitli": [23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77, 96], "set": [23, 25, 27, 29, 31, 35, 38, 40, 42, 44, 46, 48, 51, 53, 56, 58, 60, 64, 66, 68, 72, 75, 77, 80, 82, 86, 87, 88, 91, 92, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109], "imageclassificationdataset": [23, 24, 27, 28, 31, 32, 35, 37, 38, 40, 41, 42, 44, 45, 46, 48, 50, 51, 53, 55, 56, 58, 59, 60, 64, 65, 68, 69, 72, 74, 77, 79, 98, 100, 103, 104, 106, 107], "befor": [23, 27, 31, 35, 38, 40, 44, 48, 51, 53, 56, 58, 64, 68, 72, 75, 77, 80, 87, 94, 96, 99, 103], "run": [23, 25, 27, 29, 31, 35, 38, 40, 42, 44, 46, 48, 51, 53, 56, 58, 60, 64, 66, 68, 72, 75, 77, 80, 82, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109], "per": [23, 27, 31, 35, 40, 42, 44, 46, 48, 53, 58, 60, 64, 66, 68, 72, 77, 87, 94, 101, 105], "instanc": [23, 27, 31, 35, 38, 40, 44, 48, 51, 53, 56, 58, 64, 68, 72, 77], "thread": [23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77], "inter": [23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77], "oper": [23, 25, 27, 29, 31, 35, 36, 40, 44, 48, 49, 53, 54, 58, 64, 68, 72, 73, 77, 78, 105], "intra": [23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77], "return": [23, 24, 25, 27, 28, 29, 31, 32, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 64, 65, 66, 68, 69, 72, 73, 74, 75, 77, 78, 79, 80, 82, 86, 98, 100, 101, 102, 103, 104, 105, 106, 107], "notadirectoryerror": [23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77], "pt": [23, 24, 27, 28, 40, 41, 44, 45, 58, 59, 64, 65, 86, 87], "inc_config_path": [23, 27, 35, 40, 44, 48, 53, 58, 64, 72, 77], "post": [24, 28, 32, 37, 41, 45, 50, 55, 59, 65, 69, 74, 79, 87, 91, 96, 104, 107], "calibr": [24, 28, 32, 37, 41, 45, 50, 55, 59, 65, 69, 74, 79], "its": [24, 28, 32, 37, 41, 45, 50, 55, 59, 65, 69, 74, 79, 89, 96], "written": [24, 28, 32, 37, 41, 45, 50, 55, 59, 65, 69, 74, 79, 91], "posttrainingquantconfig": [24, 28, 32, 37, 41, 45, 50, 55, 59, 65, 69, 74, 79], "overwrit": [24, 28, 32, 36, 37, 41, 45, 49, 50, 54, 55, 59, 65, 69, 73, 74, 78, 79], "alreadi": [24, 28, 32, 36, 37, 41, 45, 49, 50, 54, 55, 59, 65, 69, 73, 74, 78, 79, 87, 91, 92, 93, 96, 102, 103, 104, 105, 106, 107], "fileexistserror": [24, 28, 32, 36, 37, 38, 41, 45, 49, 50, 51, 54, 55, 56, 59, 65, 69, 73, 74, 75, 78, 79, 80], "compat": [24, 28, 32, 37, 41, 45, 50, 55, 59, 65, 69, 74, 79, 86, 102, 103], "pytorchcustomimageanomalydetectiondataset": [25, 29], "64": [25, 29, 91, 102], "feature_dim": [25, 29, 102], "1000": [25, 29, 102, 105], "pred_dim": [25, 29, 102], "250": [25, 29, 102], "generate_checkpoint": [25, 29, 102], "initial_checkpoint": [25, 29, 33, 38, 42, 46, 51, 56, 60, 66, 70, 75, 80, 82, 84, 98, 100, 102, 103, 104, 106, 107], "pool": [25, 29, 102], "avg": [25, 29, 102], "kernel_s": [25, 29, 102], "pca_threshold": [25, 29, 102], "99": [25, 29, 102], "simsiam": [25, 29, 87], "cutpast": [25, 29, 87, 102], "cutpaste_typ": [25, 29, 102], "normal": [25, 29, 36, 49, 54, 73, 78, 102, 103, 105], "freeze_resnet": [25, 29, 102], "head_lay": [25, 29, 102], "sgd": [25, 29, 102], "layer_nam": [25, 29, 102], "layer3": [25, 29, 102], "enable_auto_mixed_precis": [25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 98, 100, 101, 102, 104, 106, 107], "devic": [25, 29, 42, 46, 60, 66, 82, 102, 103], "when": [25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 86, 87, 91, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107], "size": [25, 29, 38, 42, 56, 60, 66, 75, 87, 91, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107], "forward": [25, 29, 89], "layer": [25, 29, 38, 42, 46, 56, 60, 66, 75, 86, 91, 96, 98, 100, 102, 103, 104, 105, 106, 107], "whose": [25, 29, 102], "desir": [25, 29, 102], "extract": [25, 29, 91, 93, 94, 103, 104, 106, 107], "dimens": [25, 29, 103, 106], "hidden": [25, 29], "predictor": [25, 29], "preserv": [25, 29, 102], "weight": [25, 29, 36, 38, 42, 46, 49, 51, 54, 56, 60, 66, 73, 75, 78, 80, 82, 87, 92, 98, 100, 102, 103, 104, 105, 106, 107], "dure": [25, 29, 38, 51, 56, 66, 75, 80, 82, 87, 94, 102], "checkpoint": [25, 29, 36, 38, 42, 46, 49, 51, 54, 56, 60, 66, 73, 75, 78, 80, 82, 87, 91, 92, 96, 101, 102, 103, 104, 105, 106, 107], "reproduc": [25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80], "max": [25, 29, 87, 91, 101, 102, 103, 104, 105, 106, 107], "kernel": [25, 29, 102], "float": [25, 29, 38, 42, 46, 51, 56, 60, 66, 67, 75, 80, 82, 87, 98, 100, 101, 102, 103, 104, 105, 106, 107], "threshold": [25, 29, 102], "pca": [25, 29, 102], "enabl": [25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 87, 98, 100, 101, 102, 103, 104, 105, 106, 107], "disabl": [25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 98, 100, 102, 104, 106, 107], "variant": [25, 29], "freez": [25, 29], "resnet": [25, 29, 98, 100, 102], "fc": [25, 29], "project": [25, 29, 89, 96], "head": [25, 29], "choic": [25, 29, 87], "extens": [25, 29, 42, 46, 60, 66, 82, 87, 96, 101, 102, 104], "ipex": [25, 29, 42, 46, 60, 87, 102, 103], "auto": [25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 96, 98, 100, 102, 104, 106, 107], "bit": [25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 98, 100, 102, 104, 105, 106, 107], "faster": [25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 96, 98, 100, 102, 104, 106, 107], "less": [25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 98, 100, 101, 102, 104, 105, 106, 107], "memori": [25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 86, 98, 100, 101, 102, 104, 105, 106, 107], "bfloat16": [25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 98, 100, 101, 102, 104, 106, 107], "fourth": [25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 98, 100, 101, 102, 104, 106, 107], "detriment": [25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 98, 100, 102, 104, 106, 107], "automat": [25, 29, 38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 96, 98, 100, 102, 103, 104, 106, 107], "enter": [25, 29, 42, 46, 60, 88, 102, 103, 109], "hpu": [25, 29, 42, 46, 60, 102, 103], "instal": [25, 29, 42, 46, 60, 88, 89, 96, 99, 102, 103, 108, 109], "fit": [25, 29, 38, 51, 56, 66, 75, 80, 82, 105], "princip": [25, 29, 102], "compon": [25, 29, 96, 102], "pretrain": [26, 30, 34, 39, 47, 52, 57, 61, 63, 67, 71, 76, 81, 83, 85, 86, 92, 96, 101, 102, 103, 104, 106, 107], "do_fine_tun": 30, "dropout_layer_r": [30, 67], "basedataset": [33, 70, 84], "do_ev": [33, 38, 42, 46, 51, 56, 60, 66, 70, 75, 80, 82, 84, 87, 98, 100, 101, 103, 104, 105, 106, 107], "saved_model": [35, 36, 37, 48, 49, 50, 53, 54, 55, 72, 73, 74, 77, 78, 79, 86, 87, 91, 98, 100, 103, 104, 105, 106, 107], "pb": [35, 36, 37, 48, 49, 50, 53, 54, 55, 72, 73, 74, 77, 78, 79, 86, 87, 91, 98, 100, 103, 104, 105, 106, 107], "graph": [36, 49, 54, 73, 78, 87, 105], "write": [36, 49, 54, 66, 73, 75, 78, 80, 82, 87, 88, 109], "convert": [36, 49, 54, 73, 78, 105], "variabl": [36, 49, 54, 73, 78, 87, 101, 103, 104, 105, 106, 107, 108], "constant": [36, 49, 54, 73, 78, 105], "remov": [36, 49, 54, 73, 78, 88, 105, 109], "like": [36, 49, 54, 73, 78, 88, 102, 104, 105, 107, 109], "strip": [36, 49, 54, 73, 78, 103, 105, 106], "part": [36, 49, 54, 73, 78, 91, 103, 105, 106], "never": [36, 49, 54, 73, 78, 105], "reach": [36, 38, 42, 46, 49, 51, 54, 56, 60, 66, 73, 75, 78, 80, 87, 91, 98, 100, 103, 104, 105, 106, 107], "debug": [36, 49, 54, 73, 78, 91, 105], "checknumer": [36, 49, 54, 73, 78, 105], "fold": [36, 49, 54, 73, 78, 105], "op": [36, 49, 54, 73, 78, 91, 105], "pre": [36, 49, 54, 73, 78, 96, 101, 104, 105, 107], "calcul": [36, 49, 54, 73, 78, 98, 100, 102, 103, 104, 105, 106, 107], "fuse": [36, 49, 54, 73, 78, 105], "common": [36, 49, 54, 73, 78, 105], "unifi": [36, 49, 54, 73, 78, 105], "early_stop": [38, 42, 46, 51, 56, 60, 66, 75, 80, 87, 98, 100, 103, 104, 106, 107], "lr_decai": [38, 42, 46, 51, 56, 60, 66, 75, 80, 87, 98, 100, 103, 104, 106, 107], "extra_lay": [38, 42, 56, 60, 66, 75, 98, 100, 103, 104, 106, 107], "hostfil": [38, 42, 46, 51, 56, 60, 66, 75, 80, 87, 94], "nnode": [38, 42, 46, 51, 56, 60, 66, 75, 80, 87, 94], "nproc_per_nod": [38, 42, 46, 51, 56, 60, 66, 75, 80, 87, 94], "callback": [38, 51, 56, 105], "time": [38, 42, 46, 56, 60, 87, 91, 96, 98, 100, 101, 102, 103, 104, 106, 107], "get": [38, 42, 46, 56, 60, 87, 88, 89, 90, 95, 101, 105, 108, 109], "extractor": [38, 56, 92, 102, 105], "add": [38, 42, 46, 56, 60, 87, 98, 100, 101, 103, 105, 106], "dens": [38, 42, 46, 56, 60, 66, 75, 86, 91, 98, 100, 103, 104, 105, 106, 107], "compil": [38, 51, 56, 98, 100, 103, 105, 106], "initi": [38, 51, 56, 75, 80, 86, 87], "those": [38, 51, 56, 75, 80, 86], "earli": [38, 42, 46, 51, 56, 60, 66, 75, 80, 87, 98, 100, 103, 104, 106, 107], "stop": [38, 42, 46, 51, 56, 60, 66, 75, 80, 87, 98, 100, 103, 104, 105, 106, 107], "converg": [38, 42, 46, 51, 56, 60, 66, 75, 80, 87, 98, 100, 103, 104, 106, 107], "while": [38, 42, 46, 51, 56, 60, 66, 75, 80, 86, 87, 89, 96, 98, 100, 102, 103, 104, 106, 107], "rate": [38, 42, 46, 51, 56, 60, 66, 75, 80, 87, 98, 100, 103, 104, 106, 107], "decai": [38, 42, 46, 51, 56, 60, 66, 75, 80, 87, 98, 100, 103, 104, 106, 107], "insert": [38, 42, 56, 60, 66, 75, 98, 100, 103, 104, 106, 107], "between": [38, 42, 56, 60, 66, 75, 98, 100, 101, 102, 103, 104, 105, 106, 107], "increas": [38, 42, 56, 60, 66, 75, 98, 100, 103, 104, 106, 107], "fine": [38, 42, 56, 60, 63, 66, 71, 75, 76, 81, 87, 90, 92, 95, 98, 100, 102, 103, 105, 106], "tune": [38, 42, 56, 60, 63, 66, 71, 75, 76, 81, 87, 90, 91, 92, 95, 98, 100, 102, 103, 105, 106], "tfhub": [38, 56, 75, 98, 100, 103, 104, 105, 106, 107], "1024": [38, 42, 56, 60, 66, 75, 98, 100, 101, 103, 104, 105, 106, 107], "512": [38, 42, 56, 60, 66, 75, 91, 98, 100, 103, 104, 105, 106, 107], "neuron": [38, 42, 56, 60, 66, 75, 98, 100, 103, 104, 106, 107], "histori": [38, 51, 56, 66, 75, 80, 91, 98, 100, 101, 103, 104, 105, 106, 107], "object": [38, 42, 46, 51, 56, 60, 66, 75, 80, 82, 86, 98, 100, 101, 102, 103, 104, 106, 107], "use_horovod": [42, 46, 60, 87], "hvd_start_timeout": [42, 46, 60, 87], "fulli": [42, 46, 60], "connect": [42, 46, 60], "linear": [42, 46, 60], "flag": [42, 46, 60, 66, 91, 101], "node": [42, 46, 60, 66, 87, 88, 94, 109], "spawn": [42, 46, 60, 66], "runtimeerror": 51, "multi": [63, 94, 98, 100, 103, 106], "learning_r": [66, 101], "1e": 66, "05": [66, 82, 87, 101], "use_train": [66, 82, 101, 104], "force_download": [66, 82], "textclassificationdataset": [66, 75, 80], "arrow_dataset": 66, "been": [66, 75, 80, 82, 87, 91, 96, 101, 105, 107], "entir": [66, 75, 80, 82, 88, 109], "partit": [66, 75, 80, 82], "have": [66, 82, 88, 92, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "done": [66, 82, 91, 101, 103, 104, 105, 106, 108], "trainer": [66, 82, 101, 104], "nativ": [66, 82, 104, 108], "loop": [66, 82, 104], "trainoutput": [66, 82], "dictionari": [66, 86, 87, 106], "yet": [66, 82, 86, 87, 103, 106], "binari": [71, 75, 76, 80], "notimplementederror": [80, 86], "temperatur": [82, 87], "lora_rank": [82, 87], "lora_alpha": [82, 87], "lora_dropout": [82, 87], "max_train_sampl": 82, "textgenerationdataset": 82, "modul": [82, 87, 103, 104], "next": [82, 87, 98, 100, 102, 103, 104, 105, 106, 107], "token": [82, 87, 101], "probabl": [82, 87], "lora": [82, 87], "rank": [82, 87], "alpha": [82, 87], "dropout": [82, 87], "truncat": [82, 101], "maximum": [82, 87, 101, 103, 104, 105, 107], "quick": 82, "placehold": 82, "implement": [82, 98, 100], "simplest": 86, "load_dataset": [86, 100, 101, 102, 103, 104, 105, 106, 107], "themselv": 86, "tfcustomtextclassificationdataset": 86, "task": [86, 94, 104], "purpos": [86, 103, 106], "keyword": 86, "being": [86, 87, 92, 93, 94, 102, 104, 107], "flower_photo": [86, 91, 93, 103, 105, 106], "3670": [86, 91], "belong": [86, 91, 92, 93, 105], "daisi": [86, 93, 103, 106], "dandelion": [86, 93, 103, 106], "rose": [86, 93, 103, 106], "sunflow": [86, 93, 103, 106], "tulip": [86, 93, 103, 106], "tf_dataset": [86, 87, 98, 105, 106, 107], "cv": [86, 87], "nlp": 86, "request": [86, 96, 102, 103], "tf_flower": [86, 93, 106], "rare": 86, "interact": [86, 96], "directli": [86, 105], "discov": 86, "load_model": [86, 98, 100, 102], "discoveri": 86, "inspect": [86, 104, 107], "get_supported_model": [86, 101, 105], "print_supported_model": [86, 98, 100, 102, 103, 104, 106, 107], "model_hub": [86, 101, 105], "origin": [86, 98, 100, 102, 104, 105, 107], "configur": [86, 94, 101, 105], "adam": [86, 105], "torch": [86, 101, 102, 103], "nn": 86, "crossentropyloss": 86, "further": [86, 96, 101], "thei": [86, 88, 109], "amsgrad": 86, "want": [86, 88, 103, 106, 109], "sequenti": [86, 91, 105], "my_model": 86, "shape": [86, 91], "relu": 86, "softmax": 86, "leaf": 86, "item": [86, 101, 105], "nameerror": 86, "unknown": [86, 101], "miss": 86, "verbos": [86, 87, 98, 100, 102, 103, 104, 106, 107], "markdown": [86, 102], "categor": 86, "tabl": [86, 105], "updat": [86, 104, 107], "Not": [86, 87], "arg": [87, 101], "model_dir": 87, "requir": [87, 89, 96, 98, 99, 100, 103, 105, 108], "reload": 87, "inc": [87, 102, 103, 104, 105, 106, 107], "temporari": 87, "delet": 87, "previous": [87, 102], "try": [87, 89, 101, 105], "context": [87, 102], "prompt_with_context": 87, "ad": [87, 92, 98, 100, 102, 103, 104, 106, 107], "without": [87, 101, 102], "prompt_without_context": 87, "top": 87, "top_p": 87, "smallest": 87, "higher": [87, 101], "kept": 87, "k": [87, 105], "top_k": 87, "highest": 87, "vocabulari": 87, "keep": 87, "40": [87, 101, 105], "repetit": 87, "penalti": 87, "repetition_penalti": 87, "num": 87, "beam": 87, "num_beam": 87, "search": [87, 96, 102, 103, 104, 106, 107], "max_new_token": 87, "128": [87, 101], "extra": 87, "static": [87, 94, 103, 104, 107], "dynam": [87, 103], "criterion": [87, 91, 103, 105], "accuracy_criterion": 87, "rel": [87, 103, 105], "allow": [87, 94, 98, 100, 103, 104, 105, 106, 107], "01": [87, 91, 103, 105], "timeout": [87, 91, 103, 104, 105, 106], "finish": [87, 103, 105], "trial": [87, 91, 103, 104, 105, 106], "phase": [87, 103, 105], "met": [87, 103, 105], "max_trial": [87, 103, 105], "50": [87, 91, 98, 100, 103, 105], "workspac": [87, 105], "deep": [87, 94, 96, 101], "multipl": [87, 105], "anomaly_detect": [87, 102], "image_anomaly_detect": [87, 92, 102], "text_classif": [87, 101, 104, 107], "text_gener": 87, "log": [87, 101, 105], "etc": [87, 98, 100, 103, 104, 106, 107], "init": [87, 92], "init_checkpoint": 87, "resum": [87, 96], "aug": 87, "add_aug": [87, 98, 100, 102, 103, 106], "augment": [87, 98, 100, 102, 103, 106], "hvflip": [87, 98, 100, 106], "hflip": [87, 98, 100, 102, 103, 106], "vflip": [87, 98, 100, 106], "rotat": [87, 98, 100, 102, 103, 106], "zoom": [87, 98, 100, 106], "d": [87, 94, 101, 105], "trigger": 87, "job": [87, 94], "nproc": 87, "lr": 87, "horovod": 87, "mpi": 87, "hvd": 87, "horovodrun": 87, "check": [87, 88, 94, 96, 102, 109], "altern": [87, 91], "horovod_start_timeout": 87, "current": [87, 98, 100, 102, 103, 104, 106, 107], "instruction_kei": 87, "determin": [87, 101, 105], "schema": 87, "context_kei": 87, "respons": 87, "response_kei": 87, "here": [88, 90, 91, 95, 102, 109], "particip": [88, 109], "oneapi": [88, 109], "toolkit": [88, 98, 100, 102, 105, 109], "opt": [88, 109], "pair": [88, 109], "sure": [88, 91, 109], "id_rsa": [88, 109], "pub": [88, 109], "don": [88, 104, 105, 109], "t": [88, 94, 98, 101, 103, 104, 105, 106, 107, 108, 109], "passphras": [88, 109], "keygen": [88, 109], "old_passphras": [88, 109], "new_passphras": [88, 109], "keyfil": [88, 109], "replac": [88, 94, 109], "blank": [88, 109], "give": [88, 101, 103, 106, 109], "permiss": [88, 109], "chmod": [88, 109], "u": [88, 101, 103, 105, 106, 109], "x": [88, 98, 100, 101, 105, 107, 109], "rsa": [88, 109], "ask": [88, 109], "press": [88, 109], "just": [88, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109], "open": [88, 96, 98, 100, 103, 106, 109], "editor": [88, 109], "vi": [88, 109], "vim": [88, 109], "nano": [88, 109], "pico": [88, 109], "sai": [88, 109], "your_idsid": [88, 109], "hostnam": [88, 89, 109], "domain": [88, 98, 100, 109], "omit": [88, 109], "idsid": [88, 109], "authorized_kei": [88, 109], "past": [88, 108, 109], "AND": [88, 109], "yourself": [88, 109], "anyon": [88, 109], "600": [88, 109], "file1": [88, 109], "file2": [88, 109], "file3": [88, 109], "ip_or_hostnam": [88, 109], "target": [88, 109], "system": [88, 96, 104, 108, 109], "workload": [88, 90, 95, 109], "local": [88, 89, 96, 101, 102, 104, 109], "home": [88, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109], "insid": [88, 108, 109], "describ": 89, "root": [89, 102], "m": [89, 91, 98], "pandoc": 89, "few": 89, "doc": [89, 102, 103], "r": [89, 94, 98, 108], "navig": [89, 108], "doctest": 89, "ensur": [89, 94, 103, 105, 106], "produc": [89, 102], "similiar": 89, "summari": [89, 103, 104, 105], "failur": 89, "cleanup": 89, "succeed": 89, "final": [89, 96, 105], "html": [89, 96, 103], "clean": 89, "_build": 89, "server": [89, 108], "view": [89, 102, 108], "serv": [89, 98, 100, 103, 104, 106, 107], "127": 89, "port": [89, 108], "9999": 89, "anoth": [89, 105], "machin": [89, 94, 101, 104, 107], "appropri": [89, 98, 100], "listen_ip": 89, "listen_port": 89, "host": 89, "listen": 89, "now": [89, 102], "cli": [90, 95, 96], "vision": [90, 91, 92, 95, 96, 102], "low": [90, 95, 96, 102, 103, 104, 106, 107], "api": [90, 94, 95, 96, 102], "slurm": [90, 95], "begin": 91, "step": [91, 96, 98, 100, 102, 103, 104, 106, 107, 108], "concept": 91, "limit": 91, "particular": 91, "mkdir": [91, 92, 93, 94, 108], "wget": [91, 92, 93, 94], "storag": [91, 93, 103, 105, 106], "googleapi": [91, 93, 103, 105, 106], "org": [91, 93, 94, 98, 100, 101, 103, 104, 105, 106, 107], "example_imag": [91, 93, 103, 105, 106], "tgz": [91, 93, 103, 105, 106], "tar": [91, 92, 93, 102], "xzf": [91, 93], "c": [91, 93, 98, 101, 103, 107], "supress": 91, "tf_cpp_min_log_level": [91, 101, 105], "readi": [91, 98, 100, 106, 107], "resnet50v1": 91, "own": [91, 96, 102, 105], "_________________________________________________________________": 91, "param": 91, "keras_lay": 91, "keraslay": [91, 105], "2048": 91, "23561152": 91, "10245": 91, "total": [91, 101, 105], "23": 91, "571": 91, "397": 91, "trainabl": [91, 96, 105], "245": 91, "561": 91, "152": 91, "resnet_v1_50_checkpoint": 91, "86": 91, "248m": 91, "4600": 91, "8438": 91, "along": [91, 104, 107], "eval": [91, 92, 93, 94, 101, 105], "2022": 91, "06": 91, "28": 91, "info": [91, 98, 103, 104, 106, 107], "latenc": [91, 105], "031": 91, "throughput": [91, 101, 105], "329": 91, "878": 91, "sec": [91, 105], "exit": [91, 103, 104, 105, 106], "polici": [91, 103, 104, 105, 106], "58": 91, "statist": 91, "conv2d": 91, "53": 91, "matmul": 91, "maxpool": 91, "quantizev2": 91, "dequant": 91, "elaps": 91, "32164": 91, "26": 91, "13921": 91, "9008": 91, "9022": 91, "durat": 91, "13": 91, "9226": 91, "17": 91, "3321": 91, "baselin": [91, 102, 103, 104, 106, 107], "nc_workspac": [91, 105], "snapshot": 91, "meet": [91, 94, 101, 104, 107], "goal": [91, 102], "savedmodel": 91, "again": [91, 101, 102, 103, 104, 106, 107], "compar": [91, 102, 103, 104, 106, 107], "946": 91, "1056": 91, "940": 91, "so": [91, 101, 102, 103, 104, 105, 106, 107], "51": 91, "21": 91, "assum": [92, 102, 103, 104, 106, 107], "hazelnut": [92, 102], "crack": [92, 102], "cut": 92, "hole": [92, 102], "photo": [92, 93], "sinc": [92, 93, 94, 103, 106], "manual": 92, "bottl": 92, "dl": [92, 102], "fbaipublicfil": [92, 102], "100ep": [92, 102], "256b": [92, 102], "checkpoint_0099": [92, 102], "pth": [92, 102], "paul": [92, 102], "bergmann": [92, 102], "kilian": [92, 102], "batzner": [92, 102], "michael": [92, 94, 102], "fauser": [92, 102], "david": [92, 102, 103, 106], "sattlegg": [92, 102], "carsten": [92, 102], "steger": [92, 102], "real": [92, 102], "world": [92, 102], "unsupervis": [92, 102], "intern": [92, 102, 104], "journal": [92, 98, 100, 102, 103, 106], "comput": [92, 94, 96, 101, 102, 104, 107], "129": [92, 102], "1038": [92, 102], "1059": [92, 102], "2021": [92, 102], "doi": [92, 98, 100, 102], "1007": [92, 102], "s11263": [92, 102], "020": [92, 102], "01400": [92, 102], "ieee": [92, 100, 102], "cvf": [92, 102], "confer": [92, 94, 102, 104, 107], "pattern": [92, 102], "recognit": [92, 102], "cvpr": [92, 102], "9584": [92, 102], "9592": [92, 102], "2019": [92, 93, 94, 101, 102, 103, 106], "1109": [92, 100, 102], "00982": [92, 102], "onlin": [93, 103, 106], "tfflower": [93, 103, 106], "author": [93, 94, 98, 100, 101, 103, 104, 106, 107], "team": [93, 96, 103, 106], "month": [93, 94, 100, 101, 103, 104, 106, 107], "jan": [93, 103, 106], "year": [93, 94, 98, 100, 101, 103, 104, 106, 107], "url": [93, 94, 100, 101, 103, 104, 106, 107, 108], "although": 94, "flexibl": 94, "translat": [94, 104, 107], "tab": [94, 104, 107], "zip": [94, 104, 105, 107], "messag": [94, 104, 107], "ham": [94, 104, 107], "archiv": [94, 104, 107], "ic": [94, 104, 107], "uci": [94, 104, 107], "edu": [94, 103, 104, 107], "228": [94, 104, 107], "unzip": [94, 100], "copi": [94, 108], "smsspamcollection_numer": 94, "cp": 94, "smsspamcollect": [94, 104, 107], "sed": 94, "g": [94, 98], "demonstr": [94, 96, 99, 102, 103, 106], "imdb_review": [94, 107], "level": [94, 107], "sentiment": [94, 101, 104, 107], "analysi": [94, 98, 101, 102, 104, 107], "tweet_ev": [94, 104], "ag_new": [94, 104], "prerequisit": 94, "successfulli": 94, "saniti": [94, 102, 105], "inproceed": [94, 101, 104, 107], "maa": [94, 101, 104, 107], "etal": [94, 101, 104, 107], "2011": [94, 101, 104, 107], "acl": [94, 101, 104, 107], "hlt2011": [94, 101, 104, 107], "andrew": [94, 101, 104, 107], "l": [94, 98, 101, 103, 104, 106, 107], "dali": [94, 101, 104, 107], "raymond": [94, 101, 104, 107], "e": [94, 101, 104, 105, 107], "pham": [94, 101, 104, 107], "peter": [94, 101, 104, 107], "huang": [94, 101, 104, 107], "dan": [94, 101, 104, 107], "ng": [94, 101, 104, 107], "y": [94, 98, 100, 101, 104, 107], "pott": [94, 101, 104, 107], "christoph": [94, 101, 104, 107], "word": [94, 101, 104, 107], "vector": [94, 98, 100, 101, 104, 105, 107], "booktitl": [94, 101, 104, 107], "proceed": [94, 100, 101, 104, 107], "49th": [94, 101, 104, 107], "annual": [94, 101, 104, 107], "linguist": [94, 101, 104, 107], "languag": [94, 96, 101, 104, 107], "technologi": [94, 101, 104, 107], "june": [94, 101, 104, 107], "address": [94, 101, 102, 103, 104, 105, 106, 107], "portland": [94, 101, 104, 107], "oregon": [94, 101, 104, 107], "usa": [94, 101, 104, 107], "publish": [94, 98, 100, 101, 104, 107], "page": [94, 98, 100, 101, 104, 107], "142": [94, 101, 104, 107], "150": [94, 101, 104, 107], "aclweb": [94, 101, 104, 107], "anthologi": [94, 101, 104, 107], "p11": [94, 101, 104, 107], "1015": [94, 101, 104, 107], "wang2019glu": 94, "natur": [94, 96, 98], "understand": [94, 101], "wang": 94, "alex": [94, 103], "singh": 94, "amanpreet": 94, "julian": 94, "hill": 94, "felix": 94, "levi": 94, "omer": 94, "bowman": 94, "samuel": 94, "iclr": 94, "misc": [94, 101, 104, 107], "misc_sms_spam_collection_228": [94, 104, 107], "almeida": [94, 104, 107], "tiago": [94, 104, 107], "2012": [94, 104, 107], "howpublish": [94, 104, 107], "socher": 94, "2013": 94, "recurs": 94, "semant": [94, 104], "composition": 94, "over": [94, 96], "treebank": 94, "richard": 94, "perelygin": 94, "wu": 94, "jean": 94, "chuang": 94, "jason": 94, "man": 94, "empir": 94, "oct": [94, 100], "seattl": 94, "washington": 94, "d13": 94, "1170": 94, "1631": 94, "1642": 94, "problem": 96, "smaller": 96, "easier": 96, "varieti": [96, 103], "Its": 96, "librari": [96, 103, 104, 106, 107], "leverag": 96, "effici": 96, "usag": 96, "select": [96, 98, 100, 102, 103, 106, 107], "quickli": 96, "built": 96, "scale": [96, 103, 106], "crop": 96, "boost": [96, 105], "reduc": [96, 105], "speed": 96, "interfac": 96, "construct": 96, "overview": 96, "standard": 96, "metric": [96, 98, 100, 102, 103, 104, 105, 106, 107], "acknowledg": 96, "captur": 96, "bias": 96, "cautiou": 96, "consid": 96, "potenti": 96, "analyz": 96, "dispar": 96, "techniqu": [96, 102], "confus": 96, "matric": 96, "pr": 96, "curv": [96, 102], "roc": [96, 102], "gradcam": 96, "explan": 96, "clear": 96, "behavior": [96, 101], "crucial": 96, "mitig": 96, "explain": 96, "aforment": 96, "simpl": 96, "hoc": 96, "distil": 96, "card": 96, "report": [96, 98, 100], "track": [96, 105], "bug": 96, "enhanc": 96, "issu": [96, 102, 103, 104, 106, 107], "submit": 96, "suggest": 96, "legal": 96, "disclaim": 96, "licens": [96, 104, 107], "facilit": [98, 100], "textur": 98, "cancer": 98, "sota": [98, 100], "v1": [98, 100, 102], "achiev": [98, 100, 103], "pickl": [98, 100], "sklearn": [98, 100], "classification_report": [98, 100], "plot_util": [98, 100], "plot_curv": [98, 100], "factori": [98, 100, 102, 103, 104, 105, 106, 107], "cell": [98, 100, 101, 102, 103, 104, 105, 106, 107], "later": [98, 100, 103, 104, 106, 107], "colorectal_histologi": 98, "nclass": [98, 104, 106, 107], "onc": [98, 100, 102, 103, 104, 106, 107, 108], "abov": [98, 100, 102, 103, 104, 106, 107], "resiz": [98, 100, 102, 103, 106, 107], "match": [98, 100, 102, 103, 105, 106, 107], "them": [98, 100, 102, 103, 106, 107], "randomhorizontalandverticalflip": [98, 100, 106], "randomhorizontalflip": [98, 100, 102, 103, 106], "randomverticalflip": [98, 100, 106], "randomrot": [98, 100, 102, 103, 106], "randomzoom": [98, 100, 106], "80": [98, 100], "test_pct": [98, 100, 102], "paramt": [98, 100, 106, 107], "releas": [98, 100, 102, 103, 104, 106, 107], "date": [98, 100, 102, 103, 104, 106, 107], "descript": [98, 100, 102, 103, 104, 106, 107], "val_loss": [98, 100], "val_acc": [98, 100], "_checkpoint": [98, 100], "dump": [98, 100], "hist": 98, "pkl": [98, 100], "wb": [98, 100], "pick": [98, 100, 103, 104, 106, 107], "rb": [98, 100], "use_test_set": [98, 100, 102, 105], "actual_label": [98, 100, 107], "concaten": [98, 100], "_test_subset": [98, 100], "predicted_label": [98, 100], "articl": [98, 100, 103, 106], "kather2016multi": 98, "kather": 98, "jakob": 98, "nikola": 98, "wei": [98, 101], "cleo": 98, "aron": 98, "bianconi": 98, "francesco": 98, "melcher": 98, "susann": 98, "schad": 98, "lothar": 98, "gaiser": 98, "timo": 98, "marx": 98, "alexand": 98, "z": 98, "llner": 98, "frank": 98, "gerrit": 98, "scientif": 98, "volum": [98, 100], "27988": 98, "2016": [98, 103, 106], "group": [98, 101, 105], "z\u00f6llner": 98, "zenodo": 98, "5281": 98, "53169": 98, "ipynb": 99, "remot": 99, "sens": 99, "scene": 99, "resisc": 99, "rar": 100, "onedr": 100, "live": 100, "authkei": 100, "21ahhnahilzp": 100, "5fixj": 100, "cid": 100, "5c5e061130630a68": 100, "21107": 100, "parid": 100, "21112": 100, "action": 100, "custom_dataset_path": [100, 103, 106], "256": [100, 105], "resisc45_hist": 100, "cheng_2017": 100, "state": 100, "art": 100, "105": 100, "issn": 100, "1558": 100, "2256": 100, "dx": 100, "jproc": 100, "2017": [100, 104], "2675998": 100, "institut": 100, "electr": 100, "electron": 100, "engin": 100, "cheng": 100, "gong": 100, "han": 100, "junwei": 100, "lu": 100, "xiaoqiang": 100, "1865": 100, "1883": 100, "sequenc": [101, 105], "control": [101, 105], "hood": 101, "combin": 101, "chart": [101, 105], "psutil": [101, 105], "tokenizers_parallel": 101, "ticker": [101, 105], "mtick": [101, 105], "panda": [101, 102, 103, 104, 105, 106, 107], "pd": [101, 102, 103, 104, 105, 106, 107], "datacollatorwithpad": 101, "loader": 101, "platform_util": [101, 105], "cpuinfo": [101, 105], "optimizedplatformutil": [101, 105], "platformutil": [101, 105], "dataset_directori": [101, 105], "output_directori": [101, 105], "store": 101, "hf_home": 101, "set_verbos": 101, "frame": [101, 104, 105, 107], "style": [101, 104, 105, 107], "table_styl": [101, 105], "selector": [101, 105, 107], "caption": [101, 105], "prop": [101, 105, 107], "align": [101, 105, 107], "center": [101, 105, 107], "black": [101, 102, 105], "font": [101, 105], "16px": [101, 105], "0071c5": [101, 105], "dark_blu": [101, 105], "003c71": [101, 105], "ffcc4d": 101, "cpu_info": [101, 105], "famili": [101, 105], "cpu_famili": [101, 105], "cpu_model": [101, 105], "cpu_typ": [101, 105], "physic": [101, 105], "socket": [101, 105], "cores_per_socket": [101, 105], "cpufreq": [101, 105], "cpu_freq": [101, 105], "frequenc": [101, 105], "cpu_socket_count": [101, 105], "except": [101, 105], "warn": [101, 105], "unabl": 101, "svmem": [101, 105], "virtual_memori": [101, 105], "__version__": [101, 105], "supported_model": [101, 105], "relev": [101, 105], "70": [101, 105], "training_epoch": [101, 105], "eval_split": 101, "validation_split": [101, 105], "training_split": [101, 105], "batch_size_list": [101, 105], "3e": 101, "max_sequence_length": 101, "pad": [101, 105], "max_length": 101, "use_ipex": 101, "bfloatf16": 101, "isinst": [101, 105], "sum": [101, 102, 105], "greater": [101, 105], "len": [101, 102, 105, 107], "section": [101, 102, 103, 104, 105, 106, 107], "take": [101, 102, 103, 104, 105, 106, 107], "set_se": [101, 105], "append": [101, 104, 105, 107], "hf_dataset": 101, "cache_dir": 101, "hf_token": 101, "autotoken": 101, "from_pretrain": 101, "text_column_nam": 101, "col_nam": 101, "def": [101, 102, 105, 107], "tokenize_funct": 101, "tokenized_hf_dataset": 101, "set_format": 101, "percentag": [101, 102, 105], "hf_train_dataset": 101, "hf_train_subset": 101, "hf_eval_subset": 101, "dataset_length": 101, "train_siz": [101, 105], "eval_s": 101, "manual_se": 101, "dataset_indic": 101, "randperm": 101, "tolist": 101, "train_indic": 101, "eval_indic": 101, "hf_train_dataset_length": 101, "hf_eval_dataset_length": 101, "compute_metr": 101, "evalpredict": 101, "pred": 101, "tupl": 101, "argmax": [101, 107], "label_id": 101, "astyp": 101, "float32": [101, 102], "hf_saved_model_path": 101, "hf_training_metr": 101, "hf_eval_result": 101, "enumer": [101, 102, 104, 105, 107], "automodelforsequenceclassif": 101, "num_label": 101, "hf_model_b": 101, "even": 101, "thrown": 101, "eval_dataset": 101, "training_arg": 101, "trainingargu": 101, "do_train": 101, "per_device_train_batch_s": 101, "per_device_eval_batch_s": 101, "num_train_epoch": 101, "evaluation_strategi": 101, "push_to_hub": 101, "no_cuda": 101, "overwrite_output_dir": 101, "data_se": 101, "train_dataset": 101, "eval_result": 101, "save_model": 101, "gather": 101, "evalut": 101, "tlt_trainer_saved_model_path": 101, "tlt_trainer_training_metr": 101, "tlt_trainer_eval_result": 101, "tlt_torch_saved_model_path": 101, "tlt_torch_training_metr": 101, "tlt_torch_eval_result": 101, "split_nam": 101, "doesn": [101, 105], "tlt_train_dataset_length": 101, "train_subset": [101, 105], "test_subset": [101, 105], "tlt_eval_dataset_length": 101, "validation_subset": [101, 105], "length": 101, "assert": 101, "ntrain": 101, "eval_metr": 101, "display_df": [101, 105], "df": [101, 105], "datafram": [101, 104, 105, 107], "train_loss": 101, "train_samples_per_second": 101, "train_runtim": 101, "br": [101, 105], "hf": 101, "runtim": 101, "set_table_styl": [101, 105, 107], "set_capt": [101, 105], "eval_accuraci": 101, "eval_loss": 101, "eval_samples_per_second": 101, "eval_runtim": 101, "took": [101, 105], "lower": 101, "better": [101, 102], "thoughput": 101, "bar": [101, 105], "b": [101, 102, 105], "hf_train_runtim": 101, "tlt_trainer_train_runtim": 101, "tlt_torch_train_runtim": 101, "hf_train_throughput": 101, "tlt_trainer_train_throughput": 101, "tlt_torch_train_thoughput": 101, "arang": [101, 105], "width": [101, 105], "multipli": [101, 105], "fig": [101, 105], "ax1": [101, 105], "ax2": [101, 105], "set_figheight": [101, 105], "15": [101, 105], "set_figwidth": [101, 105], "rects_tf": [101, 105], "rects_tlt_train": 101, "rects_tlt_torch": 101, "bar_label": [101, 105], "legend": [101, 105], "set_ylabel": [101, 105], "set_titl": [101, 105], "set_xtick": [101, 105], "set_ymargin": [101, 105], "ncol": [101, 105], "were": [101, 105], "decim": [101, 105], "round": [101, 105], "hf_eval_acc": 101, "tlt_trainer_eval_acc": 101, "tlt_torch_eval_acc": 101, "hf_eval_runtim": 101, "tlt_trainer_eval_runtim": 101, "tlt_torch_eval_runtim": 101, "hf_eval_throughput": 101, "tlt_trainer_eval_throughput": 101, "tlt_torch_eval_thoughput": 101, "ax3": 101, "conclud": 101, "back": 101, "nuse": 101, "devlin2019bert": 101, "bidirect": 101, "jacob": 101, "devlin": 101, "ming": 101, "kenton": 101, "lee": 101, "kristina": 101, "toutanova": 101, "eprint": [101, 107], "1810": 101, "04805": 101, "archiveprefix": [101, 107], "arxiv": [101, 107], "primaryclass": [101, 107], "cl": 101, "driver": [102, 103], "readm": 102, "offici": [102, 103], "habana": [102, 103], "pil": [102, 103, 106], "interpolationmod": 102, "io": [102, 103], "bytesio": [102, 103], "file_util": [102, 103, 104, 105, 106, 107], "download_and_extract_tar_fil": [102, 103, 105, 106], "download_fil": [102, 103, 106], "path_to_model_fil": 102, "png": 102, "would": 102, "layout": [102, 103, 106], "toothbrush": 102, "encod": 102, "exact": 102, "re": 102, "certain": 102, "img_dir": 102, "_dataset": 102, "defect_nam": 102, "_validation_typ": 102, "scar": 102, "3wai": 102, "union": 102, "interpol": 102, "lanczo": 102, "plot_imag": 102, "sup_titl": 102, "18": [102, 103, 105, 106], "good_sampl": 102, "plot": [102, 105], "auroc": 102, "area": 102, "No": 102, "simpli": 102, "self": [102, 105], "supervis": 102, "network": [102, 107], "siames": 102, "meaning": 102, "represent": 102, "differenti": 102, "regular": 102, "underli": 102, "backbon": 102, "embed": 102, "strategi": 102, "patch": 102, "preview": 102, "simsiam_imag": 102, "four": 102, "cutpastenorm": 102, "cutpastescar": 102, "cutpaste3wai": 102, "cutpasteunion": 102, "cutpaste_imag": 102, "pca_compon": 102, "trained_model": 102, "path_to_checkpoints_fil": 102, "imageanomalydetectiondataset": 102, "turn": 102, "examin": 102, "decid": 102, "list_lay": [102, 103, 104], "return_typ": 102, "due": [102, 103], "backend": [102, 103], "known": [102, 103, 104, 105, 106, 107], "sometim": [102, 103, 104, 106, 107], "zmq": [102, 103, 104, 105, 106, 107], "zmqerror": [102, 103, 104, 105, 106, 107], "rerun": [102, 103, 104, 105, 106, 107], "recip": [102, 103, 104, 106, 107], "sever": [102, 103, 104, 106, 107], "minut": [102, 103, 104, 106, 107], "inc_output_dir": [102, 103, 104, 106, 107], "basenam": [102, 103, 104, 105, 106, 107], "quantized_result": [102, 103, 104, 107], "classfic": [103, 106], "uninstal": 103, "speci": [103, 106], "similarli": [103, 105, 106], "comment": [103, 106], "download_url": [103, 106], "subsequ": [103, 108], "reus": [103, 108], "These": [103, 105], "apppli": 103, "haven": [103, 106, 108], "imagenet": [103, 105, 106], "labels_fil": [103, 106], "imagenetlabel": [103, 106], "labels_file_path": 103, "imagenet_label": [103, 106], "readlin": [103, 106], "imagenet_class": [103, 106], "_devic": 103, "unfrozen": [103, 104], "unfreeze_lay": [103, 104], "unfreez": [103, 104], "lastli": [103, 104, 107], "earlier": [103, 106], "wasn": [103, 106], "web": [103, 106], "image_url": [103, 106], "c8": [103, 106], "staticflickr": [103, 106], "7095": [103, 106], "7210797228_c7fe51c3cb_z": [103, 106], "image_shap": [103, 106], "255": [103, 105, 106], "channel": 103, "newaxi": [103, 106], "moveaxi": 103, "tensor": [103, 104], "constrain": [103, 104, 106], "get_inc_config": [103, 105], "accuracy_criterion_rel": [103, 105], "exit_policy_timeout": [103, 105], "exit_policy_max_tri": [103, 105], "inc_util": [103, 105], "krizhevski": 103, "cifar": 103, "2009": 103, "toronto": 103, "kriz": 103, "openimag": [103, 106], "krasin": [103, 106], "ivan": [103, 106], "duerig": [103, 106], "tom": [103, 106], "alldrin": [103, 106], "neil": [103, 106], "veit": [103, 106], "andrea": [103, 106], "abu": [103, 106], "el": [103, 106], "haija": [103, 106], "sami": [103, 106], "belongi": [103, 106], "serg": [103, 106], "cai": [103, 106], "feng": [103, 106], "zheyun": [103, 106], "ferrari": [103, 106], "vittorio": [103, 106], "gome": [103, 106], "victor": [103, 106], "gupta": [103, 106], "abhinav": [103, 106], "narayanan": [103, 106], "dhyanesh": [103, 106], "sun": [103, 106], "chen": [103, 106], "chechik": [103, 106], "gal": [103, 106], "murphi": [103, 106], "kevin": [103, 106], "download_and_extract_zip_fil": [104, 107], "mesag": [104, 107], "condit": [104, 107], "corpor": [104, 107], "modifi": 104, "csv_path": 104, "dataset_url": [104, 105], "sms_spam_collect": [104, 107], "csv_name": 104, "label_nam": 104, "renam": 104, "know": 104, "renamed_csv": 104, "emoji": 104, "emot": 104, "hate": 104, "ironi": 104, "offens": 104, "stance_abort": 104, "stance_ath": 104, "stance_clim": 104, "stance_feminist": 104, "stance_hillari": 104, "data_batch": [104, 107], "batch_predict": [104, 105, 107], "max_item": [104, 107], "score": [104, 107], "prediction_list": [104, 107], "input_id": 104, "get_text": 104, "get_str_label": [104, 107], "break": [104, 107], "result_df": [104, 107], "hide": [104, 107], "raw": [104, 107], "movi": [104, 107], "un": [104, 107], "compress": [104, 107], "du": [104, 107], "h": [104, 107], "rosenthal2017semev": 104, "semev": 104, "rosenth": 104, "sara": 104, "farra": 104, "noura": 104, "nakov": 104, "preslav": 104, "11th": 104, "workshop": 104, "502": 104, "518": 104, "math": 105, "tempfil": 105, "tensorflow_hub": 105, "ignor": 105, "filterwarn": 105, "get_logg": 105, "setlevel": 105, "cach": 105, "tfhub_cache_dir": 105, "tfhub_modul": 105, "orang": 105, "ff6f00": 105, "f3d54e": 105, "caption_styl": 105, "dict": 105, "14pt": 105, "line_styl": 105, "solid": 105, "dot": 105, "dash": 105, "dashdot": 105, "marker": 105, "marker_styl": 105, "major_vers": 105, "minor_vers": 105, "onednn_en": 105, "_pywrap_util_port": 105, "tf_enable_onednn_opt": 105, "on_onednn": 105, "ismklen": 105, "pywrap_tensorflow": 105, "onednn": 105, "nvidia": 105, "gpu": 105, "cuda_visible_devic": 105, "handl": 105, "model_info": 105, "feature_vector_handl": 105, "feature_vector": 105, "unsupport": 105, "dataset_subdir": 105, "nfolder": 105, "listdir": [105, 107], "isdir": 105, "timercallback": 105, "epoch_tim": 105, "eval_tim": 105, "predict_tim": 105, "on_epoch_begin": 105, "tf_timestamp": 105, "timestamp": 105, "on_epoch_end": 105, "on_test_begin": 105, "on_test_end": 105, "on_predict_begin": 105, "on_predict_end": 105, "goe": 105, "pythonhashse": 105, "tf_time_callback_list": 105, "tf_dataset_list": 105, "tf_model_list": 105, "tf_export_dir_list": 105, "tf_history_list": 105, "val_dataset_dir": 105, "train_dataset_dir": 105, "image_dataset_from_directori": 105, "cardin": 105, "reshuffle_each_iter": 105, "sub": 105, "train_d": 105, "val_d": 105, "val_siz": 105, "normalization_lay": 105, "rescal": 105, "preprocess_imag": 105, "resize_with_pad": 105, "batched_train_d": 105, "batched_val_d": 105, "feature_extractor_lay": 105, "input_shap": 105, "accord": 105, "tf_model": 105, "sparsecategoricalcrossentropi": 105, "from_logit": 105, "tf_time_callback": 105, "tf_export_dir": 105, "tf_saved_model": 105, "mkdtemp": 105, "prefix": 105, "simplifi": 105, "optimizedplatform": 105, "optimized_platform_util": 105, "omp_num_thread": 105, "kmp_blocktim": 105, "kmp_affin": 105, "granular": 105, "compact": 105, "tf_num_intraop_thread": 105, "tf_num_interop_thread": 105, "force_reset_env_var": 105, "env_vars_dict": 105, "tlt_time_callback_list": 105, "tlt_dataset_list": 105, "tlt_model_list": 105, "tlt_export_dir_list": 105, "tlt_history_list": 105, "tlt_model": 105, "tlt_dataset": 105, "tlt_time_callback": 105, "tlt_export_dir": 105, "tlt_saved_model": 105, "tlt_quantization_dir_list": 105, "tlt_optimized_dir_list": 105, "inc_config_list": 105, "relative_accuracy_criterion": 105, "tlt_quantization_dir": 105, "tlt_quantized_model": 105, "tlt_optimized_dir": 105, "tlt_optimized_model": 105, "aim": 105, "maintain": 105, "close": 105, "amount": 105, "optimize_graph": 105, "versu": 105, "had": 105, "tf_images_per_second": 105, "tlt_images_per_second": 105, "performance_delta": 105, "2f": 105, "epoch_list": 105, "tf_train_tim": 105, "tlt_train_tim": 105, "linestyl": 105, "xlabel": 105, "ylabel": 105, "tf_acc_tim": 105, "tlt_acc_tim": 105, "tf_loss_tim": 105, "tlt_loss_tim": 105, "tf_eval_callback_list": 105, "tf_eval_metrics_list": 105, "tf_eval_callback": 105, "tlt_eval_callback_list": 105, "tlt_eval_metrics_list": 105, "tlt_eval_callback": 105, "tf_eval_tim": 105, "tlt_eval_tim": 105, "rects_tlt": 105, "tf_acc_index": 105, "metrics_nam": [105, 107], "tlt_acc_index": 105, "_model": [105, 107], "tf_eval_accuraci": 105, "tlt_eval_accuraci": 105, "yaxi": 105, "set_major_formatt": 105, "percentformatt": 105, "libari": 105, "tf_predict_callback_list": 105, "tf_predict_tim": 105, "dataset_batch": 105, "tf_batch": 105, "tlt_predict_callback_list": 105, "tlt_predict_tim": 105, "tlt_batch": 105, "ax": 105, "test_dataset_dir": 105, "elif": 105, "issuen": 105, "happen": 105, "tf_latency_list": 105, "tf_throughput_list": 105, "90": 105, "tf_latenc": 105, "tf_throughput": 105, "calculate_latency_and_throughput": 105, "tlt_latency_list": 105, "tlt_throughput_list": 105, "tlt_result": 105, "tlt_latenc": 105, "tlt_throughput": 105, "quantized_latency_list": 105, "quantized_throughput_list": 105, "tlt_quantized_lat": 105, "tlt_quantized_throughput": 105, "nquantiz": 105, "fail": 105, "tlt_quantized_result": 105, "optimized_latency_list": 105, "optimized_throughput_list": 105, "tlt_optimized_lat": 105, "tlt_optimized_throughput": 105, "noptim": 105, "tlt_optimized_result": 105, "isnan": 105, "rects_quant": 105, "rects_opt": 105, "millisecond": 105, "affect": 105, "preprocessor": 106, "downloaded_fil": 106, "get_fil": 106, "norm_imag": 106, "vmin": 106, "vmax": 106, "likewis": 106, "zip_file_url": 107, "sms_data_directori": 107, "ag_news_subset": 107, "metric_nam": 107, "metric_valu": 107, "num_class": 107, "decod": 107, "utf": 107, "get_static_valu": 107, "th": 107, "awesom": 107, "zhang2015characterlevel": 107, "convolut": 107, "xiang": 107, "zhang": 107, "junbo": 107, "zhao": 107, "yann": 107, "lecun": 107, "2015": 107, "1509": 107, "01626": 107, "lg": 107, "tutori": 108, "e2": 108, "comparison": 108, "upgrad": 108, "8888": 108, "termin": 108, "browser": 108}, "objects": {"tlt.datasets.dataset": [[4, 0, 1, "", "BaseDataset"]], "tlt.datasets.dataset.BaseDataset": [[4, 1, 1, "", "__init__"]], "tlt.datasets": [[86, 2, 0, "-", "dataset_factory"]], "tlt.datasets.dataset_factory": [[86, 3, 1, "", "get_dataset"], [86, 3, 1, "", "load_dataset"]], "tlt.datasets.hf_dataset": [[5, 0, 1, "", "HFDataset"]], "tlt.datasets.hf_dataset.HFDataset": [[5, 1, 1, "", "__init__"]], "tlt.datasets.image_anomaly_detection.pytorch_custom_image_anomaly_detection_dataset": [[6, 0, 1, "", "PyTorchCustomImageAnomalyDetectionDataset"]], "tlt.datasets.image_anomaly_detection.pytorch_custom_image_anomaly_detection_dataset.PyTorchCustomImageAnomalyDetectionDataset": [[6, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.image_classification_dataset": [[7, 0, 1, "", "ImageClassificationDataset"]], "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset": [[7, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset": [[8, 0, 1, "", "PyTorchCustomImageClassificationDataset"]], "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset": [[8, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.tf_custom_image_classification_dataset": [[9, 0, 1, "", "TFCustomImageClassificationDataset"]], "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset": [[9, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.tfds_image_classification_dataset": [[10, 0, 1, "", "TFDSImageClassificationDataset"]], "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset": [[10, 1, 1, "", "__init__"]], "tlt.datasets.image_classification.torchvision_image_classification_dataset": [[11, 0, 1, "", "TorchvisionImageClassificationDataset"]], "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset": [[11, 1, 1, "", "__init__"]], "tlt.datasets.pytorch_dataset": [[12, 0, 1, "", "PyTorchDataset"]], "tlt.datasets.pytorch_dataset.PyTorchDataset": [[12, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.hf_custom_text_classification_dataset": [[13, 0, 1, "", "HFCustomTextClassificationDataset"]], "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset": [[13, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.hf_text_classification_dataset": [[14, 0, 1, "", "HFTextClassificationDataset"]], "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset": [[14, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.text_classification_dataset": [[15, 0, 1, "", "TextClassificationDataset"]], "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset": [[15, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.tf_custom_text_classification_dataset": [[16, 0, 1, "", "TFCustomTextClassificationDataset"]], "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset": [[16, 1, 1, "", "__init__"]], "tlt.datasets.text_classification.tfds_text_classification_dataset": [[17, 0, 1, "", "TFDSTextClassificationDataset"]], "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset": [[17, 1, 1, "", "__init__"]], "tlt.datasets.text_generation.hf_custom_text_generation_dataset": [[18, 0, 1, "", "HFCustomTextGenerationDataset"]], "tlt.datasets.text_generation.hf_custom_text_generation_dataset.HFCustomTextGenerationDataset": [[18, 1, 1, "", "__init__"]], "tlt.datasets.text_generation.text_generation_dataset": [[19, 0, 1, "", "TextGenerationDataset"]], "tlt.datasets.text_generation.text_generation_dataset.TextGenerationDataset": [[19, 1, 1, "", "__init__"]], "tlt.datasets.tf_dataset": [[20, 0, 1, "", "TFDataset"]], "tlt.datasets.tf_dataset.TFDataset": [[20, 1, 1, "", "__init__"]], "tlt.models.hf_model": [[21, 0, 1, "", "HFModel"]], "tlt.models.hf_model.HFModel": [[21, 1, 1, "", "__init__"]], "tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model": [[22, 0, 1, "", "PyTorchImageAnomalyDetectionModel"]], "tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel": [[22, 1, 1, "", "__init__"], [23, 1, 1, "", "benchmark"], [24, 1, 1, "", "quantize"], [25, 1, 1, "", "train"]], "tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model": [[26, 0, 1, "", "TorchvisionImageAnomalyDetectionModel"]], "tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel": [[26, 1, 1, "", "__init__"], [27, 1, 1, "", "benchmark"], [28, 1, 1, "", "quantize"], [29, 1, 1, "", "train"]], "tlt.models.image_classification.image_classification_model": [[30, 0, 1, "", "ImageClassificationModel"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel": [[30, 1, 1, "", "__init__"], [31, 1, 1, "", "benchmark"], [32, 1, 1, "", "quantize"], [33, 1, 1, "", "train"]], "tlt.models.image_classification.keras_image_classification_model": [[34, 0, 1, "", "KerasImageClassificationModel"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel": [[34, 1, 1, "", "__init__"], [35, 1, 1, "", "benchmark"], [36, 1, 1, "", "optimize_graph"], [37, 1, 1, "", "quantize"], [38, 1, 1, "", "train"]], "tlt.models.image_classification.pytorch_hub_image_classification_model": [[39, 0, 1, "", "PyTorchHubImageClassificationModel"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel": [[39, 1, 1, "", "__init__"], [40, 1, 1, "", "benchmark"], [41, 1, 1, "", "quantize"], [42, 1, 1, "", "train"]], "tlt.models.image_classification.pytorch_image_classification_model": [[43, 0, 1, "", "PyTorchImageClassificationModel"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel": [[43, 1, 1, "", "__init__"], [44, 1, 1, "", "benchmark"], [45, 1, 1, "", "quantize"], [46, 1, 1, "", "train"]], "tlt.models.image_classification.tf_image_classification_model": [[47, 0, 1, "", "TFImageClassificationModel"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel": [[47, 1, 1, "", "__init__"], [48, 1, 1, "", "benchmark"], [49, 1, 1, "", "optimize_graph"], [50, 1, 1, "", "quantize"], [51, 1, 1, "", "train"]], "tlt.models.image_classification.tfhub_image_classification_model": [[52, 0, 1, "", "TFHubImageClassificationModel"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel": [[52, 1, 1, "", "__init__"], [53, 1, 1, "", "benchmark"], [54, 1, 1, "", "optimize_graph"], [55, 1, 1, "", "quantize"], [56, 1, 1, "", "train"]], "tlt.models.image_classification.torchvision_image_classification_model": [[57, 0, 1, "", "TorchvisionImageClassificationModel"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel": [[57, 1, 1, "", "__init__"], [58, 1, 1, "", "benchmark"], [59, 1, 1, "", "quantize"], [60, 1, 1, "", "train"]], "tlt.models.model": [[61, 0, 1, "", "BaseModel"]], "tlt.models.model.BaseModel": [[61, 1, 1, "", "__init__"]], "tlt.models": [[86, 2, 0, "-", "model_factory"]], "tlt.models.model_factory": [[86, 3, 1, "", "get_model"], [86, 3, 1, "", "get_supported_models"], [86, 3, 1, "", "load_model"], [86, 3, 1, "", "print_supported_models"]], "tlt.models.pytorch_model": [[62, 0, 1, "", "PyTorchModel"]], "tlt.models.pytorch_model.PyTorchModel": [[62, 1, 1, "", "__init__"]], "tlt.models.text_classification.pytorch_hf_text_classification_model": [[63, 0, 1, "", "PyTorchHFTextClassificationModel"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel": [[63, 1, 1, "", "__init__"], [64, 1, 1, "", "benchmark"], [65, 1, 1, "", "quantize"], [66, 1, 1, "", "train"]], "tlt.models.text_classification.text_classification_model": [[67, 0, 1, "", "TextClassificationModel"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel": [[67, 1, 1, "", "__init__"], [68, 1, 1, "", "benchmark"], [69, 1, 1, "", "quantize"], [70, 1, 1, "", "train"]], "tlt.models.text_classification.tf_hf_text_classification_model": [[71, 0, 1, "", "TFHFTextClassificationModel"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel": [[71, 1, 1, "", "__init__"], [72, 1, 1, "", "benchmark"], [73, 1, 1, "", "optimize_graph"], [74, 1, 1, "", "quantize"], [75, 1, 1, "", "train"]], "tlt.models.text_classification.tf_text_classification_model": [[76, 0, 1, "", "TFTextClassificationModel"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel": [[76, 1, 1, "", "__init__"], [77, 1, 1, "", "benchmark"], [78, 1, 1, "", "optimize_graph"], [79, 1, 1, "", "quantize"], [80, 1, 1, "", "train"]], "tlt.models.text_generation.pytorch_hf_text_generation_model": [[81, 0, 1, "", "PyTorchHFTextGenerationModel"]], "tlt.models.text_generation.pytorch_hf_text_generation_model.PyTorchHFTextGenerationModel": [[81, 1, 1, "", "__init__"], [82, 1, 1, "", "train"]], "tlt.models.text_generation.text_generation_model": [[83, 0, 1, "", "TextGenerationModel"]], "tlt.models.text_generation.text_generation_model.TextGenerationModel": [[83, 1, 1, "", "__init__"], [84, 1, 1, "", "train"]], "tlt.models.tf_model": [[85, 0, 1, "", "TFModel"]], "tlt.models.tf_model.TFModel": [[85, 1, 1, "", "__init__"]], "tlt-benchmark": [[87, 4, 1, "cmdoption-tlt-benchmark-batch-size", "--batch-size"], [87, 4, 1, "cmdoption-tlt-benchmark-batch-size", "--batch_size"], [87, 4, 1, "cmdoption-tlt-benchmark-dataset-dir", "--dataset-dir"], [87, 4, 1, "cmdoption-tlt-benchmark-dataset-file", "--dataset-file"], [87, 4, 1, "cmdoption-tlt-benchmark-dataset-dir", "--dataset_dir"], [87, 4, 1, "cmdoption-tlt-benchmark-dataset-file", "--dataset_file"], [87, 4, 1, "cmdoption-tlt-benchmark-delimiter", "--delimiter"], [87, 4, 1, "cmdoption-tlt-benchmark-model-dir", "--model-dir"], [87, 4, 1, "cmdoption-tlt-benchmark-model-dir", "--model_dir"], [87, 4, 1, "cmdoption-tlt-benchmark-output-dir", "--output-dir"], [87, 4, 1, "cmdoption-tlt-benchmark-output-dir", "--output_dir"]], "tlt-eval": [[87, 4, 1, "cmdoption-tlt-eval-class-names", "--class-names"], [87, 4, 1, "cmdoption-tlt-eval-class-names", "--class_names"], [87, 4, 1, "cmdoption-tlt-eval-dataset-catalog", "--dataset-catalog"], [87, 4, 1, "cmdoption-tlt-eval-dataset-dir", "--dataset-dir"], [87, 4, 1, "cmdoption-tlt-eval-0", "--dataset-file"], [87, 4, 1, "cmdoption-tlt-eval-dataset-name", "--dataset-name"], [87, 4, 1, "cmdoption-tlt-eval-dataset-catalog", "--dataset_catalog"], [87, 4, 1, "cmdoption-tlt-eval-dataset-dir", "--dataset_dir"], [87, 4, 1, "cmdoption-tlt-eval-0", "--dataset_file"], [87, 4, 1, "cmdoption-tlt-eval-dataset-name", "--dataset_name"], [87, 4, 1, "cmdoption-tlt-eval-delimiter", "--delimiter"], [87, 4, 1, "cmdoption-tlt-eval-model-dir", "--model-dir"], [87, 4, 1, "cmdoption-tlt-eval-model-name", "--model-name"], [87, 4, 1, "cmdoption-tlt-eval-model-dir", "--model_dir"], [87, 4, 1, "cmdoption-tlt-eval-model-name", "--model_name"], [87, 4, 1, "cmdoption-tlt-eval-prompt-with-context", "--prompt-with-context"], [87, 4, 1, "cmdoption-tlt-eval-prompt-without-context", "--prompt-without-context"], [87, 4, 1, "cmdoption-tlt-eval-prompt-with-context", "--prompt_with_context"], [87, 4, 1, "cmdoption-tlt-eval-prompt-without-context", "--prompt_without_context"]], "tlt-generate": [[87, 4, 1, "cmdoption-tlt-generate-max-new-tokens", "--max-new-tokens"], [87, 4, 1, "cmdoption-tlt-generate-max-new-tokens", "--max_new_tokens"], [87, 4, 1, "cmdoption-tlt-generate-model-dir", "--model-dir"], [87, 4, 1, "cmdoption-tlt-generate-model-name", "--model-name"], [87, 4, 1, "cmdoption-tlt-generate-model-dir", "--model_dir"], [87, 4, 1, "cmdoption-tlt-generate-model-name", "--model_name"], [87, 4, 1, "cmdoption-tlt-generate-num-beams", "--num-beams"], [87, 4, 1, "cmdoption-tlt-generate-num-beams", "--num_beams"], [87, 4, 1, "cmdoption-tlt-generate-prompt", "--prompt"], [87, 4, 1, "cmdoption-tlt-generate-repetition-penalty", "--repetition-penalty"], [87, 4, 1, "cmdoption-tlt-generate-repetition-penalty", "--repetition_penalty"], [87, 4, 1, "cmdoption-tlt-generate-temperature", "--temperature"], [87, 4, 1, "cmdoption-tlt-generate-top-k", "--top-k"], [87, 4, 1, "cmdoption-tlt-generate-top-p", "--top-p"], [87, 4, 1, "cmdoption-tlt-generate-top-k", "--top_k"], [87, 4, 1, "cmdoption-tlt-generate-top-p", "--top_p"]], "tlt-list-models": [[87, 4, 1, "cmdoption-tlt-list-models-f", "--framework"], [87, 4, 1, "cmdoption-tlt-list-models-use-case", "--use-case"], [87, 4, 1, "cmdoption-tlt-list-models-use-case", "--use_case"], [87, 4, 1, "cmdoption-tlt-list-models-verbose", "--verbose"], [87, 4, 1, "cmdoption-tlt-list-models-f", "-f"]], "tlt-optimize": [[87, 4, 1, "cmdoption-tlt-optimize-model-dir", "--model-dir"], [87, 4, 1, "cmdoption-tlt-optimize-model-dir", "--model_dir"], [87, 4, 1, "cmdoption-tlt-optimize-output-dir", "--output-dir"], [87, 4, 1, "cmdoption-tlt-optimize-output-dir", "--output_dir"]], "tlt-quantize": [[87, 4, 1, "cmdoption-tlt-quantize-accuracy-criterion", "--accuracy-criterion"], [87, 4, 1, "cmdoption-tlt-quantize-accuracy-criterion", "--accuracy_criterion"], [87, 4, 1, "cmdoption-tlt-quantize-approach", "--approach"], [87, 4, 1, "cmdoption-tlt-quantize-batch-size", "--batch-size"], [87, 4, 1, "cmdoption-tlt-quantize-batch-size", "--batch_size"], [87, 4, 1, "cmdoption-tlt-quantize-dataset-dir", "--dataset-dir"], [87, 4, 1, "cmdoption-tlt-quantize-dataset-file", "--dataset-file"], [87, 4, 1, "cmdoption-tlt-quantize-dataset-dir", "--dataset_dir"], [87, 4, 1, "cmdoption-tlt-quantize-dataset-file", "--dataset_file"], [87, 4, 1, "cmdoption-tlt-quantize-delimiter", "--delimiter"], [87, 4, 1, "cmdoption-tlt-quantize-max-trials", "--max-trials"], [87, 4, 1, "cmdoption-tlt-quantize-max-trials", "--max_trials"], [87, 4, 1, "cmdoption-tlt-quantize-model-dir", "--model-dir"], [87, 4, 1, "cmdoption-tlt-quantize-model-dir", "--model_dir"], [87, 4, 1, "cmdoption-tlt-quantize-output-dir", "--output-dir"], [87, 4, 1, "cmdoption-tlt-quantize-output-dir", "--output_dir"], [87, 4, 1, "cmdoption-tlt-quantize-timeout", "--timeout"]], "tlt-train": [[87, 4, 1, "cmdoption-tlt-train-add-aug", "--add-aug"], [87, 4, 1, "cmdoption-tlt-train-add-aug", "--add_aug"], [87, 4, 1, "cmdoption-tlt-train-class-names", "--class-names"], [87, 4, 1, "cmdoption-tlt-train-class-names", "--class_names"], [87, 4, 1, "cmdoption-tlt-train-context-key", "--context-key"], [87, 4, 1, "cmdoption-tlt-train-context-key", "--context_key"], [87, 4, 1, "cmdoption-tlt-train-cutpaste", "--cutpaste"], [87, 4, 1, "cmdoption-tlt-train-dataset-catalog", "--dataset-catalog"], [87, 4, 1, "cmdoption-tlt-train-dataset-dir", "--dataset-dir"], [87, 4, 1, "cmdoption-tlt-train-dataset-file", "--dataset-file"], [87, 4, 1, "cmdoption-tlt-train-dataset-name", "--dataset-name"], [87, 4, 1, "cmdoption-tlt-train-dataset-catalog", "--dataset_catalog"], [87, 4, 1, "cmdoption-tlt-train-dataset-dir", "--dataset_dir"], [87, 4, 1, "cmdoption-tlt-train-dataset-file", "--dataset_file"], [87, 4, 1, "cmdoption-tlt-train-dataset-name", "--dataset_name"], [87, 4, 1, "cmdoption-tlt-train-delimiter", "--delimiter"], [87, 4, 1, "cmdoption-tlt-train-d", "--distributed"], [87, 4, 1, "cmdoption-tlt-train-early-stopping", "--early-stopping"], [87, 4, 1, "cmdoption-tlt-train-early-stopping", "--early_stopping"], [87, 4, 1, "cmdoption-tlt-train-epochs", "--epochs"], [87, 4, 1, "cmdoption-tlt-train-f", "--framework"], [87, 4, 1, "cmdoption-tlt-train-hostfile", "--hostfile"], [87, 4, 1, "cmdoption-tlt-train-hvd-start-timeout", "--hvd-start-timeout"], [87, 4, 1, "cmdoption-tlt-train-hvd-start-timeout", "--hvd_start_timeout"], [87, 4, 1, "cmdoption-tlt-train-init-checkpoints", "--init-checkpoints"], [87, 4, 1, "cmdoption-tlt-train-init-checkpoints", "--init_checkpoints"], [87, 4, 1, "cmdoption-tlt-train-instruction-key", "--instruction-key"], [87, 4, 1, "cmdoption-tlt-train-instruction-key", "--instruction_key"], [87, 4, 1, "cmdoption-tlt-train-ipex_optimize", "--ipex-optimize"], [87, 4, 1, "cmdoption-tlt-train-ipex_optimize", "--ipex_optimize"], [87, 4, 1, "cmdoption-tlt-train-lora-alpha", "--lora-alpha"], [87, 4, 1, "cmdoption-tlt-train-lora-dropout", "--lora-dropout"], [87, 4, 1, "cmdoption-tlt-train-lora-rank", "--lora-rank"], [87, 4, 1, "cmdoption-tlt-train-lora-alpha", "--lora_alpha"], [87, 4, 1, "cmdoption-tlt-train-lora-dropout", "--lora_dropout"], [87, 4, 1, "cmdoption-tlt-train-lora-rank", "--lora_rank"], [87, 4, 1, "cmdoption-tlt-train-lr-decay", "--lr-decay"], [87, 4, 1, "cmdoption-tlt-train-lr-decay", "--lr_decay"], [87, 4, 1, "cmdoption-tlt-train-model-name", "--model-name"], [87, 4, 1, "cmdoption-tlt-train-model-name", "--model_name"], [87, 4, 1, "cmdoption-tlt-train-nnodes", "--nnodes"], [87, 4, 1, "cmdoption-tlt-train-nproc_per_node", "--nproc-per-node"], [87, 4, 1, "cmdoption-tlt-train-nproc_per_node", "--nproc_per_node"], [87, 4, 1, "cmdoption-tlt-train-output-dir", "--output-dir"], [87, 4, 1, "cmdoption-tlt-train-output-dir", "--output_dir"], [87, 4, 1, "cmdoption-tlt-train-prompt-with-context", "--prompt-with-context"], [87, 4, 1, "cmdoption-tlt-train-prompt-without-context", "--prompt-without-context"], [87, 4, 1, "cmdoption-tlt-train-prompt-with-context", "--prompt_with_context"], [87, 4, 1, "cmdoption-tlt-train-prompt-without-context", "--prompt_without_context"], [87, 4, 1, "cmdoption-tlt-train-response-key", "--response-key"], [87, 4, 1, "cmdoption-tlt-train-response-key", "--response_key"], [87, 4, 1, "cmdoption-tlt-train-simsiam", "--simsiam"], [87, 4, 1, "cmdoption-tlt-train-use-case", "--use-case"], [87, 4, 1, "cmdoption-tlt-train-use-horovod", "--use-horovod"], [87, 4, 1, "cmdoption-tlt-train-use-case", "--use_case"], [87, 4, 1, "cmdoption-tlt-train-use-horovod", "--use_horovod"], [87, 4, 1, "cmdoption-tlt-train-d", "-d"], [87, 4, 1, "cmdoption-tlt-train-f", "-f"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:module", "3": "py:function", "4": "std:cmdoption"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "module", "Python module"], "3": ["py", "function", "Python function"], "4": ["std", "cmdoption", "program option"]}, "titleterms": {"dataset": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 86, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107], "get": [1, 91, 96, 98, 100, 102, 103, 104, 106, 107], "start": [1, 91, 96], "\u2460": 1, "check": [1, 105], "system": 1, "requir": [1, 102, 104, 106, 107], "\u2461": 1, "instal": 1, "\u2462": 1, "run": [1, 108], "intel": [1, 3, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "transfer": [1, 3, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "learn": [1, 3, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "tool": [1, 3, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "us": [1, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107], "No": 1, "code": 1, "cli": [1, 87, 91, 92, 93, 94], "b": [1, 98, 100, 103, 104, 106, 107], "low": 1, "api": [1, 86, 98, 99, 100, 101, 103, 104, 105, 106, 107], "summari": 1, "next": [1, 101], "step": [1, 101], "legal": 2, "inform": [2, 101, 105], "disclaim": 2, "licens": 2, "model": [2, 3, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 98, 100, 101, 102, 103, 104, 105, 106, 107], "support": [3, 96], "imag": [3, 86, 92, 93, 97, 98, 100, 102, 103, 105, 106], "classif": [3, 86, 93, 94, 97, 98, 100, 101, 103, 104, 105, 106, 107], "text": [3, 86, 94, 97, 101, 104, 107], "anomali": [3, 86, 92, 97, 102], "detect": [3, 86, 92, 97, 102], "gener": [3, 86, 87, 97], "tlt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87], "basedataset": 4, "hf_dataset": 5, "hfdataset": 5, "image_anomaly_detect": [6, 22, 23, 24, 25, 26, 27, 28, 29], "pytorch_custom_image_anomaly_detection_dataset": 6, "pytorchcustomimageanomalydetectiondataset": 6, "image_classif": [7, 8, 9, 10, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], "image_classification_dataset": 7, "imageclassificationdataset": 7, "pytorch_custom_image_classification_dataset": 8, "pytorchcustomimageclassificationdataset": 8, "tf_custom_image_classification_dataset": 9, "tfcustomimageclassificationdataset": 9, "tfds_image_classification_dataset": 10, "tfdsimageclassificationdataset": 10, "torchvision_image_classification_dataset": 11, "torchvisionimageclassificationdataset": 11, "pytorch_dataset": 12, "pytorchdataset": 12, "text_classif": [13, 14, 15, 16, 17, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], "hf_custom_text_classification_dataset": 13, "hfcustomtextclassificationdataset": 13, "hf_text_classification_dataset": 14, "hftextclassificationdataset": 14, "text_classification_dataset": 15, "textclassificationdataset": 15, "tf_custom_text_classification_dataset": 16, "tfcustomtextclassificationdataset": 16, "tfds_text_classification_dataset": 17, "tfdstextclassificationdataset": 17, "text_gener": [18, 19, 81, 82, 83, 84], "hf_custom_text_generation_dataset": 18, "hfcustomtextgenerationdataset": 18, "text_generation_dataset": 19, "textgenerationdataset": 19, "tf_dataset": 20, "tfdataset": 20, "hf_model": 21, "hfmodel": 21, "pytorch_image_anomaly_detection_model": [22, 23, 24, 25], "pytorchimageanomalydetectionmodel": [22, 23, 24, 25], "benchmark": [23, 27, 31, 35, 40, 44, 48, 53, 58, 64, 68, 72, 77, 87, 91], "quantiz": [24, 28, 32, 37, 41, 45, 50, 55, 59, 65, 69, 74, 79, 87, 91, 102, 103, 104, 106, 107], "train": [25, 29, 33, 38, 42, 46, 51, 56, 60, 66, 70, 75, 80, 82, 84, 87, 88, 91, 101, 102, 103, 105, 106, 109], "torchvision_image_anomaly_detection_model": [26, 27, 28, 29], "torchvisionimageanomalydetectionmodel": [26, 27, 28, 29], "image_classification_model": [30, 31, 32, 33], "imageclassificationmodel": [30, 31, 32, 33], "keras_image_classification_model": [34, 35, 36, 37, 38], "kerasimageclassificationmodel": [34, 35, 36, 37, 38], "optimize_graph": [36, 49, 54, 73, 78], "pytorch_hub_image_classification_model": [39, 40, 41, 42], "pytorchhubimageclassificationmodel": [39, 40, 41, 42], "pytorch_image_classification_model": [43, 44, 45, 46], "pytorchimageclassificationmodel": [43, 44, 45, 46], "tf_image_classification_model": [47, 48, 49, 50, 51], "tfimageclassificationmodel": [47, 48, 49, 50, 51], "tfhub_image_classification_model": [52, 53, 54, 55, 56], "tfhubimageclassificationmodel": [52, 53, 54, 55, 56], "torchvision_image_classification_model": [57, 58, 59, 60], "torchvisionimageclassificationmodel": [57, 58, 59, 60], "basemodel": 61, "pytorch_model": 62, "pytorchmodel": 62, "pytorch_hf_text_classification_model": [63, 64, 65, 66], "pytorchhftextclassificationmodel": [63, 64, 65, 66], "text_classification_model": [67, 68, 69, 70], "textclassificationmodel": [67, 68, 69, 70], "tf_hf_text_classification_model": [71, 72, 73, 74, 75], "tfhftextclassificationmodel": [71, 72, 73, 74, 75], "tf_text_classification_model": [76, 77, 78, 79, 80], "tftextclassificationmodel": [76, 77, 78, 79, 80], "pytorch_hf_text_generation_model": [81, 82], "pytorchhftextgenerationmodel": [81, 82], "text_generation_model": [83, 84], "textgenerationmodel": [83, 84], "tf_model": 85, "tfmodel": 85, "refer": [86, 87], "factori": 86, "method": [86, 97, 102], "class": 86, "base": 86, "eval": 87, "list": [87, 91], "framework": [87, 105], "use_cas": 87, "optim": [87, 91, 105], "distribut": [88, 94, 109], "prerequisit": [88, 99, 109], "passwordless": [88, 109], "ssh": [88, 109], "setup": [88, 98, 100, 102, 103, 104, 106, 107, 108, 109], "build": 89, "document": 89, "sphinx": 89, "exampl": [90, 91, 92, 93, 94, 95, 99], "beyond": 91, "avail": 91, "perform": [91, 99, 101, 105], "graph": 91, "additit": 91, "cutpast": 92, "featur": [92, 102], "extract": [92, 102], "your": [92, 93, 94, 103, 104, 106, 107], "own": [92, 93, 94, 103, 104, 106, 107], "simsiam": [92, 102], "citat": [92, 93, 94, 98, 100, 101, 102, 103, 104, 106, 107], "from": [93, 94, 102, 103, 106], "tfd": [93, 94], "catalog": [93, 94, 103, 104, 106, 107], "fine": [94, 101, 104, 107], "tune": [94, 101, 104, 107], "hug": [94, 101], "face": [94, 101], "what": 96, "i": 96, "how": 96, "work": 96, "note": 96, "evalu": [96, 98, 100, 101, 102, 105], "bia": 96, "medic": 98, "colorect": 98, "histologi": 98, "tensorflow": [98, 100, 105, 106, 107], "1": [98, 100, 101, 102, 103, 104, 105, 106, 107], "import": [98, 100, 102, 103, 104, 106, 107], "depend": [98, 100, 102, 103, 104, 106, 107], "paramet": [98, 100, 101, 102, 103, 104, 105, 106, 107], "2": [98, 100, 101, 102, 103, 104, 105, 106, 107], "option": [98, 100, 102, 103, 104, 106, 107], "A": [98, 100, 103, 104, 106, 107], "load": [98, 100, 102], "pretrain": [98, 100], "checkpoint": [98, 100], "3": [98, 100, 101, 102, 103, 104, 105, 106, 107], "4": [98, 100, 101, 102, 103, 104, 105, 106, 107], "prepar": [98, 100, 102, 103, 104, 106, 107], "5": [98, 100, 102, 103, 104, 106, 107], "6": [98, 100, 102, 103, 104, 106, 107], "7": [98, 100, 102, 103, 104, 106, 107], "export": [98, 100, 102, 103, 104, 106, 107], "8": [98, 100, 102, 103, 104, 106, 107], "infer": [98, 100], "notebook": [99, 108], "tutori": 99, "end": 99, "pipelin": 99, "comparison": [99, 101, 105], "remot": 100, "sens": 100, "scene": 100, "resisc": 100, "displai": [101, 105], "platform": [101, 105], "select": [101, 105], "defin": [101, 105], "dure": [101, 105], "librari": [101, 105], "compar": [101, 105], "metric": 101, "pytorch": [102, 103, 104], "gaudi": [102, 103], "ai": [102, 103], "acceler": [102, 103], "categori": 102, "folder": 102, "test": 102, "subfold": 102, "visual": 102, "sampl": 102, "The": 102, "twocroptransform": 102, "cut": 102, "past": 102, "transform": 102, "argument": [102, 103, 104, 106, 107], "predict": [102, 103, 104, 105, 106, 107], "9": [102, 103, 106], "post": [102, 103, 106], "": 103, "torchvis": 103, "origin": [103, 106], "custom": [103, 106], "singl": [103, 106], "huggingfac": 104, "save": [104, 107], "time": 105, "tf": 105, "hub": 105, "valid": 105, "data": 105, "batch": 105, "neural": 105, "compressor": 105, "environ": 108, "set": 108, "up": 108}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Datasets": [[0, "datasets"], [86, "datasets"]], "Get Started": [[1, "get-started"], [96, "get-started"]], "\u2460 Check System Requirements": [[1, "check-system-requirements"]], "\u2461 Install": [[1, "install"]], "\u2462 Run the Intel Transfer Learning Tool": [[1, "run-the-intel-transfer-learning-tool"]], "a) Run Using the No-Code CLI": [[1, "a-run-using-the-no-code-cli"]], "b) Run Using the Low-Code API": [[1, "b-run-using-the-low-code-api"]], "Summary and Next Steps": [[1, "summary-and-next-steps"]], "Legal Information": [[2, "legal-information"]], "Disclaimer": [[2, "disclaimer"]], "License": [[2, "license"]], "Datasets and Models": [[2, "datasets-and-models"]], "Intel\u00ae Transfer Learning Tool Supported Models": [[3, "intel-transfer-learning-tool-supported-models"]], "Image Classification": [[3, "image-classification"], [86, "image-classification"], [86, "id3"]], "Text Classification": [[3, "text-classification"], [86, "text-classification"], [86, "id5"]], "Image Anomaly Detection": [[3, "image-anomaly-detection"], [86, "image-anomaly-detection"], [86, "id4"]], "Text Generation": [[3, "text-generation"], [86, "text-generation"], [86, "id6"]], "tlt.datasets.dataset.BaseDataset": [[4, "tlt-datasets-dataset-basedataset"]], "tlt.datasets.hf_dataset.HFDataset": [[5, "tlt-datasets-hf-dataset-hfdataset"]], "tlt.datasets.image_anomaly_detection.pytorch_custom_image_anomaly_detection_dataset.PyTorchCustomImageAnomalyDetectionDataset": [[6, "tlt-datasets-image-anomaly-detection-pytorch-custom-image-anomaly-detection-dataset-pytorchcustomimageanomalydetectiondataset"]], "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset": [[7, "tlt-datasets-image-classification-image-classification-dataset-imageclassificationdataset"]], "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset": [[8, "tlt-datasets-image-classification-pytorch-custom-image-classification-dataset-pytorchcustomimageclassificationdataset"]], "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset": [[9, "tlt-datasets-image-classification-tf-custom-image-classification-dataset-tfcustomimageclassificationdataset"]], "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset": [[10, "tlt-datasets-image-classification-tfds-image-classification-dataset-tfdsimageclassificationdataset"]], "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset": [[11, "tlt-datasets-image-classification-torchvision-image-classification-dataset-torchvisionimageclassificationdataset"]], "tlt.datasets.pytorch_dataset.PyTorchDataset": [[12, "tlt-datasets-pytorch-dataset-pytorchdataset"]], "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset": [[13, "tlt-datasets-text-classification-hf-custom-text-classification-dataset-hfcustomtextclassificationdataset"]], "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset": [[14, "tlt-datasets-text-classification-hf-text-classification-dataset-hftextclassificationdataset"]], "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset": [[15, "tlt-datasets-text-classification-text-classification-dataset-textclassificationdataset"]], "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset": [[16, "tlt-datasets-text-classification-tf-custom-text-classification-dataset-tfcustomtextclassificationdataset"]], "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset": [[17, "tlt-datasets-text-classification-tfds-text-classification-dataset-tfdstextclassificationdataset"]], "tlt.datasets.text_generation.hf_custom_text_generation_dataset.HFCustomTextGenerationDataset": [[18, "tlt-datasets-text-generation-hf-custom-text-generation-dataset-hfcustomtextgenerationdataset"]], "tlt.datasets.text_generation.text_generation_dataset.TextGenerationDataset": [[19, "tlt-datasets-text-generation-text-generation-dataset-textgenerationdataset"]], "tlt.datasets.tf_dataset.TFDataset": [[20, "tlt-datasets-tf-dataset-tfdataset"]], "tlt.models.hf_model.HFModel": [[21, "tlt-models-hf-model-hfmodel"]], "tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel": [[22, "tlt-models-image-anomaly-detection-pytorch-image-anomaly-detection-model-pytorchimageanomalydetectionmodel"]], "tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel.benchmark": [[23, "tlt-models-image-anomaly-detection-pytorch-image-anomaly-detection-model-pytorchimageanomalydetectionmodel-benchmark"]], "tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel.quantize": [[24, "tlt-models-image-anomaly-detection-pytorch-image-anomaly-detection-model-pytorchimageanomalydetectionmodel-quantize"]], "tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel.train": [[25, "tlt-models-image-anomaly-detection-pytorch-image-anomaly-detection-model-pytorchimageanomalydetectionmodel-train"]], "tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel": [[26, "tlt-models-image-anomaly-detection-torchvision-image-anomaly-detection-model-torchvisionimageanomalydetectionmodel"]], "tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel.benchmark": [[27, "tlt-models-image-anomaly-detection-torchvision-image-anomaly-detection-model-torchvisionimageanomalydetectionmodel-benchmark"]], "tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel.quantize": [[28, "tlt-models-image-anomaly-detection-torchvision-image-anomaly-detection-model-torchvisionimageanomalydetectionmodel-quantize"]], "tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel.train": [[29, "tlt-models-image-anomaly-detection-torchvision-image-anomaly-detection-model-torchvisionimageanomalydetectionmodel-train"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel": [[30, "tlt-models-image-classification-image-classification-model-imageclassificationmodel"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel.benchmark": [[31, "tlt-models-image-classification-image-classification-model-imageclassificationmodel-benchmark"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize": [[32, "tlt-models-image-classification-image-classification-model-imageclassificationmodel-quantize"]], "tlt.models.image_classification.image_classification_model.ImageClassificationModel.train": [[33, "tlt-models-image-classification-image-classification-model-imageclassificationmodel-train"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel": [[34, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.benchmark": [[35, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel-benchmark"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.optimize_graph": [[36, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel-optimize-graph"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize": [[37, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel-quantize"]], "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train": [[38, "tlt-models-image-classification-keras-image-classification-model-kerasimageclassificationmodel-train"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel": [[39, "tlt-models-image-classification-pytorch-hub-image-classification-model-pytorchhubimageclassificationmodel"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.benchmark": [[40, "tlt-models-image-classification-pytorch-hub-image-classification-model-pytorchhubimageclassificationmodel-benchmark"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize": [[41, "tlt-models-image-classification-pytorch-hub-image-classification-model-pytorchhubimageclassificationmodel-quantize"]], "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train": [[42, "tlt-models-image-classification-pytorch-hub-image-classification-model-pytorchhubimageclassificationmodel-train"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel": [[43, "tlt-models-image-classification-pytorch-image-classification-model-pytorchimageclassificationmodel"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.benchmark": [[44, "tlt-models-image-classification-pytorch-image-classification-model-pytorchimageclassificationmodel-benchmark"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize": [[45, "tlt-models-image-classification-pytorch-image-classification-model-pytorchimageclassificationmodel-quantize"]], "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train": [[46, "tlt-models-image-classification-pytorch-image-classification-model-pytorchimageclassificationmodel-train"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel": [[47, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.benchmark": [[48, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel-benchmark"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.optimize_graph": [[49, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel-optimize-graph"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize": [[50, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel-quantize"]], "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train": [[51, "tlt-models-image-classification-tf-image-classification-model-tfimageclassificationmodel-train"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel": [[52, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.benchmark": [[53, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel-benchmark"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.optimize_graph": [[54, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel-optimize-graph"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize": [[55, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel-quantize"]], "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train": [[56, "tlt-models-image-classification-tfhub-image-classification-model-tfhubimageclassificationmodel-train"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel": [[57, "tlt-models-image-classification-torchvision-image-classification-model-torchvisionimageclassificationmodel"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.benchmark": [[58, "tlt-models-image-classification-torchvision-image-classification-model-torchvisionimageclassificationmodel-benchmark"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize": [[59, "tlt-models-image-classification-torchvision-image-classification-model-torchvisionimageclassificationmodel-quantize"]], "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train": [[60, "tlt-models-image-classification-torchvision-image-classification-model-torchvisionimageclassificationmodel-train"]], "tlt.models.model.BaseModel": [[61, "tlt-models-model-basemodel"]], "tlt.models.pytorch_model.PyTorchModel": [[62, "tlt-models-pytorch-model-pytorchmodel"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel": [[63, "tlt-models-text-classification-pytorch-hf-text-classification-model-pytorchhftextclassificationmodel"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.benchmark": [[64, "tlt-models-text-classification-pytorch-hf-text-classification-model-pytorchhftextclassificationmodel-benchmark"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize": [[65, "tlt-models-text-classification-pytorch-hf-text-classification-model-pytorchhftextclassificationmodel-quantize"]], "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train": [[66, "tlt-models-text-classification-pytorch-hf-text-classification-model-pytorchhftextclassificationmodel-train"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel": [[67, "tlt-models-text-classification-text-classification-model-textclassificationmodel"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel.benchmark": [[68, "tlt-models-text-classification-text-classification-model-textclassificationmodel-benchmark"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize": [[69, "tlt-models-text-classification-text-classification-model-textclassificationmodel-quantize"]], "tlt.models.text_classification.text_classification_model.TextClassificationModel.train": [[70, "tlt-models-text-classification-text-classification-model-textclassificationmodel-train"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel": [[71, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.benchmark": [[72, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel-benchmark"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.optimize_graph": [[73, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel-optimize-graph"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize": [[74, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel-quantize"]], "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train": [[75, "tlt-models-text-classification-tf-hf-text-classification-model-tfhftextclassificationmodel-train"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel": [[76, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.benchmark": [[77, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel-benchmark"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.optimize_graph": [[78, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel-optimize-graph"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize": [[79, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel-quantize"]], "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train": [[80, "tlt-models-text-classification-tf-text-classification-model-tftextclassificationmodel-train"]], "tlt.models.text_generation.pytorch_hf_text_generation_model.PyTorchHFTextGenerationModel": [[81, "tlt-models-text-generation-pytorch-hf-text-generation-model-pytorchhftextgenerationmodel"]], "tlt.models.text_generation.pytorch_hf_text_generation_model.PyTorchHFTextGenerationModel.train": [[82, "tlt-models-text-generation-pytorch-hf-text-generation-model-pytorchhftextgenerationmodel-train"]], "tlt.models.text_generation.text_generation_model.TextGenerationModel": [[83, "tlt-models-text-generation-text-generation-model-textgenerationmodel"]], "tlt.models.text_generation.text_generation_model.TextGenerationModel.train": [[84, "tlt-models-text-generation-text-generation-model-textgenerationmodel-train"]], "tlt.models.tf_model.TFModel": [[85, "tlt-models-tf-model-tfmodel"]], "API Reference": [[86, "api-reference"]], "Factory Methods": [[86, "module-tlt.datasets.dataset_factory"], [86, "id1"]], "Class Reference": [[86, "class-reference"], [86, "id2"]], "Base Classes": [[86, "base-classes"], [86, "id7"]], "Models": [[86, "models"]], "CLI Reference": [[87, "cli-reference"]], "tlt": [[87, "tlt"]], "benchmark": [[87, "tlt-benchmark"]], "eval": [[87, "tlt-eval"]], "generate": [[87, "tlt-generate"]], "list": [[87, "tlt-list"]], "frameworks": [[87, "tlt-list-frameworks"]], "models": [[87, "tlt-list-models"]], "use_cases": [[87, "tlt-list-use-cases"]], "optimize": [[87, "tlt-optimize"]], "quantize": [[87, "tlt-quantize"]], "train": [[87, "tlt-train"]], "Distributed Training": [[88, "distributed-training"], [109, "distributed-training"]], "Prerequisites": [[88, "prerequisites"], [99, "prerequisites"], [109, "prerequisites"]], "Passwordless SSH setup": [[88, "passwordless-ssh-setup"], [109, "passwordless-ssh-setup"]], "Building Documentation": [[89, "building-documentation"]], "Sphinx Documentation": [[89, "sphinx-documentation"]], "Examples": [[90, "examples"], [95, "examples"]], "Beyond Get Started CLI Example": [[91, "beyond-get-started-cli-example"]], "List the Available Models": [[91, "list-the-available-models"]], "Train a Model": [[91, "train-a-model"]], "Benchmark the Trained Model": [[91, "benchmark-the-trained-model"]], "Quantize the Model": [[91, "quantize-the-model"]], "Benchmark the Quantized Model": [[91, "benchmark-the-quantized-model"]], "Perform Graph Optimization on the Trained Model": [[91, "perform-graph-optimization-on-the-trained-model"]], "Addititional CLI Examples": [[91, "addititional-cli-examples"]], "Image Anomaly Detection Intel\u00ae Transfer Learning Tool CLI Example": [[92, "image-anomaly-detection-intel-transfer-learning-tool-cli-example"]], "Transfer Learning Using CutPaste Feature Extraction and your Own Dataset": [[92, "transfer-learning-using-cutpaste-feature-extraction-and-your-own-dataset"]], "Transfer Learning Using SimSiam Feature Extraction and your Own Dataset": [[92, "transfer-learning-using-simsiam-feature-extraction-and-your-own-dataset"]], "Citations": [[92, "citations"], [93, "citations"], [94, "citations"], [101, "Citations"], [104, "Citations"], [107, "Citations"]], "Image Classification Intel\u00ae Transfer Learning Tool CLI Example": [[93, "image-classification-intel-transfer-learning-tool-cli-example"]], "Transfer Learning Using your Own Dataset": [[93, "transfer-learning-using-your-own-dataset"]], "Transfer Learning Using a Dataset from the TFDS Catalog": [[93, "transfer-learning-using-a-dataset-from-the-tfds-catalog"]], "Text Classification Intel\u00ae Transfer Learning Tool CLI Example": [[94, "text-classification-intel-transfer-learning-tool-cli-example"]], "Fine Tuning Using Your Own Dataset": [[94, "fine-tuning-using-your-own-dataset"]], "Fine Tuning Using a Dataset from the TFDS Catalog": [[94, "fine-tuning-using-a-dataset-from-the-tfds-catalog"]], "Distributed Transfer Learning Using a Dataset from Hugging Face": [[94, "distributed-transfer-learning-using-a-dataset-from-hugging-face"]], "Intel\u00ae Transfer Learning Tool": [[96, "intel-transfer-learning-tool"]], "What is Intel\u00ae Transfer Learning Tool": [[96, "what-is-intel-transfer-learning-tool"]], "How the Intel Transfer Learning Tool Works": [[96, "how-the-intel-transfer-learning-tool-works"]], "Note on Evaluation and Bias": [[96, "note-on-evaluation-and-bias"]], "Support": [[96, "support"]], "Image Classification Methods": [[97, "image-classification-methods"]], "Image Anomaly Detection Methods": [[97, "image-anomaly-detection-methods"]], "Text Classification Methods": [[97, "text-classification-methods"]], "Text Generation Methods": [[97, "text-generation-methods"]], "Medical Imaging Classification (Colorectal histology) using TensorFlow and the Intel\u00ae Transfer Learning Tool API": [[98, "Medical-Imaging-Classification-(Colorectal-histology)-using-TensorFlow-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "1. Import dependencies and setup parameters": [[98, "1.-Import-dependencies-and-setup-parameters"], [100, "1.-Import-dependencies-and-setup-parameters"], [102, "1.-Import-dependencies-and-setup-parameters"], [103, "1.-Import-dependencies-and-setup-parameters"], [104, "1.-Import-dependencies-and-setup-parameters"], [106, "1.-Import-dependencies-and-setup-parameters"], [107, "1.-Import-dependencies-and-setup-parameters"]], "2. Get the model": [[98, "2.-Get-the-model"], [100, "2.-Get-the-model"], [103, "2.-Get-the-model"], [104, "2.-Get-the-model"], [106, "2.-Get-the-model"], [107, "2.-Get-the-model"]], "Option A: Load a model": [[98, "Option-A:-Load-a-model"], [100, "Option-A:-Load-a-model"]], "Option B: Load a pretrained checkpoint": [[98, "Option-B:-Load-a-pretrained-checkpoint"], [100, "Option-B:-Load-a-pretrained-checkpoint"]], "3. Get the dataset": [[98, "3.-Get-the-dataset"], [100, "3.-Get-the-dataset"], [102, "3.-Get-the-dataset"], [103, "3.-Get-the-dataset"], [104, "3.-Get-the-dataset"], [106, "3.-Get-the-dataset"], [107, "3.-Get-the-dataset"]], "4. Prepare the dataset": [[98, "4.-Prepare-the-dataset"], [100, "4.-Prepare-the-dataset"], [102, "4.-Prepare-the-dataset"], [103, "4.-Prepare-the-dataset"], [104, "4.-Prepare-the-dataset"], [106, "4.-Prepare-the-dataset"], [107, "4.-Prepare-the-dataset"]], "5. Transfer Learning": [[98, "5.-Transfer-Learning"], [100, "5.-Transfer-Learning"]], "6. Evaluate": [[98, "6.-Evaluate"], [100, "6.-Evaluate"]], "7. Export": [[98, "7.-Export"], [100, "7.-Export"]], "8. Inference": [[98, "8.-Inference"], [100, "8.-Inference"]], "Dataset Citations": [[98, "Dataset-Citations"], [100, "Dataset-Citations"], [102, "Dataset-Citations"], [103, "Dataset-Citations"], [106, "Dataset-Citations"]], "Intel\u00ae Transfer Learning Tool API Notebook Examples": [[99, "intel-transfer-learning-tool-api-notebook-examples"]], "Intel Transfer Learning Tool API Tutorial Notebooks": [[99, "intel-transfer-learning-tool-api-tutorial-notebooks"]], "Intel Transfer Learning Tool API End-to-End Pipelines": [[99, "intel-transfer-learning-tool-api-end-to-end-pipelines"]], "Intel Transfer Learning Tool Performance Comparison": [[99, "intel-transfer-learning-tool-performance-comparison"]], "Remote Sensing Image Scene Classification (Resisc) using TensorFlow and the Intel\u00ae Transfer Learning Tool API": [[100, "Remote-Sensing-Image-Scene-Classification-(Resisc)-using-TensorFlow-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Performance Comparison: Text Classification Transfer Learning with Hugging Face* and the Intel\u00ae Transfer Learning Tool": [[101, "Performance-Comparison:-Text-Classification-Transfer-Learning-with-Hugging-Face*-and-the-Intel\u00ae-Transfer-Learning-Tool"]], "1. Display Platform Information": [[101, "1.-Display-Platform-Information"], [105, "1.-Display-Platform-Information"]], "2. Select a model and define parameters to use during training and evaluation": [[101, "2.-Select-a-model-and-define-parameters-to-use-during-training-and-evaluation"], [105, "2.-Select-a-model-and-define-parameters-to-use-during-training-and-evaluation"]], "Select a model": [[101, "Select-a-model"], [105, "Select-a-model"]], "Select a dataset": [[101, "Select-a-dataset"], [105, "Select-a-dataset"]], "Define parameters": [[101, "Define-parameters"], [105, "Define-parameters"]], "3. Train and evaluate the models": [[101, "3.-Train-and-evaluate-the-models"]], "Fine tuning using the Hugging Face libraries": [[101, "Fine-tuning-using-the-Hugging-Face-libraries"]], "Using the Intel Transfer Learning tool API": [[101, "Using-the-Intel-Transfer-Learning-tool-API"]], "4. Compare metrics": [[101, "4.-Compare-metrics"]], "Training metrics": [[101, "Training-metrics"]], "Evaluation Metrics": [[101, "Evaluation-Metrics"]], "Next Steps": [[101, "Next-Steps"]], "Image Anomaly Detection with PyTorch using Intel\u00ae Transfer Learning Tool": [[102, "Image-Anomaly-Detection-with-PyTorch-using-Intel\u00ae-Transfer-Learning-Tool"]], "Intel\u00ae Gaudi\u00ae AI accelerator": [[102, "Intel\u00ae-Gaudi\u00ae-AI-accelerator"], [103, "Intel\u00ae-Gaudi\u00ae-AI-accelerator"]], "2. Get or load the model": [[102, "2.-Get-or-load-the-model"]], "Method 1: Category Folders": [[102, "Method-1:-Category-Folders"]], "Method 2: Train & Test Folders with Category Subfolders": [[102, "Method-2:-Train-&-Test-Folders-with-Category-Subfolders"]], "5. Visualize samples from the dataset": [[102, "5.-Visualize-samples-from-the-dataset"]], "6. Training and Evaluation": [[102, "6.-Training-and-Evaluation"]], "Feature Extraction": [[102, "Feature-Extraction"]], "Optional: The SimSiam TwoCropTransform": [[102, "Optional:-The-SimSiam-TwoCropTransform"]], "Optional: The Cut-paste Transforms": [[102, "Optional:-The-Cut-paste-Transforms"]], "Train Arguments": [[102, "Train-Arguments"]], "Required": [[102, "Required"], [104, "Required"], [106, "Required"], [107, "Required"]], "Optional": [[102, "Optional"], [104, "Optional"], [106, "Optional"], [107, "Optional"]], "7. Predict": [[102, "7.-Predict"], [103, "7.-Predict"], [106, "7.-Predict"]], "8. Export": [[102, "8.-Export"], [103, "8.-Export"], [106, "8.-Export"]], "9. Post-training quantization": [[102, "9.-Post-training-quantization"], [103, "9.-Post-training-quantization"], [106, "9.-Post-training-quantization"]], "Transfer Learning for Image Classification using PyTorch and the Intel\u00ae Transfer Learning Tool API": [[103, "Transfer-Learning-for-Image-Classification-using-PyTorch-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Option A: Use your own dataset": [[103, "Option-A:-Use-your-own-dataset"], [104, "Option-A:-Use-your-own-dataset"], [106, "Option-A:-Use-your-own-dataset"], [107, "Option-A:-Use-your-own-dataset"]], "Option B: Use a dataset from the PyTorch\u2019s Torchvision Datasets catalog": [[103, "Option-B:-Use-a-dataset-from-the-PyTorch's-Torchvision-Datasets-catalog"]], "5. Predict using the original model": [[103, "5.-Predict-using-the-original-model"], [106, "5.-Predict-using-the-original-model"]], "6. Transfer Learning": [[103, "6.-Transfer-Learning"], [106, "6.-Transfer-Learning"]], "Arguments": [[103, "Arguments"], [104, "Arguments"], [106, "Arguments"], [107, "Arguments"]], "Custom Single Image Prediction": [[103, "Custom-Single-Image-Prediction"], [106, "Custom-Single-Image-Prediction"]], "Text Classification fine tuning using Pytorch and the Intel\u00ae Transfer Learning Tool API": [[104, "Text-Classification-fine-tuning-using-Pytorch-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Option B: Use the HuggingFace catalog": [[104, "Option-B:-Use-the-HuggingFace-catalog"]], "5. Fine tuning": [[104, "5.-Fine-tuning"], [107, "5.-Fine-tuning"]], "6. Predict": [[104, "6.-Predict"], [107, "6.-Predict"]], "Predict on Text": [[104, "Predict-on-Text"]], "7. Export the saved model": [[104, "7.-Export-the-saved-model"], [107, "7.-Export-the-saved-model"]], "8. Quantization": [[104, "8.-Quantization"], [107, "8.-Quantization"]], "Performance Comparison: Image Classification Transfer Learning with TensorFlow and the Intel\u00ae Transfer Learning Tool": [[105, "Performance-Comparison:-Image-Classification-Transfer-Learning-with-TensorFlow-and-the-Intel\u00ae-Transfer-Learning-Tool"]], "3. Compare the training time for transfer learning": [[105, "3.-Compare-the-training-time-for-transfer-learning"]], "Transfer learning using the TensorFlow framework and TF Hub libraries": [[105, "Transfer-learning-using-the-TensorFlow-framework-and-TF-Hub-libraries"]], "Transfer learning using the Intel Transfer Learning Tool API": [[105, "Transfer-learning-using-the-Intel-Transfer-Learning-Tool-API"]], "Optimize the model using the Intel Transfer Learning Tool API": [[105, "Optimize-the-model-using-the-Intel-Transfer-Learning-Tool-API"]], "Compare training times": [[105, "Compare-training-times"]], "4. Evaluate and predict": [[105, "4.-Evaluate-and-predict"]], "Evaluate the models using the validation data": [[105, "Evaluate-the-models-using-the-validation-data"]], "Predict using a batch of images": [[105, "Predict-using-a-batch-of-images"]], "Check performance using the Intel\u00ae Neural Compressor": [[105, "Check-performance-using-the-Intel\u00ae-Neural-Compressor"]], "Transfer Learning for Image Classification using TensorFlow and the Intel\u00ae Transfer Learning Tool API": [[106, "Transfer-Learning-for-Image-Classification-using-TensorFlow-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Option B: Use a dataset from the TensorFlow Datasets catalog": [[106, "Option-B:-Use-a-dataset-from-the-TensorFlow-Datasets-catalog"]], "Text Classification fine tuning using TensorFlow and the Intel\u00ae Transfer Learning Tool API": [[107, "Text-Classification-fine-tuning-using-TensorFlow-and-the-Intel\u00ae-Transfer-Learning-Tool-API"]], "Option B: Use the TensorFlow datasets catalog": [[107, "Option-B:-Use-the-TensorFlow-datasets-catalog"]], "Environment Setup and Running the Notebooks": [[108, "environment-setup-and-running-the-notebooks"]], "Set Up Notebook Environment": [[108, "set-up-notebook-environment"]]}, "indexentries": {"basedataset (class in tlt.datasets.dataset)": [[4, "tlt.datasets.dataset.BaseDataset"]], "__init__() (tlt.datasets.dataset.basedataset method)": [[4, "tlt.datasets.dataset.BaseDataset.__init__"]], "hfdataset (class in tlt.datasets.hf_dataset)": [[5, "tlt.datasets.hf_dataset.HFDataset"]], "__init__() (tlt.datasets.hf_dataset.hfdataset method)": [[5, "tlt.datasets.hf_dataset.HFDataset.__init__"]], "pytorchcustomimageanomalydetectiondataset (class in tlt.datasets.image_anomaly_detection.pytorch_custom_image_anomaly_detection_dataset)": [[6, "tlt.datasets.image_anomaly_detection.pytorch_custom_image_anomaly_detection_dataset.PyTorchCustomImageAnomalyDetectionDataset"]], "__init__() (tlt.datasets.image_anomaly_detection.pytorch_custom_image_anomaly_detection_dataset.pytorchcustomimageanomalydetectiondataset method)": [[6, "tlt.datasets.image_anomaly_detection.pytorch_custom_image_anomaly_detection_dataset.PyTorchCustomImageAnomalyDetectionDataset.__init__"]], "imageclassificationdataset (class in tlt.datasets.image_classification.image_classification_dataset)": [[7, "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.image_classification_dataset.imageclassificationdataset method)": [[7, "tlt.datasets.image_classification.image_classification_dataset.ImageClassificationDataset.__init__"]], "pytorchcustomimageclassificationdataset (class in tlt.datasets.image_classification.pytorch_custom_image_classification_dataset)": [[8, "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.pytorchcustomimageclassificationdataset method)": [[8, "tlt.datasets.image_classification.pytorch_custom_image_classification_dataset.PyTorchCustomImageClassificationDataset.__init__"]], "tfcustomimageclassificationdataset (class in tlt.datasets.image_classification.tf_custom_image_classification_dataset)": [[9, "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.tf_custom_image_classification_dataset.tfcustomimageclassificationdataset method)": [[9, "tlt.datasets.image_classification.tf_custom_image_classification_dataset.TFCustomImageClassificationDataset.__init__"]], "tfdsimageclassificationdataset (class in tlt.datasets.image_classification.tfds_image_classification_dataset)": [[10, "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.tfds_image_classification_dataset.tfdsimageclassificationdataset method)": [[10, "tlt.datasets.image_classification.tfds_image_classification_dataset.TFDSImageClassificationDataset.__init__"]], "torchvisionimageclassificationdataset (class in tlt.datasets.image_classification.torchvision_image_classification_dataset)": [[11, "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset"]], "__init__() (tlt.datasets.image_classification.torchvision_image_classification_dataset.torchvisionimageclassificationdataset method)": [[11, "tlt.datasets.image_classification.torchvision_image_classification_dataset.TorchvisionImageClassificationDataset.__init__"]], "pytorchdataset (class in tlt.datasets.pytorch_dataset)": [[12, "tlt.datasets.pytorch_dataset.PyTorchDataset"]], "__init__() (tlt.datasets.pytorch_dataset.pytorchdataset method)": [[12, "tlt.datasets.pytorch_dataset.PyTorchDataset.__init__"]], "hfcustomtextclassificationdataset (class in tlt.datasets.text_classification.hf_custom_text_classification_dataset)": [[13, "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.hf_custom_text_classification_dataset.hfcustomtextclassificationdataset method)": [[13, "tlt.datasets.text_classification.hf_custom_text_classification_dataset.HFCustomTextClassificationDataset.__init__"]], "hftextclassificationdataset (class in tlt.datasets.text_classification.hf_text_classification_dataset)": [[14, "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.hf_text_classification_dataset.hftextclassificationdataset method)": [[14, "tlt.datasets.text_classification.hf_text_classification_dataset.HFTextClassificationDataset.__init__"]], "textclassificationdataset (class in tlt.datasets.text_classification.text_classification_dataset)": [[15, "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.text_classification_dataset.textclassificationdataset method)": [[15, "tlt.datasets.text_classification.text_classification_dataset.TextClassificationDataset.__init__"]], "tfcustomtextclassificationdataset (class in tlt.datasets.text_classification.tf_custom_text_classification_dataset)": [[16, "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.tf_custom_text_classification_dataset.tfcustomtextclassificationdataset method)": [[16, "tlt.datasets.text_classification.tf_custom_text_classification_dataset.TFCustomTextClassificationDataset.__init__"]], "tfdstextclassificationdataset (class in tlt.datasets.text_classification.tfds_text_classification_dataset)": [[17, "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset"]], "__init__() (tlt.datasets.text_classification.tfds_text_classification_dataset.tfdstextclassificationdataset method)": [[17, "tlt.datasets.text_classification.tfds_text_classification_dataset.TFDSTextClassificationDataset.__init__"]], "hfcustomtextgenerationdataset (class in tlt.datasets.text_generation.hf_custom_text_generation_dataset)": [[18, "tlt.datasets.text_generation.hf_custom_text_generation_dataset.HFCustomTextGenerationDataset"]], "__init__() (tlt.datasets.text_generation.hf_custom_text_generation_dataset.hfcustomtextgenerationdataset method)": [[18, "tlt.datasets.text_generation.hf_custom_text_generation_dataset.HFCustomTextGenerationDataset.__init__"]], "textgenerationdataset (class in tlt.datasets.text_generation.text_generation_dataset)": [[19, "tlt.datasets.text_generation.text_generation_dataset.TextGenerationDataset"]], "__init__() (tlt.datasets.text_generation.text_generation_dataset.textgenerationdataset method)": [[19, "tlt.datasets.text_generation.text_generation_dataset.TextGenerationDataset.__init__"]], "tfdataset (class in tlt.datasets.tf_dataset)": [[20, "tlt.datasets.tf_dataset.TFDataset"]], "__init__() (tlt.datasets.tf_dataset.tfdataset method)": [[20, "tlt.datasets.tf_dataset.TFDataset.__init__"]], "hfmodel (class in tlt.models.hf_model)": [[21, "tlt.models.hf_model.HFModel"]], "__init__() (tlt.models.hf_model.hfmodel method)": [[21, "tlt.models.hf_model.HFModel.__init__"]], "pytorchimageanomalydetectionmodel (class in tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model)": [[22, "tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel"]], "__init__() (tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.pytorchimageanomalydetectionmodel method)": [[22, "tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel.__init__"]], "benchmark() (tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.pytorchimageanomalydetectionmodel method)": [[23, "tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel.benchmark"]], "quantize() (tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.pytorchimageanomalydetectionmodel method)": [[24, "tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel.quantize"]], "train() (tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.pytorchimageanomalydetectionmodel method)": [[25, "tlt.models.image_anomaly_detection.pytorch_image_anomaly_detection_model.PyTorchImageAnomalyDetectionModel.train"]], "torchvisionimageanomalydetectionmodel (class in tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model)": [[26, "tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel"]], "__init__() (tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.torchvisionimageanomalydetectionmodel method)": [[26, "tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel.__init__"]], "benchmark() (tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.torchvisionimageanomalydetectionmodel method)": [[27, "tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel.benchmark"]], "quantize() (tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.torchvisionimageanomalydetectionmodel method)": [[28, "tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel.quantize"]], "train() (tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.torchvisionimageanomalydetectionmodel method)": [[29, "tlt.models.image_anomaly_detection.torchvision_image_anomaly_detection_model.TorchvisionImageAnomalyDetectionModel.train"]], "imageclassificationmodel (class in tlt.models.image_classification.image_classification_model)": [[30, "tlt.models.image_classification.image_classification_model.ImageClassificationModel"]], "__init__() (tlt.models.image_classification.image_classification_model.imageclassificationmodel method)": [[30, "tlt.models.image_classification.image_classification_model.ImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.image_classification_model.imageclassificationmodel method)": [[31, "tlt.models.image_classification.image_classification_model.ImageClassificationModel.benchmark"]], "quantize() (tlt.models.image_classification.image_classification_model.imageclassificationmodel method)": [[32, "tlt.models.image_classification.image_classification_model.ImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.image_classification_model.imageclassificationmodel method)": [[33, "tlt.models.image_classification.image_classification_model.ImageClassificationModel.train"]], "kerasimageclassificationmodel (class in tlt.models.image_classification.keras_image_classification_model)": [[34, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel"]], "__init__() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[34, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[35, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.benchmark"]], "optimize_graph() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[36, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.optimize_graph"]], "quantize() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[37, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.keras_image_classification_model.kerasimageclassificationmodel method)": [[38, "tlt.models.image_classification.keras_image_classification_model.KerasImageClassificationModel.train"]], "pytorchhubimageclassificationmodel (class in tlt.models.image_classification.pytorch_hub_image_classification_model)": [[39, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel"]], "__init__() (tlt.models.image_classification.pytorch_hub_image_classification_model.pytorchhubimageclassificationmodel method)": [[39, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.pytorch_hub_image_classification_model.pytorchhubimageclassificationmodel method)": [[40, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.benchmark"]], "quantize() (tlt.models.image_classification.pytorch_hub_image_classification_model.pytorchhubimageclassificationmodel method)": [[41, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.pytorch_hub_image_classification_model.pytorchhubimageclassificationmodel method)": [[42, "tlt.models.image_classification.pytorch_hub_image_classification_model.PyTorchHubImageClassificationModel.train"]], "pytorchimageclassificationmodel (class in tlt.models.image_classification.pytorch_image_classification_model)": [[43, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel"]], "__init__() (tlt.models.image_classification.pytorch_image_classification_model.pytorchimageclassificationmodel method)": [[43, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.pytorch_image_classification_model.pytorchimageclassificationmodel method)": [[44, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.benchmark"]], "quantize() (tlt.models.image_classification.pytorch_image_classification_model.pytorchimageclassificationmodel method)": [[45, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.pytorch_image_classification_model.pytorchimageclassificationmodel method)": [[46, "tlt.models.image_classification.pytorch_image_classification_model.PyTorchImageClassificationModel.train"]], "tfimageclassificationmodel (class in tlt.models.image_classification.tf_image_classification_model)": [[47, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel"]], "__init__() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[47, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[48, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.benchmark"]], "optimize_graph() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[49, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.optimize_graph"]], "quantize() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[50, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.tf_image_classification_model.tfimageclassificationmodel method)": [[51, "tlt.models.image_classification.tf_image_classification_model.TFImageClassificationModel.train"]], "tfhubimageclassificationmodel (class in tlt.models.image_classification.tfhub_image_classification_model)": [[52, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel"]], "__init__() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[52, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[53, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.benchmark"]], "optimize_graph() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[54, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.optimize_graph"]], "quantize() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[55, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.tfhub_image_classification_model.tfhubimageclassificationmodel method)": [[56, "tlt.models.image_classification.tfhub_image_classification_model.TFHubImageClassificationModel.train"]], "torchvisionimageclassificationmodel (class in tlt.models.image_classification.torchvision_image_classification_model)": [[57, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel"]], "__init__() (tlt.models.image_classification.torchvision_image_classification_model.torchvisionimageclassificationmodel method)": [[57, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.__init__"]], "benchmark() (tlt.models.image_classification.torchvision_image_classification_model.torchvisionimageclassificationmodel method)": [[58, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.benchmark"]], "quantize() (tlt.models.image_classification.torchvision_image_classification_model.torchvisionimageclassificationmodel method)": [[59, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.quantize"]], "train() (tlt.models.image_classification.torchvision_image_classification_model.torchvisionimageclassificationmodel method)": [[60, "tlt.models.image_classification.torchvision_image_classification_model.TorchvisionImageClassificationModel.train"]], "basemodel (class in tlt.models.model)": [[61, "tlt.models.model.BaseModel"]], "__init__() (tlt.models.model.basemodel method)": [[61, "tlt.models.model.BaseModel.__init__"]], "pytorchmodel (class in tlt.models.pytorch_model)": [[62, "tlt.models.pytorch_model.PyTorchModel"]], "__init__() (tlt.models.pytorch_model.pytorchmodel method)": [[62, "tlt.models.pytorch_model.PyTorchModel.__init__"]], "pytorchhftextclassificationmodel (class in tlt.models.text_classification.pytorch_hf_text_classification_model)": [[63, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel"]], "__init__() (tlt.models.text_classification.pytorch_hf_text_classification_model.pytorchhftextclassificationmodel method)": [[63, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.__init__"]], "benchmark() (tlt.models.text_classification.pytorch_hf_text_classification_model.pytorchhftextclassificationmodel method)": [[64, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.benchmark"]], "quantize() (tlt.models.text_classification.pytorch_hf_text_classification_model.pytorchhftextclassificationmodel method)": [[65, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.quantize"]], "train() (tlt.models.text_classification.pytorch_hf_text_classification_model.pytorchhftextclassificationmodel method)": [[66, "tlt.models.text_classification.pytorch_hf_text_classification_model.PyTorchHFTextClassificationModel.train"]], "textclassificationmodel (class in tlt.models.text_classification.text_classification_model)": [[67, "tlt.models.text_classification.text_classification_model.TextClassificationModel"]], "__init__() (tlt.models.text_classification.text_classification_model.textclassificationmodel method)": [[67, "tlt.models.text_classification.text_classification_model.TextClassificationModel.__init__"]], "benchmark() (tlt.models.text_classification.text_classification_model.textclassificationmodel method)": [[68, "tlt.models.text_classification.text_classification_model.TextClassificationModel.benchmark"]], "quantize() (tlt.models.text_classification.text_classification_model.textclassificationmodel method)": [[69, "tlt.models.text_classification.text_classification_model.TextClassificationModel.quantize"]], "train() (tlt.models.text_classification.text_classification_model.textclassificationmodel method)": [[70, "tlt.models.text_classification.text_classification_model.TextClassificationModel.train"]], "tfhftextclassificationmodel (class in tlt.models.text_classification.tf_hf_text_classification_model)": [[71, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel"]], "__init__() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[71, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.__init__"]], "benchmark() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[72, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.benchmark"]], "optimize_graph() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[73, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.optimize_graph"]], "quantize() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[74, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.quantize"]], "train() (tlt.models.text_classification.tf_hf_text_classification_model.tfhftextclassificationmodel method)": [[75, "tlt.models.text_classification.tf_hf_text_classification_model.TFHFTextClassificationModel.train"]], "tftextclassificationmodel (class in tlt.models.text_classification.tf_text_classification_model)": [[76, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel"]], "__init__() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[76, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.__init__"]], "benchmark() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[77, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.benchmark"]], "optimize_graph() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[78, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.optimize_graph"]], "quantize() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[79, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.quantize"]], "train() (tlt.models.text_classification.tf_text_classification_model.tftextclassificationmodel method)": [[80, "tlt.models.text_classification.tf_text_classification_model.TFTextClassificationModel.train"]], "pytorchhftextgenerationmodel (class in tlt.models.text_generation.pytorch_hf_text_generation_model)": [[81, "tlt.models.text_generation.pytorch_hf_text_generation_model.PyTorchHFTextGenerationModel"]], "__init__() (tlt.models.text_generation.pytorch_hf_text_generation_model.pytorchhftextgenerationmodel method)": [[81, "tlt.models.text_generation.pytorch_hf_text_generation_model.PyTorchHFTextGenerationModel.__init__"]], "train() (tlt.models.text_generation.pytorch_hf_text_generation_model.pytorchhftextgenerationmodel method)": [[82, "tlt.models.text_generation.pytorch_hf_text_generation_model.PyTorchHFTextGenerationModel.train"]], "textgenerationmodel (class in tlt.models.text_generation.text_generation_model)": [[83, "tlt.models.text_generation.text_generation_model.TextGenerationModel"]], "__init__() (tlt.models.text_generation.text_generation_model.textgenerationmodel method)": [[83, "tlt.models.text_generation.text_generation_model.TextGenerationModel.__init__"]], "train() (tlt.models.text_generation.text_generation_model.textgenerationmodel method)": [[84, "tlt.models.text_generation.text_generation_model.TextGenerationModel.train"]], "tfmodel (class in tlt.models.tf_model)": [[85, "tlt.models.tf_model.TFModel"]], "__init__() (tlt.models.tf_model.tfmodel method)": [[85, "tlt.models.tf_model.TFModel.__init__"]], "get_dataset() (in module tlt.datasets.dataset_factory)": [[86, "tlt.datasets.dataset_factory.get_dataset"]], "get_model() (in module tlt.models.model_factory)": [[86, "tlt.models.model_factory.get_model"]], "get_supported_models() (in module tlt.models.model_factory)": [[86, "tlt.models.model_factory.get_supported_models"]], "load_dataset() (in module tlt.datasets.dataset_factory)": [[86, "tlt.datasets.dataset_factory.load_dataset"]], "load_model() (in module tlt.models.model_factory)": [[86, "tlt.models.model_factory.load_model"]], "module": [[86, "module-tlt.datasets.dataset_factory"], [86, "module-tlt.models.model_factory"]], "print_supported_models() (in module tlt.models.model_factory)": [[86, "tlt.models.model_factory.print_supported_models"]], "tlt.datasets.dataset_factory": [[86, "module-tlt.datasets.dataset_factory"]], "tlt.models.model_factory": [[86, "module-tlt.models.model_factory"]], "--accuracy-criterion": [[87, "cmdoption-tlt-quantize-accuracy-criterion"]], "--accuracy_criterion": [[87, "cmdoption-tlt-quantize-accuracy-criterion"]], "--add-aug": [[87, "cmdoption-tlt-train-add-aug"]], "--add_aug": [[87, "cmdoption-tlt-train-add-aug"]], "--approach": [[87, "cmdoption-tlt-quantize-approach"]], "--batch-size": [[87, "cmdoption-tlt-benchmark-batch-size"], [87, "cmdoption-tlt-quantize-batch-size"]], "--batch_size": [[87, "cmdoption-tlt-benchmark-batch-size"], [87, "cmdoption-tlt-quantize-batch-size"]], "--class-names": [[87, "cmdoption-tlt-eval-class-names"], [87, "cmdoption-tlt-train-class-names"]], "--class_names": [[87, "cmdoption-tlt-eval-class-names"], [87, "cmdoption-tlt-train-class-names"]], "--context-key": [[87, "cmdoption-tlt-train-context-key"]], "--context_key": [[87, "cmdoption-tlt-train-context-key"]], "--cutpaste": [[87, "cmdoption-tlt-train-cutpaste"]], "--dataset-catalog": [[87, "cmdoption-tlt-eval-dataset-catalog"], [87, "cmdoption-tlt-train-dataset-catalog"]], "--dataset-dir": [[87, "cmdoption-tlt-benchmark-dataset-dir"], [87, "cmdoption-tlt-eval-dataset-dir"], [87, "cmdoption-tlt-quantize-dataset-dir"], [87, "cmdoption-tlt-train-dataset-dir"]], "--dataset-file": [[87, "cmdoption-tlt-benchmark-dataset-file"], [87, "cmdoption-tlt-eval-0"], [87, "cmdoption-tlt-eval-dataset-file"], [87, "cmdoption-tlt-quantize-dataset-file"], [87, "cmdoption-tlt-train-dataset-file"]], "--dataset-name": [[87, "cmdoption-tlt-eval-dataset-name"], [87, "cmdoption-tlt-train-dataset-name"]], "--dataset_catalog": [[87, "cmdoption-tlt-eval-dataset-catalog"], [87, "cmdoption-tlt-train-dataset-catalog"]], "--dataset_dir": [[87, "cmdoption-tlt-benchmark-dataset-dir"], [87, "cmdoption-tlt-eval-dataset-dir"], [87, "cmdoption-tlt-quantize-dataset-dir"], [87, "cmdoption-tlt-train-dataset-dir"]], "--dataset_file": [[87, "cmdoption-tlt-benchmark-dataset-file"], [87, "cmdoption-tlt-eval-0"], [87, "cmdoption-tlt-eval-dataset-file"], [87, "cmdoption-tlt-quantize-dataset-file"], [87, "cmdoption-tlt-train-dataset-file"]], "--dataset_name": [[87, "cmdoption-tlt-eval-dataset-name"], [87, "cmdoption-tlt-train-dataset-name"]], "--delimiter": [[87, "cmdoption-tlt-benchmark-delimiter"], [87, "cmdoption-tlt-eval-delimiter"], [87, "cmdoption-tlt-quantize-delimiter"], [87, "cmdoption-tlt-train-delimiter"]], "--distributed": [[87, "cmdoption-tlt-train-d"]], "--early-stopping": [[87, "cmdoption-tlt-train-early-stopping"]], "--early_stopping": [[87, "cmdoption-tlt-train-early-stopping"]], "--epochs": [[87, "cmdoption-tlt-train-epochs"]], "--framework": [[87, "cmdoption-tlt-list-models-f"], [87, "cmdoption-tlt-train-f"]], "--hostfile": [[87, "cmdoption-tlt-train-hostfile"]], "--hvd-start-timeout": [[87, "cmdoption-tlt-train-hvd-start-timeout"]], "--hvd_start_timeout": [[87, "cmdoption-tlt-train-hvd-start-timeout"]], "--init-checkpoints": [[87, "cmdoption-tlt-train-init-checkpoints"]], "--init_checkpoints": [[87, "cmdoption-tlt-train-init-checkpoints"]], "--instruction-key": [[87, "cmdoption-tlt-train-instruction-key"]], "--instruction_key": [[87, "cmdoption-tlt-train-instruction-key"]], "--ipex-optimize": [[87, "cmdoption-tlt-train-ipex_optimize"]], "--ipex_optimize": [[87, "cmdoption-tlt-train-ipex_optimize"]], "--lora-alpha": [[87, "cmdoption-tlt-train-lora-alpha"]], "--lora-dropout": [[87, "cmdoption-tlt-train-lora-dropout"]], "--lora-rank": [[87, "cmdoption-tlt-train-lora-rank"]], "--lora_alpha": [[87, "cmdoption-tlt-train-lora-alpha"]], "--lora_dropout": [[87, "cmdoption-tlt-train-lora-dropout"]], "--lora_rank": [[87, "cmdoption-tlt-train-lora-rank"]], "--lr-decay": [[87, "cmdoption-tlt-train-lr-decay"]], "--lr_decay": [[87, "cmdoption-tlt-train-lr-decay"]], "--max-new-tokens": [[87, "cmdoption-tlt-generate-max-new-tokens"]], "--max-trials": [[87, "cmdoption-tlt-quantize-max-trials"]], "--max_new_tokens": [[87, "cmdoption-tlt-generate-max-new-tokens"]], "--max_trials": [[87, "cmdoption-tlt-quantize-max-trials"]], "--model-dir": [[87, "cmdoption-tlt-benchmark-model-dir"], [87, "cmdoption-tlt-eval-model-dir"], [87, "cmdoption-tlt-generate-model-dir"], [87, "cmdoption-tlt-optimize-model-dir"], [87, "cmdoption-tlt-quantize-model-dir"]], "--model-name": [[87, "cmdoption-tlt-eval-model-name"], [87, "cmdoption-tlt-generate-model-name"], [87, "cmdoption-tlt-train-model-name"]], "--model_dir": [[87, "cmdoption-tlt-benchmark-model-dir"], [87, "cmdoption-tlt-eval-model-dir"], [87, "cmdoption-tlt-generate-model-dir"], [87, "cmdoption-tlt-optimize-model-dir"], [87, "cmdoption-tlt-quantize-model-dir"]], "--model_name": [[87, "cmdoption-tlt-eval-model-name"], [87, "cmdoption-tlt-generate-model-name"], [87, "cmdoption-tlt-train-model-name"]], "--nnodes": [[87, "cmdoption-tlt-train-nnodes"]], "--nproc-per-node": [[87, "cmdoption-tlt-train-nproc_per_node"]], "--nproc_per_node": [[87, "cmdoption-tlt-train-nproc_per_node"]], "--num-beams": [[87, "cmdoption-tlt-generate-num-beams"]], "--num_beams": [[87, "cmdoption-tlt-generate-num-beams"]], "--output-dir": [[87, "cmdoption-tlt-benchmark-output-dir"], [87, "cmdoption-tlt-optimize-output-dir"], [87, "cmdoption-tlt-quantize-output-dir"], [87, "cmdoption-tlt-train-output-dir"]], "--output_dir": [[87, "cmdoption-tlt-benchmark-output-dir"], [87, "cmdoption-tlt-optimize-output-dir"], [87, "cmdoption-tlt-quantize-output-dir"], [87, "cmdoption-tlt-train-output-dir"]], "--prompt": [[87, "cmdoption-tlt-generate-prompt"]], "--prompt-with-context": [[87, "cmdoption-tlt-eval-prompt-with-context"], [87, "cmdoption-tlt-train-prompt-with-context"]], "--prompt-without-context": [[87, "cmdoption-tlt-eval-prompt-without-context"], [87, "cmdoption-tlt-train-prompt-without-context"]], "--prompt_with_context": [[87, "cmdoption-tlt-eval-prompt-with-context"], [87, "cmdoption-tlt-train-prompt-with-context"]], "--prompt_without_context": [[87, "cmdoption-tlt-eval-prompt-without-context"], [87, "cmdoption-tlt-train-prompt-without-context"]], "--repetition-penalty": [[87, "cmdoption-tlt-generate-repetition-penalty"]], "--repetition_penalty": [[87, "cmdoption-tlt-generate-repetition-penalty"]], "--response-key": [[87, "cmdoption-tlt-train-response-key"]], "--response_key": [[87, "cmdoption-tlt-train-response-key"]], "--simsiam": [[87, "cmdoption-tlt-train-simsiam"]], "--temperature": [[87, "cmdoption-tlt-generate-temperature"]], "--timeout": [[87, "cmdoption-tlt-quantize-timeout"]], "--top-k": [[87, "cmdoption-tlt-generate-top-k"]], "--top-p": [[87, "cmdoption-tlt-generate-top-p"]], "--top_k": [[87, "cmdoption-tlt-generate-top-k"]], "--top_p": [[87, "cmdoption-tlt-generate-top-p"]], "--use-case": [[87, "cmdoption-tlt-list-models-use-case"], [87, "cmdoption-tlt-train-use-case"]], "--use-horovod": [[87, "cmdoption-tlt-train-use-horovod"]], "--use_case": [[87, "cmdoption-tlt-list-models-use-case"], [87, "cmdoption-tlt-train-use-case"]], "--use_horovod": [[87, "cmdoption-tlt-train-use-horovod"]], "--verbose": [[87, "cmdoption-tlt-list-models-verbose"]], "-d": [[87, "cmdoption-tlt-train-d"]], "-f": [[87, "cmdoption-tlt-list-models-f"], [87, "cmdoption-tlt-train-f"]], "tlt-benchmark command line option": [[87, "cmdoption-tlt-benchmark-batch-size"], [87, "cmdoption-tlt-benchmark-dataset-dir"], [87, "cmdoption-tlt-benchmark-dataset-file"], [87, "cmdoption-tlt-benchmark-delimiter"], [87, "cmdoption-tlt-benchmark-model-dir"], [87, "cmdoption-tlt-benchmark-output-dir"]], "tlt-eval command line option": [[87, "cmdoption-tlt-eval-0"], [87, "cmdoption-tlt-eval-class-names"], [87, "cmdoption-tlt-eval-dataset-catalog"], [87, "cmdoption-tlt-eval-dataset-dir"], [87, "cmdoption-tlt-eval-dataset-file"], [87, "cmdoption-tlt-eval-dataset-name"], [87, "cmdoption-tlt-eval-delimiter"], [87, "cmdoption-tlt-eval-model-dir"], [87, "cmdoption-tlt-eval-model-name"], [87, "cmdoption-tlt-eval-prompt-with-context"], [87, "cmdoption-tlt-eval-prompt-without-context"]], "tlt-generate command line option": [[87, "cmdoption-tlt-generate-max-new-tokens"], [87, "cmdoption-tlt-generate-model-dir"], [87, "cmdoption-tlt-generate-model-name"], [87, "cmdoption-tlt-generate-num-beams"], [87, "cmdoption-tlt-generate-prompt"], [87, "cmdoption-tlt-generate-repetition-penalty"], [87, "cmdoption-tlt-generate-temperature"], [87, "cmdoption-tlt-generate-top-k"], [87, "cmdoption-tlt-generate-top-p"]], "tlt-list-models command line option": [[87, "cmdoption-tlt-list-models-f"], [87, "cmdoption-tlt-list-models-use-case"], [87, "cmdoption-tlt-list-models-verbose"]], "tlt-optimize command line option": [[87, "cmdoption-tlt-optimize-model-dir"], [87, "cmdoption-tlt-optimize-output-dir"]], "tlt-quantize command line option": [[87, "cmdoption-tlt-quantize-accuracy-criterion"], [87, "cmdoption-tlt-quantize-approach"], [87, "cmdoption-tlt-quantize-batch-size"], [87, "cmdoption-tlt-quantize-dataset-dir"], [87, "cmdoption-tlt-quantize-dataset-file"], [87, "cmdoption-tlt-quantize-delimiter"], [87, "cmdoption-tlt-quantize-max-trials"], [87, "cmdoption-tlt-quantize-model-dir"], [87, "cmdoption-tlt-quantize-output-dir"], [87, "cmdoption-tlt-quantize-timeout"]], "tlt-train command line option": [[87, "cmdoption-tlt-train-add-aug"], [87, "cmdoption-tlt-train-class-names"], [87, "cmdoption-tlt-train-context-key"], [87, "cmdoption-tlt-train-cutpaste"], [87, "cmdoption-tlt-train-d"], [87, "cmdoption-tlt-train-dataset-catalog"], [87, "cmdoption-tlt-train-dataset-dir"], [87, "cmdoption-tlt-train-dataset-file"], [87, "cmdoption-tlt-train-dataset-name"], [87, "cmdoption-tlt-train-delimiter"], [87, "cmdoption-tlt-train-early-stopping"], [87, "cmdoption-tlt-train-epochs"], [87, "cmdoption-tlt-train-f"], [87, "cmdoption-tlt-train-hostfile"], [87, "cmdoption-tlt-train-hvd-start-timeout"], [87, "cmdoption-tlt-train-init-checkpoints"], [87, "cmdoption-tlt-train-instruction-key"], [87, "cmdoption-tlt-train-ipex_optimize"], [87, "cmdoption-tlt-train-lora-alpha"], [87, "cmdoption-tlt-train-lora-dropout"], [87, "cmdoption-tlt-train-lora-rank"], [87, "cmdoption-tlt-train-lr-decay"], [87, "cmdoption-tlt-train-model-name"], [87, "cmdoption-tlt-train-nnodes"], [87, "cmdoption-tlt-train-nproc_per_node"], [87, "cmdoption-tlt-train-output-dir"], [87, "cmdoption-tlt-train-prompt-with-context"], [87, "cmdoption-tlt-train-prompt-without-context"], [87, "cmdoption-tlt-train-response-key"], [87, "cmdoption-tlt-train-simsiam"], [87, "cmdoption-tlt-train-use-case"], [87, "cmdoption-tlt-train-use-horovod"]]}})